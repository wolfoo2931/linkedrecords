/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../structured-text-editor/assets/latex_cheatsheet.js":
/*!************************************************************!*\
  !*** ../structured-text-editor/assets/latex_cheatsheet.js ***!
  \************************************************************/
/***/ ((module) => {

module.exports = `
<div class="latex-eq-tooltip">
Some Examples what you can insert here. You can scroll the list to see more.
<table>
<tr>
<td>
  <div class="markup">e=mc^2</div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">e=mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right: 0.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.277778em;"></span></span><span class="base"><span class="strut" style="height: 0.864108em; vertical-align: 0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.864108em;"><span class="" style="top: -3.113em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>
</td>
</tr>
<tr>
<td>
  <div class="markup">y = \\frac{2x^2}{8x}</div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mrow><mn>2</mn><msup><mi>x</mi><mn>2</mn></msup></mrow><mrow><mn>8</mn><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">y = \\frac{2x^2}{8x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="mord mathdefault" style="margin-right: 0.03588em;">y</span><span class="mspace" style="margin-right: 0.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.277778em;"></span></span><span class="base"><span class="strut" style="height: 2.17711em; vertical-align: -0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.49111em;"><span class="" style="top: -2.314em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord">8</span><span class="mord mathdefault">x</span></span></span><span class="" style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span class="" style="top: -3.677em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.814108em;"><span class="" style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.686em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
</td>
</tr>
<tr>
<td>
  <div class="markup">\\int^{a+1}_{a-1}</div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">\\int^{a+1}_{a-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 2.53429em; vertical-align: -0.970281em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right: 0.44445em; position: relative; top: -0.001125em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.56401em;"><span class="" style="top: -1.78805em; margin-left: -0.44445em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span class="" style="top: -3.8129em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.970281em;"><span class=""></span></span></span></span></span></span></span></span></span></span>
</td>
</tr>
<tr>
<td>
  <div class="markup">\\sum_{i=1}^n a_i</div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\\sum_{i=1}^n a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 2.92907em; vertical-align: -1.27767em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.6514em;"><span class="" style="top: -1.87233em; margin-left: 0em;"><span class="pstrut" style="height: 3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span class="" style="top: -3.05001em;"><span class="pstrut" style="height: 3.05em;"></span><span class=""><span class="mop op-symbol large-op">∑</span></span></span><span class="" style="top: -4.30001em; margin-left: 0em;"><span class="pstrut" style="height: 3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 1.27767em;"><span class=""></span></span></span></span></span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span>
</td>
</tr>
<tr>
<td>
  <div class="markup">\\big[x\\big]</div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="false">[</mo><mi>x</mi><mo fence="false">]</mo></mrow><annotation encoding="application/x-tex">\\big[x\\big]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1.20001em; vertical-align: -0.35001em;"></span><span class="mord"><span class="delimsizing size1">[</span></span><span class="mord mathdefault">x</span><span class="mord"><span class="delimsizing size1">]</span></span></span></span></span></span>
</td>
</tr>
<tr>
<td>
  <div class="markup">\\Big[x\\Big]</div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="false">[</mo><mi>x</mi><mo fence="false">]</mo></mrow><annotation encoding="application/x-tex">\\Big[x\\Big]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1.80002em; vertical-align: -0.65002em;"></span><span class="mord"><span class="delimsizing size2">[</span></span><span class="mord mathdefault">x</span><span class="mord"><span class="delimsizing size2">]</span></span></span></span></span></span>
</td>
</tr>
<tr>
<td>
  <div class="markup">\\lim_{h\\to0} \\frac{1}{n}</div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>h</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\\lim_{h\\to0} \\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 2.07355em; vertical-align: -0.752108em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.69444em;"><span class="" style="top: -2.34789em; margin-left: 0em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span class="" style="top: -3em;"><span class="pstrut" style="height: 3em;"></span><span class=""><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.752108em;"><span class=""></span></span></span></span></span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.32144em;"><span class="" style="top: -2.314em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span class="" style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span class="" style="top: -3.677em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.686em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
</td>
</tr>
<tr>
<td>
  <div class="markup">\\sqrt{9} = \\sqrt[2]{9} </div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mn>9</mn></msqrt><mo>=</mo><mroot><mn>9</mn><mn>2</mn></mroot></mrow><annotation encoding="application/x-tex">\\sqrt{9} = \\sqrt[2]{9} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1.04em; vertical-align: -0.083905em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.956095em;"><span class="svg-align" style="top: -3em;"><span class="pstrut" style="height: 3em;"></span><span class="mord" style="padding-left: 0.833em;"><span class="mord">9</span></span></span><span class="" style="top: -2.91609em;"><span class="pstrut" style="height: 3em;"></span><span class="hide-tail" style="min-width: 0.853em; height: 1.08em;"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
    c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
    c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
    c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
    s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
    c69,-144,104.5,-217.7,106.5,-221
    l0 -0
    c5.3,-9.3,12,-14,20,-14
    H400000v40H845.2724
    s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
    c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
    M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.083905em;"><span class=""></span></span></span></span></span><span class="mspace" style="margin-right: 0.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.277778em;"></span></span><span class="base"><span class="strut" style="height: 1.04em; vertical-align: -0.083905em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.845534em;"><span class="" style="top: -3.02331em;"><span class="pstrut" style="height: 2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.956095em;"><span class="svg-align" style="top: -3em;"><span class="pstrut" style="height: 3em;"></span><span class="mord" style="padding-left: 0.833em;"><span class="mord">9</span></span></span><span class="" style="top: -2.91609em;"><span class="pstrut" style="height: 3em;"></span><span class="hide-tail" style="min-width: 0.853em; height: 1.08em;"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
    c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
    c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
    c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
    s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
    c69,-144,104.5,-217.7,106.5,-221
    l0 -0
    c5.3,-9.3,12,-14,20,-14
    H400000v40H845.2724
    s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
    c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
    M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.083905em;"><span class=""></span></span></span></span></span></span></span></span></span>
</td>
</tr>
<tr>
<td>
  <div class="markup">
    \\begin{pmatrix}<br/>
    &nbsp;&nbsp;a && b \\\\<br/>
    &nbsp;&nbsp;c && d<br/>
    \\end{pmatrix}<br/>
  </div>
</td>
<td>
  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\\begin{pmatrix}
    a &amp;&amp; b \\\\
    c &amp;&amp; d
  \\end{pmatrix}
  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 2.40003em; vertical-align: -0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top: 0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span class="" style="top: -3.61em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span class="" style="top: -2.41em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span class=""></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span class="" style="top: -3.45em;"><span class="pstrut" style="height: 2.84em;"></span><span class="mord"></span></span><span class="" style="top: -2.25em;"><span class="pstrut" style="height: 2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span class=""></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span class="" style="top: -3.61em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span class="" style="top: -2.41em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span class=""></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top: 0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span>
</td>

<tr>
  <td>
    <div class="markup">
      f=\\begin{cases}<br/>
      0   & c1\\\\<br/>
      1   & c2\\\\<br/>
      2   & c2<br/>
      \\end{cases}<br/>
    </div>
  </td>
  <td>
    <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mn>2</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f =
      \\begin{cases}
      0   &amp; c1\\\\
      1   &amp; c2\\\\
      2   &amp; c2
      \\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="mord mathdefault" style="margin-right: 0.10764em;">f</span><span class="mspace" style="margin-right: 0.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.277778em;"></span></span><span class="base"><span class="strut" style="height: 4.32em; vertical-align: -1.91em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 2.35002em;"><span class="" style="top: -2.19999em;"><span class="pstrut" style="height: 3.15em;"></span><span class="delimsizinginner delim-size4"><span class="">⎩</span></span></span><span class="" style="top: -2.19499em;"><span class="pstrut" style="height: 3.15em;"></span><span class="delimsizinginner delim-size4"><span class="">⎪</span></span></span><span class="" style="top: -2.20499em;"><span class="pstrut" style="height: 3.15em;"></span><span class="delimsizinginner delim-size4"><span class="">⎪</span></span></span><span class="" style="top: -3.15001em;"><span class="pstrut" style="height: 3.15em;"></span><span class="delimsizinginner delim-size4"><span class="">⎨</span></span></span><span class="" style="top: -4.29501em;"><span class="pstrut" style="height: 3.15em;"></span><span class="delimsizinginner delim-size4"><span class="">⎪</span></span></span><span class="" style="top: -4.30501em;"><span class="pstrut" style="height: 3.15em;"></span><span class="delimsizinginner delim-size4"><span class="">⎪</span></span></span><span class="" style="top: -4.60002em;"><span class="pstrut" style="height: 3.15em;"></span><span class="delimsizinginner delim-size4"><span class="">⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 1.85002em;"><span class=""></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 2.41em;"><span class="" style="top: -4.41em;"><span class="pstrut" style="height: 3.008em;"></span><span class="mord"><span class="mord">0</span></span></span><span class="" style="top: -2.97em;"><span class="pstrut" style="height: 3.008em;"></span><span class="mord"><span class="mord">1</span></span></span><span class="" style="top: -1.53em;"><span class="pstrut" style="height: 3.008em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 1.91em;"><span class=""></span></span></span></span></span><span class="arraycolsep" style="width: 1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 2.41em;"><span class="" style="top: -4.41em;"><span class="pstrut" style="height: 3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord">1</span></span></span><span class="" style="top: -2.97em;"><span class="pstrut" style="height: 3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord">2</span></span></span><span class="" style="top: -1.53em;"><span class="pstrut" style="height: 3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 1.91em;"><span class=""></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
  </td>
</tr>
</tr>
</table>
<div>`

/***/ }),

/***/ "../structured-text-editor/lib/declarativ_forms/src/declarativ_form.js":
/*!*****************************************************************************!*\
  !*** ../structured-text-editor/lib/declarativ_forms/src/declarativ_form.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var dl = __webpack_require__(/*! ./dl_select */ "../structured-text-editor/lib/declarativ_forms/src/dl_select.js");
var tippy = (__webpack_require__(/*! tippy.js */ "../structured-text-editor/node_modules/tippy.js/dist/tippy.esm.js")["default"]);
var tippyInstances = new Map();
var modalDialogs = [];

document.addEventListener("keydown", e => {
    if(modalDialogs.length === 0) {
        return;
    }

    lastDialog = modalDialogs[modalDialogs.length - 1];

    if(e.key === 'Escape') {
        lastDialog.escHandler(e)
    } else if(e.key === 'Enter') {
        if(Object.keys(lastDialog.buttons).length === 1) {
            lastDialog.enterHandler(e)
        }
    }
});

function DeclarativForm(attrs, onChangeCallback, onCancelCallback, confirmButtonCaption) {
    var self = this;
    this.fields = attrs.fields
    this.dom = document.createElement('div')
    this.dom.classList.add('dl-form')
    this.formElement = document.createElement('form')
    this.dom.appendChild(this.formElement)
    this.onChangeCallback = onChangeCallback
    this.onCancelCallback = onCancelCallback
    this.buttons = attrs.buttons || { [confirmButtonCaption || 'OK']: { action: onChangeCallback, id: 'confirmBtn-' + Math.round(Math.random()*1000000) }  }
    this.initPromises = {}
    this.allPromises = []

    if(Object.keys(this.buttons).length === 1) {
        this.onChangeCallback = Object.values(this.buttons)[0].action || Object.values(this.buttons)[0]
    }

    if(attrs.classNames) {
        attrs.classNames.forEach(function(name) {
            self.formElement.classList.add(name)
        })
    }

    this.formElement.onsubmit = function(e) {
        e.preventDefault();
        return false;
    }

    this.escHandler = function(e) {
        self.cancelModalIfCancelable()
    }

    this.enterHandler = function(e) {
        var field = self.fields.find(function(f) { return f.name === e.target.name})
        var confirmBtnElID =  Object.values(self.buttons).map(b => b.id).find(id => !!id)
        var confirmBtnEl = document.getElementById(confirmBtnElID)

        if(!field || !field.largetext) {
            if(!confirmBtnEl || !confirmBtnEl.classList.contains('disabled')) {
                self.closeModalIfOpen()
            }

            e.preventDefault()
            e.stopPropagation()
        } else if(!field.allowNewlines) {
            e.preventDefault()
            e.stopPropagation()
        }
    }

    this.fields.forEach((field, fieldIndex) => {
        var fieldWrapper = document.createElement('div'),
            fieldElement, label, allowedValues,
            message, tooltip

        allowedValues = (field.allowedValues instanceof Function) ?
            field.allowedValues() :
            field.allowedValues

        message = (field.message instanceof Function) ?
            field.message() :
            field.message

        fieldWrapper.id = 'dl-form-field-wrapper-for-' + field.name
        fieldWrapper.classList.add('dl-form-field-wrapper')

        if(field.tab) {
            fieldWrapper.classList.add(field.tab.replace(/\s/g, ''))
        }

        if(allowedValues) {
            fieldElement = document.createElement('dl-select')
            fieldWrapper.classList.add('dl-select-wrapper')
            fieldElement.setLoadingStatus()
            self.initPromises[field.name] = Promise.resolve(allowedValues).then(values => {
                values.forEach((val) => {
                    let optEl = document.createElement('dl-option')
                    if(Array.isArray(val)) {
                        optEl.setAttribute('value', val[0])
                        optEl.innerHTML = val[1]
                        if(val[2]) {
                            optEl.setAttribute('displayWhenSelected', val[2])
                        }
                    } else {
                        optEl.innerHTML = val
                    }

                    fieldElement.onchange = () => {
                        self.updateForm(fieldElement)
                    }

                    fieldElement.addOption(optEl)
                })

                fieldElement.unsetLoadingStatus()
            }).catch(_ => {
                fieldElement.unsetLoadingStatus()
            })

            this.allPromises.push(self.initPromises[field.name])
        } else if (field.message) {
            fieldElement = document.createElement('p')
            fieldElement.classList.add('message')
            fieldElement.innerHTML = field.message
        } else if (field.arrayOf) {
            fieldElement = document.createElement('div')
            fieldElement.classList.add('array-of')
            fieldElement.setValue = (value) => {
                fieldElement.value = value
                self.updateForm(fieldElement)
            }

            field.render = (dom, formData) => {
                dom.innerHTML = ''

                let renderEntry = field.renderEntry || (obj => Object.values(obj).filter(val => (typeof val === 'string') && val.trim() !== '').join(', '))

                if(field.suggested) {
                    let suggestedContainer = document.createElement('div')
                    suggestedContainer.classList.add('dl-form-array-suggested-container')
                    let suggestedEntries = typeof field.suggested === 'function' ?
                        field.suggested(formData, modalDialogs.map(d => d.getValues())) :
                        field.suggested;

                    (suggestedEntries || []).forEach((suggestedEntry, fieldIndex) => {
                        checkboxEl = document.createElement('span')

                        let cb = document.createElement('input')
                        cb.id = 'field-' + fieldIndex
                        cb.setAttribute('type', 'checkbox')
                        cb.oninput = cb.onchange = () => {
                            field.domElement.acceptedSuggestions = field.domElement.acceptedSuggestions || [];

                            checkboxEl.setAttribute('value', cb.checked)

                            if(cb.checked) {
                                field.domElement.acceptedSuggestions.push([suggestedEntry, fieldIndex])
                            } else {
                                field.domElement.acceptedSuggestions = field.domElement.acceptedSuggestions.filter(x => x[1] !== fieldIndex)
                            }
                        }

                        let labelEl = document.createElement('label')
                        labelEl.setAttribute('for', 'field-' + fieldIndex)
                        labelEl.innerHTML = renderEntry(suggestedEntry)

                        checkboxEl.classList.add('check')
                        checkboxEl.classList.add('dl-form-array-of-suggestion')
                        checkboxEl.appendChild(cb)
                        checkboxEl.appendChild(labelEl)
                        checkboxEl.setAttribute('value', false)
                        checkboxEl.jsonValue = suggestedEntry

                        suggestedContainer.appendChild(checkboxEl)

                        return checkboxEl
                    })

                    dom.appendChild(suggestedContainer)
                }

                const getConfirmButton = action => ({
                    'OK': {
                        action,
                        id: 'addIntegration',
                        isActive: formData => field.isValidRecord ? field.isValidRecord(formData, self) : true,
                    }
                })

                dom.value && dom.value.forEach && dom.value.forEach((entryObj, elIndex) => {
                    let entryEl = document.createElement('div')
                    let deleteElBtn = document.createElement('button')
                    let editElBtn = document.createElement('button')
                    deleteElBtn.innerHTML = 'Remove'
                    editElBtn.innerHTML = 'Edit'
                    entryEl.innerHTML = '<span>' + renderEntry(entryObj) + '</span>'
                    entryEl.dataset.ElIndex = elIndex
                    entryEl.classList.add('dl-form-array-of-entry')

                    entryEl.appendChild(editElBtn)
                    entryEl.appendChild(deleteElBtn)

                    deleteElBtn.classList.add('delete-array-of-btn')

                    editElBtn.classList.add('edit-array-of-btn')
                    editElBtn.dataset.ElIndex = elIndex
                    editElBtn.onclick = e => {
                        e.preventDefault()

                        let editFieds = field.arrayOf.map(field => {
                            return {
                                ...field,
                                defaultValue: dom.value[deleteElBtn.dataset.ElIndex][field.name] || ''
                            };
                        })

                        new DeclarativForm({ classNames: [`form-for-array-of-${field.name}`], fields: editFieds, buttons: getConfirmButton(formData => {
                            dom.value = dom.value || []
                            dom.value[deleteElBtn.dataset.ElIndex] = formData
                            dom.setValue(dom.value)
                            if(field.onChange) {
                                Promise.allSettled(this.allPromises).then(() => field.onChange(this.getValues()))
                            }
                        }) }, () => {}, () => {}).openInModal()
                    }

                    deleteElBtn.dataset.ElIndex = elIndex
                    deleteElBtn.onclick = e => {
                        dom.value.splice(deleteElBtn.dataset.ElIndex, 1)
                        dom.setValue(dom.value)
                        e.preventDefault()
                        if(field.onChange) {
                            Promise.allSettled(this.allPromises).then(() => field.onChange(this.getValues()))
                        }
                    }

                    dom.appendChild(entryEl)
                })

                let addButton = document.createElement('button')
                addButton.classList.add('dl-form-array-of-add-entry')
                addButton.innerHTML = field.newButtonLabel || 'Add'

                addButton.onclick = e => {
                    new DeclarativForm({ classNames: [`form-for-array-of-${field.name}`], fields: field.arrayOf, buttons: getConfirmButton(formData => {
                        dom.value = dom.value || []
                        dom.value.push(formData)
                        dom.setValue(dom.value)
                        if(field.onChange) {
                            Promise.all(this.allPromises).then(() => field.onChange(this.getValues()))
                        }
                    })}, () => {}, () => {}).openInModal()

                    e.preventDefault()
                }

                dom.appendChild(addButton)
            }

            field.render(fieldElement, self.formData, self)
        } else if (field.render) {
            fieldElement = document.createElement('p')
            fieldElement.classList.add('render')

            fieldElement.onChange = function (forceFormUpdate) {
                self.updateForm(fieldElement, forceFormUpdate);
            }

            field.render(fieldElement, self.formData, self)
        } else if (field.largetext) {
            fieldElement = document.createElement('textarea')
            fieldElement.oninput = fieldElement.onchange = function() {
                self.updateForm(fieldElement);
            }
        } else if (field.check) {
            fieldElement = document.createElement('span')

            let cb = document.createElement('input')
            cb.id = 'field-' + fieldIndex
            cb.setAttribute('type', 'checkbox')
            cb.oninput = cb.onchange = function() {
                fieldElement.setAttribute('value', cb.checked)
                self.updateForm(cb);
            }

            let labelEl = document.createElement('label')
            labelEl.setAttribute('for', 'field-' + fieldIndex)
            labelEl.innerHTML = field.check

            fieldElement.classList.add('check')
            fieldElement.appendChild(cb)
            fieldElement.appendChild(labelEl)
            fieldElement.setAttribute('value', typeof field.defaultValue === 'function' ? field.defaultValue(self.formData) : field.defaultValue)
            fieldElement.setValue = function(val) {
                cb.checked = !!val
            }
        } else if (field.detailedOptions) {
            fieldElement = document.createElement('div')
            fieldElement.classList.add('detailed-options')

            field.detailedOptions.forEach(function(option) {
                var optionEl = document.createElement('div');
                optionEl.classList.add('detailed-option');

                optionEl.innerHTML = option.html;
                optionEl.setAttribute('data-value', option.value);

                optionEl.addEventListener("click", function() {
                    fieldElement.value = option.value;
                    fieldElement.querySelectorAll('.detailed-option').forEach(function(option) {
                        option.classList.remove('active');
                    });

                    optionEl.classList.add('active');
                    self.updateForm(optionEl);
                });

                fieldElement.appendChild(optionEl)
                fieldElement.setValue = function(val) {
                    var el = fieldElement.querySelector(`div[data-value="${val}"]`);

                    if(!el) {
                        return;
                    }

                    fieldElement.value = val;
                    fieldElement.querySelectorAll('.detailed-option').forEach(function(option) {
                        option.classList.remove('active');
                    });

                    el.classList.add('active');
                }
            });
        } else if (field.calculate) {
            fieldElement = document.createElement('input')
            fieldElement.type = 'hidden'
        } else {
            fieldElement = document.createElement('input')
            fieldElement.setValue = function(val) {
                fieldElement.value = val;
            }

            if(field.inputType) {
                fieldElement.setAttribute('type', field.inputType);
            }

            if(field.autocomplete) {
                fieldElement.setAttribute('autocomplete', field.autocomplete);
            }

            if(field.placeholder) {
                fieldElement.placeholder = field.placeholder;
            }

            fieldElement.oninput = fieldElement.onchange = function() {
                self.updateForm(fieldElement);
            }
        }

        field.domElement = fieldElement
        fieldElement.name = field.name
        fieldElement.setAttribute('name', field.name)

        if(field.displayName) {
            label = document.createElement('label')
            label.innerHTML = field.displayName
            label.setAttribute('for', field.name)
            fieldWrapper.appendChild(label)
        } else {
            fieldWrapper.classList.add('withoutLabel')
        }

        if(field.tooltip) {
            tooltip = document.createElement('span')
            tooltip.dataset['tippyContent'] = field.tooltip.text || field.tooltip
            tooltip.dataset['initialTippyContent'] = field.tooltip.text || field.tooltip
            tooltip.classList.add('dl-tooltip')
            tooltip.innerHTML = '?'

            if(label && !field.tooltip.inInput) {
                label.appendChild(tooltip)
            } else {
                tooltip.classList.add('dl-tooltip-in-input')
                fieldElement.classList.add('dl-tooltip-inside')
                fieldWrapper.appendChild(tooltip)
            }
        }

        if(fieldElement.type === 'hidden') {
            fieldWrapper.classList.add('dl-form-hidden-field')
        }

        fieldWrapper.appendChild(fieldElement)
        self.dom.children[0].appendChild(fieldWrapper)

        if(field.defaultValue) {
            this.allPromises.push(Promise.resolve(self.initPromises[field.name]).then(_ => {
                let tmpDefaultValue = typeof field.defaultValue === 'function' ? field.defaultValue(self.formData) : field.defaultValue

                if(fieldElement.setValue) {
                    fieldElement.setValue(tmpDefaultValue)
                } else if (fieldElement.tagName === 'INPUT' || fieldElement.tagName === 'TEXTAREA') {
                    fieldElement.value = tmpDefaultValue
                } else {
                    fieldElement.setAttribute('value', tmpDefaultValue)
                }
            }))
        }
    })

    Promise.allSettled(this.allPromises).then(_ => self.updateForm())
}

DeclarativForm.prototype = {

    updateForm: function(triggerElement, forceFormUpdate) {
        var formData = this.getValues();
        var self = this
        var triggerFieldName = triggerElement && triggerElement.name

        if(this._lastFromUpdatSate === JSON.stringify(formData) && !forceFormUpdate) {
            return;
        }

        this._lastFromUpdatSate = JSON.stringify(formData)

        this.fields.forEach(field => {
            var shouldReload = (!triggerFieldName || (field.reloadOnChangeOf && field.reloadOnChangeOf.includes(triggerFieldName)))

            if(!field.domElement) {
                return;
            }

            if(field.isActive) {
                let tmpIsActive = field.isActive(formData, modalDialogs.map(d => d.getValues()))
                if(tmpIsActive) {
                    field.domElement.parentElement.classList.remove('inactive')
                } else {
                    field.domElement.parentElement.classList.add('inactive')
                }
            }

            if(field.onFormChange) {
                field.onFormChange(formData, self, triggerElement)
            }

            if(field.render) {
                field.render(field.domElement, formData, self)
            }

            if(field.allowedValues instanceof Function && shouldReload) {
                const allowedValues = field.allowedValues(formData)
                field.domElement.setLoadingStatus()
                this.allPromises.push(allowedValues)

                Promise.resolve(allowedValues).then(values => {
                    this.resetTooltip(field.name)
                    field.domElement.removeAllOptions()

                    values && values.forEach((val) => {
                        let optEl = document.createElement('dl-option')
                        if(Array.isArray(val)) {
                            optEl.setAttribute('value', val[0])
                            optEl.innerHTML = val[1]
                            if(val[2]) {
                                optEl.setAttribute('displayWhenSelected', val[2])
                            }
                        } else {
                            optEl.innerHTML = val
                        }

                        field.domElement.onchange = function() {
                            self.updateForm(field.domElement)
                        }

                        field.domElement.addOption(optEl)
                    })

                    field.domElement.unsetLoadingStatus()
                    field.domElement.setValue(field.domElement.getValue())
                }).catch(err => {
                    field.domElement.unsetLoadingStatus()
                    if(field.onValuesCalculationFailedMessage) {
                        const message = field.onValuesCalculationFailedMessage(formData, err);
                        if(message.level === 'info') {
                            this.setTooltipWarning(field.name, message.text)
                        } else if(message.level === 'warning') {
                            this.setTooltipWarning(field.name, message.text)
                        } else if(message.level === 'error') {
                            this.setTooltipError(field.name, message.text)
                        }
                    }
                })
            }
        });

        Promise.allSettled(this.allPromises).then(() => {
            formData = this.getValues();

            Object.values(this.buttons)
                .filter(btn => (btn.isActive && btn.id))
                .forEach(btn => {
                    let buttonEl = document.getElementById(btn.id)
                    if(!buttonEl) return;

                    buttonEl.classList.add('disabled')

                    let isActiveCheckPrmise = btn.isActive(formData)
                    this.allPromises.push(isActiveCheckPrmise)

                    Promise.resolve(isActiveCheckPrmise)
                        .then(BtnIsActive => {
                            if(BtnIsActive) {
                                buttonEl.classList.remove('disabled')
                            } else {
                                buttonEl.classList.add('disabled')
                            }
                        })
                });
        })
    },

    updateCalculatedFields(triggerFieldName, formData) {
        return Promise.allSettled(this.fields.map(field => new Promise(done => {
            var shouldReload = (!triggerFieldName || (field.reloadOnChangeOf && field.reloadOnChangeOf.includes(triggerFieldName)))

            if(field.calculate && shouldReload) {
                return Promise.allSettled(this.allPromises).then(() => {
                    const thisUpdatePromise = field.calculate(formData || this.getValues())
                    this.allPromises.push(thisUpdatePromise)
                    return Promise.resolve(thisUpdatePromise).then(v => {
                        field.domElement._value = v
                        done()
                    })
                })
            } else {
                done()
            }
        })))
    },

    getHTML: function() {
        return this.dom.outerHTML;
    },

    openInModal: function(attr) {
        modalDialogs.push(this);

        this.modalEl = this.modalEl || this.createModalElement(attr)

        var modalContent = this.modalEl.querySelector('.modal-content')
        var modalWindow = this.modalEl.querySelector('.modal')

        this.updateTabs()
        modalContent.appendChild(this.dom)
        this.modalEl.style.display = 'block'

        if(attr && attr.classNames) {
            attr.classNames.forEach(function(name) {
                modalWindow.classList.add(name)
            })
        }

        this.updateTooltips();

        if(modalDialogs.length >= 2) {
            modalDialogs[modalDialogs.length-2].hide()
        }
    },

    appendInElement: function(el, attr) {
        var self = this
        this.modalEl = this.modalEl || this.createModalElement(attr, true)
        this.modalEl.style.display = 'block'

        var modalContent = this.modalEl.querySelector('.modal-content')

        this.modalEl.classList.add('noModalDialog')

        if(attr && attr.classNames) {
            attr.classNames.forEach(function(name) {
                self.modalEl.classList.add(name)
            })
        }

        modalContent.appendChild(this.dom)
        el.appendChild(this.modalEl)
        this.updateTabs()

        this.updateTooltips()
    },

    hide: function() {
        this.modalEl && this.modalEl.classList.add('dl-modal-hidden')
    },

    show: function() {
        this.modalEl && this.modalEl.classList.remove('dl-modal-hidden')
    },

    updateTooltips: function(sel) {
        sel = sel || '[data-tippy-content]';

        var domElements = document.querySelectorAll(sel);

        domElements.forEach(el => {
            if(tippyInstances.get(el)) {
                tippyInstances.get(el).forEach(el => el.destroy());
                tippyInstances.delete(el);
            }
        })

        var tippies = tippy(sel, {
            placement: 'right',
            allowHTML: true,
            interactive: true
        })

        tippies.forEach(tippy => {
            if(tippyInstances.get(tippy.reference)) {
                tippyInstances.get(tippy.reference).push(tippy)
            } else {
                tippyInstances.set(tippy.reference, [tippy]);
            }
        });
    },

    setTooltip: function(fieldName, text, iconContent, className) {
        className = className || '';
        var tooltipSelector = `#dl-form-field-wrapper-for-${fieldName} .dl-tooltip`;
        var tooltipEl = document.querySelector(tooltipSelector);

        if(tooltipEl.classList.value.includes('dl-tooltip-in-input')) {
            tooltipEl.classList.value = `dl-tooltip dl-tooltip-in-input ${className}`;
        } else {
            tooltipEl.classList.value = `dl-tooltip ${className}`;
        }

        tooltipEl.dataset['tippyContent'] = text;
        tooltipEl.innerHTML = iconContent;

        this.updateTooltips(tooltipSelector);
    },

    setTooltipSuccess: function(fieldName, text) {
        this.setTooltip(fieldName, text, '&#10003;', 'tooltip-success')
    },

    setTooltipWarning: function(fieldName, text) {
        this.setTooltip(fieldName, text, '!', 'tooltip-warning');
    },

    setTooltipError: function(fieldName, text) {
        this.setTooltip(fieldName, text, '!', 'tooltip-error');
    },

    resetTooltip: function(fieldName) {
        var tooltipEl = document.querySelector(`#dl-form-field-wrapper-for-${fieldName} .dl-tooltip`);

        if(tooltipEl) {
            this.setTooltip(fieldName, tooltipEl.dataset['initialTippyContent'], '?', '');
        }
    },

    resetTooltips: function(fieldNames) {
        fieldNames.forEach(fieldName => this.resetTooltip(fieldName))
    },

    updateTabs: function() {
        var tabsWrapper = this.modalEl.querySelector('.tabWrapper'),
            tabs = this.fields.filter(f => f.tab).map(f => f.tab).filter((value, index, self) => self.indexOf(value) === index),
            self = this, tmpTabEl

        tabsWrapper.innerHTML = ''

        tabs.forEach((tab) => {
            tmpTabEl = document.createElement('div')
            tmpTabEl.classList.add('dl-tab-btn')
            tmpTabEl.classList.add(tab.replace(/\s/g, ''))
            tmpTabEl.innerHTML = tab
            tmpTabEl.onclick = function() {
                self.setActiveTab(tab)
            }
            tabsWrapper.appendChild(tmpTabEl)
        })

        if(tabs[0]) {
            this.setActiveTab(tabs[0])
        }
    },

    setActiveTab: function(tab) {
        if(!tab) {
            tab = this.activeTab
        }

        var tabClassName = tab.replace(/\s/g, ''),
            currentActiveTabBtn = document.querySelector('.dl-tab-btn.active'),
            tabBtn = document.querySelector('.dl-tab-btn.' + tabClassName)

        if(currentActiveTabBtn) {
            currentActiveTabBtn.classList.remove('active')
        }

        tabBtn.classList.add('active')

        this.activeTab = tab;
        this.fields.forEach(field => {
            if(!field.domElement) { return }
            if(field.tab === tab) {
                field.domElement.parentElement.classList.remove('notInTab')
            } else {
                field.domElement.parentElement.classList.add('notInTab')
            }
        })
    },

    deleteFromStack: function() {
        modalDialogs = modalDialogs.filter(dia => dia !== this)
    },

    cancelModalIfCancelable: function() {
        if(this.onCancelCallback) {
            if(this.modalEl) {
                this.modalEl.remove()
                this.modalEl = null
            }

            this.onCancelCallback()
            this.deleteFromStack()

            if(modalDialogs.length) {
                modalDialogs[modalDialogs.length-1].show()
                modalDialogs[modalDialogs.length-1].setActiveTab()
            }
        }
    },

    closeModalIfOpen: function(callaback) {
        callaback = callaback || this.onChangeCallback

        if(this.modalEl) {
            this.modalEl.remove()
            this.modalEl = null
        }

        if(callaback) {
            callaback(this.getValues())
        }

        this.deleteFromStack()

        if(modalDialogs.length) {
            modalDialogs[modalDialogs.length-1].show()
            modalDialogs[modalDialogs.length-1].setActiveTab()
        }
    },

    getValues: function() {
        var result  = {}

        //TODO: filter calculated fields
        this.fields.filter(function(field) {
            return field.domElement && !field.domElement.parentElement.classList.contains('inactive')
        }).forEach(function(field) {
            if(!field.domElement) { return }
            result[field.name] = field.domElement.getAttribute('value') || field.domElement._value || field.domElement.value

            if(field.domElement.acceptedSuggestions) {
                result[field.name] = result[field.name] || [];
                field.domElement.acceptedSuggestions
                    .map(el => el[0])
                    .forEach(candidate => {
                        if(!result[field.name].find(processed => JSON.stringify(candidate) === JSON.stringify(processed))) {
                            result[field.name].push(candidate)
                        }
                    })
            }

            if(!result[field.name]) {
                result[field.name] = ''
            }

            if(field.check) {
                result[field.name] = result[field.name] === 'true'
            }
        })

        result.activeTab = this.activeTab;
        return result
    },

    createModalElement: function(attr, doNotMount) {

        attr = attr || {}
        attr.classNames = attr.classNames || []

        var modalWrapper = document.createElement('div'),
            modal = document.createElement('div'),
            modalContent = document.createElement('div'),
            lowBar = document.createElement('div'),
            upBar  = document.createElement('div'),
            cancelBtn = document.createElement('div'),
            tabWrapper = document.createElement('div'),
            tmpBtn

        modalWrapper.classList.add('dl-modal')
        modalWrapper.style.display = 'none'
        modal.classList.add('modal')
        modalContent.classList.add('modal-content')
        tabWrapper.classList.add('tabWrapper')
        lowBar.classList.add('low-bar')

        Object.keys(this.buttons).forEach((btn => {
            let callback = typeof this.buttons[btn] === 'function' ? this.buttons[btn] : this.buttons[btn].action
            tmpBtn = document.createElement('div')
            tmpBtn.classList.add('btn')
            tmpBtn.innerHTML = btn

            if(this.buttons[btn].id) {
                tmpBtn.id = this.buttons[btn].id
            }

            tmpBtn.onclick = (event) => {
                const classes = event.target.classList

                if(classes.contains('loading-btn') || classes.contains('disabled')) {
                    return
                }

                Promise.allSettled(this.allPromises).then(() => {
                    if(!classes.contains('disabled')) {
                        this.updateCalculatedFields().then(() => {
                            this.closeModalIfOpen(callback)
                            classes.remove('loading-btn')
                        })
                    }
                })
            }

            lowBar.appendChild(tmpBtn)
        }))

        if(this.onCancelCallback) {
            upBar.classList.add('up-bar')
            cancelBtn.classList.add('cancelBtn')
            cancelBtn.onclick = () => { this.cancelModalIfCancelable() }
            upBar.appendChild(cancelBtn)
        }

        modalWrapper.appendChild(modal)
        modal.appendChild(upBar)
        modal.appendChild(tabWrapper)
        modal.appendChild(modalContent)
        modal.appendChild(lowBar)

        if(!doNotMount) {
            document.body.appendChild(modalWrapper)
        }

        return modalWrapper
    }
}

module.exports = DeclarativForm


/***/ }),

/***/ "../structured-text-editor/lib/declarativ_forms/src/dl_select.js":
/*!***********************************************************************!*\
  !*** ../structured-text-editor/lib/declarativ_forms/src/dl_select.js ***!
  \***********************************************************************/
/***/ (() => {

var style = document.createElement('style'),
    xmlns = 'http://www.w3.org/2000/svg'

style.textContent = `
    @keyframes placeHolderShimmer{
        0%{
            background-position: -468px 0
        }
        100%{
            background-position: 468px 0
        }
    }

    dl-select {
        position: relative;
        font-weight: 300;
        font-family: 'Rubik', sans-serif;
    }

    dl-select .input-wrapper {
        display: inline-block;
        border: 2px solid #ddd;
        border-radius: 4px;
    }

    dl-select.dl-focused .input-wrapper {
        border: 2px solid #bbb;
    }

    dl-select.dl-focused .input-wrapper svg {
        border-left: 1px solid #bbb;
        fill: #bbb;
    }

    dl-select .options-wrapper {
        position: absolute;
        left: 0px;
        top: 20px;
        font-size: 0.9em;
        background-color: #fff;
        width: 100%;
        max-height: 230px;
        overflow: scroll;
        box-shadow: 0px 0px 10px -2px rgba(0,0,0,0.4);
        z-index: 100;
    }

    dl-select .options-wrapper dl-option {
        border-left: 1px solid #bbb;
        border-right: 1px solid #bbb;
        cursor: pointer;
    }

    dl-select .options-wrapper .noMatchesHint {
        border-left: 1px solid #bbb;
        border-right: 1px solid #bbb;
        padding: 5px;
        font-style: italic;
    }

    dl-select .options-wrapper {
        border-top: 1px solid #bbb;
        border-bottom: 1px solid #bbb;
        border-radius: 4px;
    }

    dl-select .input-wrapper input {
        width: 371px;
        outline-width: 0;
        margin-top: 2px;
        padding: 6px;
        font-size: 0.9em;
        font-family: 'Rubik', sans-serif;
        font-weight: 300;
        border: 0px;
        border-radius: 4px;
        float: left;
        cursor: pointer;
        box-sizing: content-box;
    }

    dl-select .input-wrapper svg {
        width: 20px;
        height: 20px;
        margin-top: 5px;
        margin-right: 4px;
        padding-left: 4px;
        fill: #ddd;
        float: right;
        border-left: 1px solid #ddd;
        cursor: pointer;
    }

    dl-select .options-wrapper dl-option {
        display: block;
        padding: 5px;
        color: #545454;
    }

    dl-select .options-wrapper dl-option:hover {
        background-color: rgba(224, 240, 227, 0.4);
    }

    dl-select .options-wrapper dl-option.dl-focused {
        background-color: rgba(224, 240, 227, 0.4);
    }

    dl-select .dl-option-tag {
        float: right;
        border: 1px solid #888;
        font-size: 0.8em;
        padding: 2px;
        font-family: 'Source Code Pro', monospace;
        border-radius: 2px;
        margin-top: -1px;
    }

    dl-select .dl-option-tag:last-child {
       margin-right: 10px;
    }

    .dl-select-loading {

    }

    .dl-select-no-options-available svg path {
        display: none;
    }

    .dl-select-no-options-available svg {
        border-left: none !important;
    }

    .dl-select-loading svg, .dl-select-no-options-available svg {
        pointer-events: none;
    }

    .dl-select-loading input, .dl-select-no-options-available input {
        pointer-events: none;
    }

    body.dark-theme dl-select {
        --dl-select-loading-col1: #282727;
        --dl-select-loading-col2: #505656;
    }

    dl-select {
        --dl-select-loading-col1: #eeeeee;
        --dl-select-loading-col2: #dddddd;
    }

    .dl-select-loading .input-wrapper {
        animation-duration: 1.25s;
        animation-fill-mode: forwards;
        animation-iteration-count: infinite;
        animation-name: placeHolderShimmer;
        animation-timing-function: linear;
        background: darkgray;
        background: linear-gradient(to right, var(--dl-select-loading-col1) 10%, var(--dl-select-loading-col2) 18%, var(--dl-select-loading-col1) 33%);
        background-size: 800px 104px;
        position: relative;
        width: 412px;
        height: 31px;
    }
    .dl-select-loading input {
        display: none;
    }
`

window.addEventListener('load', () => {
    document.body.appendChild(style)
})

class DlSelect extends HTMLElement {
    constructor() {
        super()
        this.loadingScreenTimeouts = []
        this.loadingStartedAt = undefined
        this.optionsWrapper = document.createElement('div')
        this.inputWrapper = document.createElement('span')
        this.noMatchesHint = document.createElement('span')
        this.inputField = document.createElement('input')
        this.arrow = document.createElementNS(xmlns, 'svg')
    }

    connectedCallback() {
        var self = this

        if(this.isInitialized) { return }

        this.inputWrapper.classList.add('input-wrapper')
        this.optionsWrapper.classList.add('options-wrapper')
        this.optionsWrapper.style.display = 'none'
        this.inputField.placeholder = 'Select ...'
        this.noMatchesHint.classList.add('noMatchesHint')
        this.noMatchesHint.innerHTML = 'No Matches'
        this.noMatchesHint.style.display = 'none'
        this.inputField.onfocus = () => { self.focus() }
        this.inputField.onblur = (e) => { self.unfocus() }
        this.inputField.oninput = () => { self.filterOptions(this.inputField.value) }
        this.arrow.onclick = () => { self.inputField.focus() }
        this.arrow.innerHTML = '<path d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"></path>'

        this.optionsWrapper.appendChild(this.noMatchesHint)

        this.classList.add('dl-select-no-options-available')

        if (document.readyState !== 'loading') {
            this.loadOptions()
        } else {
            window.addEventListener('load', () => {self.loadOptions()})
        }

        this.addEventListener("keydown", (e) => {
            var option = self.focusedOption()
            if(e.key === 'ArrowDown') {
                self.focusOption(self.nextVisibleOptionAfter(option))
                e.preventDefault()
                e.stopPropagation()
            } else if(e.key === 'ArrowUp') {
                self.focusOption(self.previousVisibleOptionAfter(option))
                e.preventDefault()
                e.stopPropagation()
            } else if(e.key === 'Enter') {
                self.setOption(option)
                self.unfocus()
                e.preventDefault()
                e.stopPropagation()
            }
        })

        this.isInitialized = true;
    }

    setLoadingStatus() {
        this.loadingScreenTimeouts.push(setTimeout(() => {
            this.classList.add('dl-select-loading')
            this.optionsWrapper.remove()
            this.loadingStartedAt = Date.now()
        }, 100))
    }

    unsetLoadingStatus() {
        this.loadingScreenTimeouts.forEach(clearTimeout)
        this.loadingScreenTimeouts = []

        const minLoadTimeInSeconds = 1.5
        const delay = this.loadingStartedAt ?
            (minLoadTimeInSeconds * 1000) - (Date.now() - this.loadingStartedAt)
            : 0

        setTimeout(() => {
            this.appendChild(this.optionsWrapper)
            this.classList.remove('dl-select-loading')
        }, delay)
    }

    loadOptions() {
        var self = this
        while(self.firstElementChild) {
            self.firstElementChild.onmousedown = function() { self.setOption(this) }
            self.firstElementChild.onmouseover = function() { self.clearFocusedOption() }
            self.optionsWrapper.appendChild(self.firstElementChild)
        }

        self.inputWrapper.appendChild(self.inputField)
        self.inputWrapper.appendChild(self.arrow)
        self.appendChild(self.inputWrapper)
        self.appendChild(self.optionsWrapper)
        self.setValue(self.getValue())
        this.updatePlaceholderText()
    }

    removeAllOptions() {
        this.classList.add('dl-select-no-options-available')
        this.querySelectorAll('dl-option').forEach(opt => opt.remove())
        this.updatePlaceholderText()
    }

    addOption(optionEl) {
        var self = this

        optionEl.onmousedown = function() { self.setOption(this) }
        optionEl.onmouseover = function() { self.clearFocusedOption() }
        self.optionsWrapper.appendChild(optionEl)

        this.classList.remove('dl-select-no-options-available')
        this.updatePlaceholderText()
    }

    clearFocusedOption() {
        this._focusedOption = null
        Array.prototype.forEach.call(this.optionsWrapper.children, (opt) => {
            opt.classList.remove('dl-focused')
        })
    }

    focusedOption() {
        return this._focusedOption
    }

    focusOption(option) {
        option = option || this.nextVisibleOptionAfter(option)

        this.clearFocusedOption()

        this._focusedOption = option
        if(option) {
            option.classList.add('dl-focused')
        }
    }

    nextVisibleOptionAfter(option) {
        option = option || this.optionsWrapper.children[0]
        while(option) {
            if(option.nextSibling && option.nextSibling.style.display !== 'none') {
                return option.nextSibling
            }

            option = option.nextSibling
        }
    }

    previousVisibleOptionAfter(option) {
        option = option || this.optionsWrapper.children[0]
        while(option) {
            if(option.previousSibling && option.previousSibling.style.display !== 'none') {
                return option.previousSibling
            }

            option = option.previousSibling
        }
    }

    filterOptions(str) {
        var hasMatched = false;
        str = str.toLowerCase()

        Array.prototype.forEach.call(this.optionsWrapper.children, (opt) => {
            if(str === '' || str.split(' ').every(term => opt.innerText.toLowerCase().includes(term))) {
                opt.style.display = 'block'
                hasMatched = true
            } else {
                opt.style.display = 'none'
            }
        })

        this.noMatchesHint.style.display = hasMatched ? 'none' : 'block'
    }

    setValue(val) {
        if(!val) {
            return
        }

        var option = this.querySelector('dl-option[value="'+val+'"]') ||
                     Array.prototype.find.call(this.querySelectorAll('dl-option'), function(el) {return el.innerText == val})

        this.setAttribute('tmp-value', val)
        this.setOption(option)
    }

    setOption(optionEl) {
        if(!optionEl) { return false }

        this.selectedOptionEl = optionEl
        this.inputField.value = this.getDisplayedText()
        this.setAttribute('value', optionEl.getAttribute('value') || optionEl.innerText)

        var evt = document.createEvent("HTMLEvents")
        evt.initEvent("change", false, true)
        this.dispatchEvent(evt)
    }

    getDisplayedText() {
        if(this.selectedOptionEl) {
            return this.selectedOptionEl.getAttribute('displayWhenSelected') || this.selectedOptionEl.innerText
        } else {
            return ''
        }
    }

    getPlaceholderText() {
        if (this.optionsWrapper.querySelectorAll('dl-option').length === 0) {
            return 'No Options Available'
        } else if(this.selectedOptionEl) {
            return this.selectedOptionEl.innerText
        } else {
            return 'Select ...'
        }
    }

    updatePlaceholderText() {
        this.inputField.placeholder = this.getPlaceholderText()
    }

    getValue() {
        if(this.getAttribute('value')) {
            return this.getAttribute('value')
        }

        var tmpValue = this.getAttribute('tmp-value')
        var option = this.querySelector('dl-option[value="'+this.getAttribute('tmp-value')+'"]')

        if(option && tmpValue) {
            return tmpValue
        }
    }

    focus() {
        this.classList.add('dl-focused')
        this.updatePlaceholderText()
        this.inputField.value = ''
        this.optionsWrapper.style.display = 'inline-block'
        this.filterOptions(this.inputField.value)
    }

    unfocus() {
        this.classList.remove('dl-focused')
        this.optionsWrapper.style.display = 'none'
        this.inputField.value = this.getDisplayedText()
        this.inputField.blur()
    }
}

customElements.define('dl-select', DlSelect)


/***/ }),

/***/ "../structured-text-editor/lib/documentupdater/documentupdater.js":
/*!************************************************************************!*\
  !*** ../structured-text-editor/lib/documentupdater/documentupdater.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ModificationLogEntry = __webpack_require__(/*! ./modification_log */ "../structured-text-editor/lib/documentupdater/modification_log.js"),
    utils = __webpack_require__(/*! ../pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js"),
    diffMatchPatch = __webpack_require__(/*! diff_match_patch */ "../structured-text-editor/node_modules/diff_match_patch/lib/diff_match_patch.js"),
    diffEngine = new diffMatchPatch.diff_match_patch,
    withLookahead = __webpack_require__(/*! ../generatorlookahead */ "../structured-text-editor/lib/generatorlookahead/index.js");

// This creates a vitual DOM for the passed `contentElement`
// Using the updateHTML function of this object provides the following advantages:
// - Passed HTML is sanitized based on the content rules of the `htmlRazor`.
// - It returns a modificationLogEntry which includes the changes made.
// - Only updates the dom fractions that must be changed (optimized
//   for long and quite flat documents)
function Documentupdater(contentElement, htmlRazor) {
    this.contentElement = contentElement;
    this.htmlRazor = htmlRazor;
}

Documentupdater.prototype = {
    updateHTML: function(content, focusedSection, args) {
        args = args || {};

        if(this.contentElement.children.length === 0) {
            this.contentElement.innerHTML = '<p></p>';
        }

        if(args.actor) {
            this.contentElement
                .querySelectorAll('.focused-by-api-actor' + args.actor.id + '-fbaaend')
                .forEach(el => el.classList.remove('focused-by-api-actor'+ args.actor.id + '-fbaaend'))
        }

        this.modificationLogEntry = args.modificationLogEntry || new ModificationLogEntry();
        this.modificationLogEntry.insertedBeforeSelectionRangeStart = 0;
        this.modificationLogEntry.insertedBeforeSelectionRangeEnd = 0;

        var firstSectionToUpdate = args.section || args.startSection || this.contentElement.children[0],
            lastSectionToUpdate =  args.section || args.endSection || this.contentElement.children[this.contentElement.children.length-1],
            newSectionStream,
            pairStream,
            lastUpdatedSection,
            pair;

        if(args.startSection &&
           args.endSection &&
        //    this.contentElement.children[0] !== args.startSection &&
        //    this.contentElement.children[this.contentElement.children.length-1] !== args.endSection &&
           content !== undefined &&
           content !== null &&
           content.trim() === '') {
            pairStream = this._deleteOldSectionsPairStream(firstSectionToUpdate, lastSectionToUpdate);
        } else {
            newSectionStream = this.htmlRazor.cleanupHTMLAndAttachEventHandlers(content, this.modificationLogEntry);
            pairStream = this._oldAndNewSectionPairStream(newSectionStream, firstSectionToUpdate, lastSectionToUpdate);
        }

        this.focusedSection = focusedSection;
        this.modificationLogEntry.retainAllSectionsBefore(firstSectionToUpdate);

        while(pair = pairStream.next().value) {
            if(pair.old && pair.new) {
                lastUpdatedSection = this._replaceSections(pair.old, pair.new, args);
            } else if(pair.new) {
                if(lastUpdatedSection) {
                    lastUpdatedSection = this._insertSectionAfter(lastUpdatedSection, pair.new, args);
                } else if(firstSectionToUpdate) {
                    lastUpdatedSection = this._insertSectionBefore(firstSectionToUpdate, pair.new, args);
                } else {
                    lastUpdatedSection = this._insertSectionAtBeginning(pair.new, args);
                }

            } else if(pair.old) {
                this._removeSection(pair.old);
            }

            if(lastUpdatedSection) {
                if(!lastUpdatedSection.wordCount) {
                    lastUpdatedSection.wordCount = lastUpdatedSection
                        .innerText
                        .split(/[\s\.:\?\!']/)
                        .filter(w => w.trim().length > 0)
                        .length;
                }
            }
        }

        this.modificationLogEntry.retainAllSectionsAfter(lastUpdatedSection);

        return this.modificationLogEntry;
    },

    _deleteOldSectionsPairStream: function*(firstSectionToUpdate, lastSectionToUpdate) {
        var nextOldSection = firstSectionToUpdate,
            nextNextOldSection;

        if(firstSectionToUpdate === lastSectionToUpdate) {
            yield { old: firstSectionToUpdate, new: null };
        } else {
            while(nextOldSection) {
                nextNextOldSection = nextOldSection.nextSibling;

                yield { old: nextOldSection, new: null };
                nextOldSection = nextNextOldSection;

                if(nextOldSection === lastSectionToUpdate) {
                    yield { old: nextOldSection, new: null };
                    break;
                }
            }
        }
    },

    _oldAndNewSectionPairStream: function*(newSectionStream, firstSectionToUpdate, lastSectionToUpdate) {
        newSectionStream = withLookahead(newSectionStream)

        var nextOldSection = firstSectionToUpdate,
            nextNextOldSection, nextSectionToBeInserted,
            newSection, nextNewSection;

        while(nextOldSection) {
            nextNextOldSection = nextOldSection.nextSibling;
            newSection = newSectionStream.next().value;
            nextNewSection = newSectionStream.lookahead().value;

            if(!this._areEqualSections(nextOldSection, newSection) &&
               !this._areEqualSections(nextNextOldSection, nextOldSection) &&
               this._areEqualSections(nextOldSection, nextNewSection)
            ) {
                yield { old: undefined, new: newSection };
            } else {
                yield { old: nextOldSection, new: newSection };
                if(nextOldSection === lastSectionToUpdate) { break }
                nextOldSection = nextNextOldSection;
            }
        }

        while(nextSectionToBeInserted = newSectionStream.next().value) {
            yield { old: null, new: nextSectionToBeInserted };
        }
    },

    _removeSection: function(section) {
        if(!section) return false;

        if(section === this.focusedSection) {
            this.modificationLogEntry.focusedSectionHasBeenModified = true;
        }

        this.modificationLogEntry.deleteSection(section);
        return this.contentElement.removeChild(section);
    },

    _insertSectionAtBeginning: function(sectionToInsert, args) {
        if(!sectionToInsert) { return false }

        sectionToInsert.setAttribute('contenteditable', true);

        if(sectionToInsert.onMarkupCleaningFinshed) {
            sectionToInsert.onMarkupCleaningFinshed(sectionToInsert);
        }

        if(args.actor) {
            sectionToInsert.classList.add('focused-by-api-actor' + args.actor.id + '-fbaaend');
        }

        this.modificationLogEntry.insertSection(sectionToInsert);

        if(this.contentElement.children[0]) {
            return this.contentElement.insertBefore(sectionToInsert, this.contentElement.children[0]);
        } else {
            return this.contentElement.appendChild(sectionToInsert);
        }
    },

    _insertSectionAfter: function(predecessorSection, sectionToInsert, args) {
        if(!predecessorSection || !sectionToInsert) { return false }
        sectionToInsert.setAttribute('contenteditable', true);

        if(sectionToInsert.onMarkupCleaningFinshed) {
            sectionToInsert.onMarkupCleaningFinshed(sectionToInsert);
        }

        if(args.actor) {
            sectionToInsert.classList.add('focused-by-api-actor'+ args.actor.id + '-fbaaend');
        }

        this.modificationLogEntry.insertSection(sectionToInsert);
        return this.contentElement.insertBefore(sectionToInsert, predecessorSection.nextSibling);   // if predecessorSection.nextSibling is null, the newNode is inserted at the end of the list of child nodes.
    },

    _insertSectionBefore: function(predecessorSection, sectionToInsert, args) {
        if(!predecessorSection || !sectionToInsert) { return false }
        sectionToInsert.setAttribute('contenteditable', true);

        if(sectionToInsert.onMarkupCleaningFinshed) {
            sectionToInsert.onMarkupCleaningFinshed(sectionToInsert);
        }

        if(args.actor) {
            sectionToInsert.classList.add('focused-by-api-actor'+ args.actor.id + '-fbaaend');
        }

        this.modificationLogEntry.insertSection(sectionToInsert);
        return this.contentElement.insertBefore(sectionToInsert, predecessorSection);   // if predecessorSection.nextSibling is null, the newNode is inserted at the end of the list of child nodes.
    },

    _isSameSectionType: function(section1, section2) {
        if(!section1 || !section2) {
            return false;
        }

        var sameClasses = section1.classList.toString().replace(/focused-by-api-actor.*-fbaaend/g, '').replace(/focused/g, '').replace(/\s/g, '') === section2.classList.toString().replace(/focused-by-api-actor.*-fbaaend/g, '').replace(/focused/g, '').replace(/\s/g, ''),
          sameTags = section1.tagName === section2.tagName;

        return sameTags && sameClasses;
    },

    _getSectionAttributeSigniture: function(section) {
        return JSON.stringify(Object.values(section.attributes)
            .filter(attr => attr.name !== 'class' && attr.name !== 'contenteditable')
            .map(attr => ({ [attr.name]: attr.value })))
    },

    _areEqualSections: function(section1, section2) {
        return this._isSameSectionType(section1, section2) &&
            section1.innerHTML.length === section2.innerHTML.length &&
            this._getSectionAttributeSigniture(section1) === this._getSectionAttributeSigniture(section2) &&
            section1.innerHTML === section2.innerHTML
    },

    _replaceSections: function(oldSection, newSection, args) {
        newSection.setAttribute('contenteditable', true);

        oldSection.summarizedContentLength = undefined;
        newSection.summarizedContentLength = undefined;

        if(this._isSameSectionType(oldSection, newSection)) {
            utils.copyEventListenersRecursively(oldSection, newSection);
        }

        if(newSection.onMarkupCleaningFinshed) {
            newSection.onMarkupCleaningFinshed(newSection);
        }

        if(!this._areEqualSections(newSection, oldSection) || (newSection && newSection.childNodes.length === 0)) {
            this.modificationLogEntry.replaceSection(oldSection, newSection);

            if(args.actor) {
                newSection.classList.add('focused-by-api-actor'+ args.actor.id + '-fbaaend');

                const contentLengthTillSectionStart = args.caret.getContentLengthTillSection(oldSection);
                const diff = diffEngine
                    .diff_main(args.caret._getContentLengthIncrementMaskedText(oldSection), args.caret._getContentLengthIncrementMaskedText(newSection))
                    .flatMap(a => a[1].split('').map(ia => a[0]));

                if(args.caret.rangeStart) {
                    const selectionStartOffsetWithinSection = args.caret.rangeStart - contentLengthTillSectionStart;
                    this.modificationLogEntry.insertedBeforeSelectionRangeStart += diff
                        .slice(0, selectionStartOffsetWithinSection)
                        .reduce((acc, val) => acc + val, 0);
                }

                if(args.caret.rangeEnd && args.caret.rangeEnd !== args.caret.rangeStart) {
                    const selectionStartOffsetWithinSection = args.caret.rangeEnd - contentLengthTillSectionStart;
                    this.modificationLogEntry.insertedBeforeSelectionRangeEnd += diff
                        .slice(0, selectionStartOffsetWithinSection)
                        .reduce((acc, val) => acc + val, 0);
                } else if(args.caret.rangeEnd === args.caret.rangeStart) {
                    this.modificationLogEntry.insertedBeforeSelectionRangeEnd = this.modificationLogEntry.insertedBeforeSelectionRangeStart;
                }
            }

            this.contentElement.replaceChild(newSection, oldSection);

            if(oldSection === this.focusedSection) {
                this.modificationLogEntry.focusedSectionHasBeenModified = true;
                this.modificationLogEntry.focusedSectionReplacement = newSection;
            }

            return newSection;
        } else if(oldSection.originalHTML !== newSection.originalHTML) {
            // we end up in this branch when we simply type text into a section.
            // in this case the actual DOM is already on the actual state, only
            // the originalHTML attribute must be updated.
            this.modificationLogEntry.replaceSection(oldSection, newSection);

            oldSection.originalHTML = newSection.originalHTML;

            Object.keys(this.modificationLogEntry.modLogFlags).forEach(function(flag) {
                oldSection['originalHTMLContains' + flag] = newSection['originalHTMLContains' + flag];
            });

            if(oldSection === this.focusedSection) {
                this.modificationLogEntry.focusedSectionHasBeenModified = true;
                this.modificationLogEntry.focusedSectionDOMWasNotModified = true;
                this.modificationLogEntry.focusedSectionReplacement = newSection;
            }

            oldSection.wordCount = undefined;
            return oldSection;
        }

        this.modificationLogEntry.retainSection(oldSection);
        return oldSection;
    }
}

module.exports = Documentupdater;


/***/ }),

/***/ "../structured-text-editor/lib/documentupdater/modification_log.js":
/*!*************************************************************************!*\
  !*** ../structured-text-editor/lib/documentupdater/modification_log.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var diffMatchPatch = __webpack_require__(/*! diff_match_patch */ "../structured-text-editor/node_modules/diff_match_patch/lib/diff_match_patch.js"),
    diffEngine = new diffMatchPatch.diff_match_patch;

var DIFF_DELETE = -1;
var DIFF_INSERT = 1;
var DIFF_EQUAL = 0;

function ModificationLogEntry() {
    this.log = [];
}

ModificationLogEntry.prototype = {

    setFlagsFor: function(section) {
        var self = this,
            modLogFlags = this.modLogFlags;

        if(!modLogFlags) { return; }

        Object.keys(modLogFlags).forEach(function(flag) {
            if(self['mightInclude' + flag + 'Updates']) {
                return;
            }

            if(section['originalHTMLContains' + flag]) {
                self['mightInclude' + flag + 'Updates'] = true;
                return;
            }

            self['mightInclude' + flag + 'Updates'] = modLogFlags[flag].some(function(selector) {
                return section.matches(selector) || section.querySelector(selector)
            });
        });
    },

    toChangeset: function(Changeset) {
        var cs = Changeset.create();
        var wasLastOpTypeRetain = false, lastOptTypeLength = 0;

        this.log.forEach(function(entry) {
            if(entry.type === 'retain') {
                wasLastOpTypeRetain = true;
                lastOptTypeLength += entry.sectionHTML.length;
            } else if (wasLastOpTypeRetain) {
                cs.retain(lastOptTypeLength);
                wasLastOpTypeRetain = false;
                lastOptTypeLength = 0;
            }

            if (entry.type === 'delete') {
                cs.delete(entry.sectionHTML);
            } else if (entry.type === 'insert') {
                cs.insert(entry.sectionHTML);
            } else if (entry.type === 'replace') {
                var diff = diffEngine.diff_main(entry.oldSectionHTML, entry.newSectionHTML);

                diff.forEach(function(d) {
                    if (DIFF_DELETE == d[0]) {
                        cs.delete(d[1])
                    }

                    if (DIFF_INSERT == d[0]) {
                        cs.insert(d[1]);
                    }

                    if(DIFF_EQUAL == d[0]) {
                      cs.retain(d[1].length);
                    }
                });
            }
        });

        if (wasLastOpTypeRetain) {
            cs.retain(lastOptTypeLength);
        }

        return cs.end();
    },

    afterState: function() {
        var result = '';
        this.log.forEach(function(log) {
            if(log.type === 'retain' || log.type === 'insert') {
                result += log.sectionHTML;
            } else if(log.type === 'replace') {
                result += log.newSectionHTML;
            }
        });

        return result;
    },

    beforeState: function() {
        var result = '';
        this.log.forEach(function(log) {
            if(log.type === 'retain' || log.type === 'delete') {
                result += log.sectionHTML;
            } else if(log.type === 'replace') {
                result += log.oldSectionHTML;
            }
        });

        return result;
    },

    retainSection: function(section) {
        this.log.push({type: 'retain', sectionHTML: section.originalHTML});
    },

    deleteSection: function(section) {
        this.log.push({type: 'delete', sectionHTML: section.originalHTML});
        this.setFlagsFor(section);
    },

    replaceSection: function(oldSec, newSec) {
        this.log.push({type: 'replace', oldSectionHTML: oldSec.originalHTML, newSectionHTML: newSec.originalHTML});
        this.setFlagsFor(newSec);
        this.setFlagsFor(oldSec);
    },

    insertSection: function(section) {
        this.log.push({type: 'insert', sectionHTML: section.originalHTML})
        this.setFlagsFor(section);
    },

    deleteSectionAt: function(index, section) {
        var oldLog;

        if(this.log[index] && this.log[index].type !== 'insert') {
            oldLog = this.log[index];
            this.log[index] = { type: 'delete', sectionHTML: this.log[index].oldSectionHTML || this.log[index].sectionHTML };
        } else if(this.log[index] && this.log[index].type === 'insert') {
            oldLog = this.log.splice(index, 1)[0]; //remove array element with index "index"
        }

        this.setFlagsFor(section);

        return oldLog;
    },

    retainAllSectionsBefore: function(section) {
        if(!section) return;
        var tmpSec = section.parentElement.children[0];
        while(tmpSec !== section) {
            this.retainSection(tmpSec);
            tmpSec = tmpSec.nextSibling;
        }
    },

    retainAllSectionsAfter: function(section) {
        if(!section) return;
        var tmpSec = section.nextSibling;
        while(tmpSec) {
            this.retainSection(tmpSec);
            tmpSec = tmpSec.nextSibling;
        }
    },

    includesHeadingUpdate: function() {
        return !!this.includesHeadingUpdates;
    }
};

module.exports = ModificationLogEntry;


/***/ }),

/***/ "../structured-text-editor/lib/generatorlookahead/index.js":
/*!*****************************************************************!*\
  !*** ../structured-text-editor/lib/generatorlookahead/index.js ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = function (stream) {
    var nextValue = stream.next();

    return {
        next: function() {
            const thisRound = nextValue;
            nextValue = stream.next();
            return thisRound;
        },
        lookahead: function() {
            return nextValue
        }
    };
}

/***/ }),

/***/ "../structured-text-editor/lib/html_razor/html_razor.js":
/*!**************************************************************!*\
  !*** ../structured-text-editor/lib/html_razor/html_razor.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var StateMachine = __webpack_require__(/*! ./state_machine.js */ "../structured-text-editor/lib/html_razor/state_machine.js");
var utils = __webpack_require__(/*! ../pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js");
var namedEncodings = {quot: 34, amp: 38, lt: 60, gt: 62, nbsp: 160, copy: 169, reg: 174, deg: 176, frasl: 47, trade: 8482, euro: 8364, Agrave: 192, Aacute: 193, Acirc: 194, Atilde: 195, Auml: 196, Aring: 197, AElig: 198, Ccedil: 199, Egrave: 200, Eacute: 201, Ecirc: 202, Euml: 203, Igrave: 204, Iacute: 205, Icirc: 206, Iuml: 207, ETH: 208, Ntilde: 209, Ograve: 210, Oacute: 211, Ocirc: 212, Otilde: 213, Ouml: 214, times: 215, Oslash: 216, Ugrave: 217, Uacute: 218, Ucirc: 219, Uuml: 220, Yacute: 221, THORN: 222, szlig: 223, agrave: 224, aacute: 225, acirc: 226, atilde: 227, auml: 228, aring: 229, aelig: 230, ccedil: 231, egrave: 232, eacute: 233, ecirc: 234, euml: 235, igrave: 236, iacute: 237, icirc: 238, iuml: 239, eth: 240, ntilde: 241, ograve: 242, oacute: 243, ocirc: 244, otilde: 245, ouml: 246, divide: 247, oslash: 248, ugrave: 249, uacute: 250, ucirc: 251, uuml: 252, yacute: 253, thorn: 254, yuml: 255, lsquo: 8216, rsquo: 8217, sbquo: 8218, ldquo: 8220, rdquo: 8221, bdquo: 8222, dagger: 8224, Dagger: 8225, permil: 8240, lsaquo: 8249, rsaquo: 8250, spades: 9824, clubs: 9827, hearts: 9829, diams: 9830, oline: 8254, larr: 8592, uarr: 8593, rarr: 8594, darr: 8595, hellip: 133, ndash: 150, mdash: 151, iexcl: 161, cent: 162, pound: 163, curren: 164, yen: 165, brvbar: 166, brkbar: 166, sect: 167, uml: 168, die: 168, ordf: 170, laquo: 171, not: 172, shy: 173, macr: 175, hibar: 175, plusmn: 177, sup2: 178, sup3: 179, acute: 180, micro: 181, para: 182, middot: 183, cedil: 184, sup1: 185, ordm: 186, raquo: 187, frac14: 188, frac12: 189, frac34: 190, iquest: 191, Alpha: 913, alpha: 945, Beta: 914, beta: 946, Gamma: 915, gamma: 947, Delta: 916, delta: 948, Epsilon: 917, epsilon: 949, Zeta: 918, zeta: 950, Eta: 919, eta: 951, Theta: 920, theta: 952, Iota: 921, iota: 953, Kappa: 922, kappa: 954, Lambda: 923, lambda: 955, Mu: 924, mu: 956, Nu: 925, nu: 957, Xi: 926, xi: 958, Omicron: 927, omicron: 959, Pi: 928, pi: 960, Rho: 929, rho: 961, Sigma: 931, sigma: 963, Tau: 932, tau: 964, Upsilon: 933, upsilon: 965, Phi: 934, phi: 966, Chi: 935, chi: 967, Psi: 936, psi: 968, Omega: 937, omega: 969};

function HTMLRazor(tagTransformations, rules) {
    this.tagTransformations = tagTransformations  || {};
    this.rules = rules;
    this.ruleNameByElementCache = {};
    this.ruleNameByTokenCache = {};
    this.tagTransformationByNodeCache = {};
    this.stateMachine = new StateMachine();
    this.temproaryPruneProtectedWhitespace = '\u2588';
}

HTMLRazor.prototype = {

    getRuleNamesByTag: function(tagName) {
        this.ruleEntries = this.ruleEntries || Object.entries(this.rules);

        return this.ruleEntries.filter(function(rule) {
            return rule[1].tagName === tagName.toLowerCase();
        }).map(function(rule) {
            return rule[0];
        });
    },

    doesElementMatchRule: function(element, rule) {
        if(!element || !rule) return false;
        if(rule.tagName !== element.nodeName.toLowerCase()) return false;
        if(rule.className && !element.classList.contains(rule.className)) return false;

        return true;
    },

    doesElementMatchOneRule: function(element, ruleNames) {
        for(let i=0; i<ruleNames.length; i++) {
            if(this.doesElementMatchRule(element, this.rules[ruleNames[i]])) {
                return true;
            }
        }
        return false;
    },

    lookupRuleNameCacheFor: function(t) {
        if(t.nodeName && this.ruleNameByElementCache[t.nodeName] && this.ruleNameByElementCache[t.nodeName][t.className]) {
            return this.ruleNameByElementCache[t.nodeName][t.className];
        } else if(this.ruleNameByTokenCache[t.value] && this.ruleNameByTokenCache[t.value]){
            return this.ruleNameByTokenCache[t.value][t.classNames];
        }
    },

    cacheRuleNameFor: function(t, result) {

        if(!result) {
          result = -1;
        }

        if(t.nodeName) {
            if(!this.ruleNameByElementCache[t.nodeName]) {
                this.ruleNameByElementCache[t.nodeName] = {}
            }

            this.ruleNameByElementCache[t.nodeName][t.className] = result;
        } else {
            if(!this.ruleNameByTokenCache[t.value]) {
                this.ruleNameByTokenCache[t.value] = {}
            }

            this.ruleNameByTokenCache[t.value][t.classNames] = result;
        }
    },

    getRuleNameByElement: function(t) {
        var rules = this.rules,
            result, tokenClassNames, resultCandidates, tmpResult;

        if(!t) return;
        if(t.nodeType === Node.TEXT_NODE) return '#text';

        result = this.lookupRuleNameCacheFor(t);
        if(result === -1) return;
        if(result) return result;

        tokenClassNames = (t && t.attributes && t.attributes['classNames']) || t.classList || [];
        resultCandidates = this.getRuleNamesByTag(t.value || t.nodeName);

        if(tokenClassNames.length !== 0) {
            tmpResult = resultCandidates.find(function(rc) {
                if(!rules[rc].className) return false;

                for(var i=0; i<tokenClassNames.length; i++) {
                    if(rules[rc].className === tokenClassNames[i]) return true;
                }
            });
        }

        result = tmpResult || resultCandidates.find(function(rc) {
            return !rules[rc].className;
        });

        this.cacheRuleNameFor(t, result);

        return result;
    },

    getRuleByElement: function(element) {
        return this.rules[this.getRuleNameByElement(element)];
    },

    isTokenAllowedToBeRootElement: function(t) {
        var rule = this.rules && this.rules[this.getRuleNameByElement(t)];
        return rule && rule.allowedToBeRoot;
    },

    isTokenAllowedToContainItself: function(t) {
      var ruleName = this.getRuleNameByElement(t),
          rule = this.rules && this.rules[ruleName];

        if(!rule.allowedChildren) return false;
        return rule.allowedChildren.indexOf(ruleName) !== -1;
    },

    rootElementsShouldNotBreakOutFrom: function(parentNode) {
        var rule = this.getRuleByElement(parentNode);
        if(!rule) { return false }

        return !!rule.doNotBreakOutRootElements;
    },

    cacheTagTransformationFor: function(tokenPathInParsedTree, result) {
        result = result || -1;
        this.tagTransformationByNodeCache[tokenPathInParsedTree] = result;
        return result == -1 ? undefined : result;
    },

    loockupTagTransformationCacheFor: function(tokenPathInParsedTree, classList) {
        if(classList && classList.length !== 0) {
            return;
        }

        if(this.tagTransformationByNodeCache[tokenPathInParsedTree] === -1) {
            return -1;
        }

        if(this.tagTransformationByNodeCache[tokenPathInParsedTree]) {
            return this.tagTransformationByNodeCache[tokenPathInParsedTree];
        }
    },

    tagTransformationByNode: function(node) {
        var self = this,
            classList = node.classList,
            oriNode = node,
            tokenPathInParsedTree = '',
            matchesByPath = [],
            keys = Object.keys(this.tagTransformations),
            result,
            tk, split;

        if(!oriNode.classList) { oriNode.classList = [] }

        while(node) {
            if(node.tagName) {
                tokenPathInParsedTree = '/' + node.tagName.toLowerCase() + tokenPathInParsedTree;
            } else if(node.nodeType === Node.TEXT_NODE){
                tokenPathInParsedTree = '/#text' + tokenPathInParsedTree;
            }

            node = node.parentNode;
        }

        result = this.loockupTagTransformationCacheFor(tokenPathInParsedTree, classList)

        if(result === -1) {return}
        if(result) {return result}

        for(var i=0; i<keys.length; i++) {
            tk = keys[i];
            split = tk.split('.');

            if(split[0] === tokenPathInParsedTree) {
                if(!split[1]) {
                    matchesByPath.push(tk)
                } else if(oriNode.classList.contains(split[1])) {
                    return this.tagTransformations[tk];
                }
            }
        }

        return self.cacheTagTransformationFor(
                    tokenPathInParsedTree,
                    matchesByPath[0] ? this.tagTransformations[matchesByPath[0]] : -1);
    },

    isNodeAllowedToBeRootElement: function(node) {
        var rule = this.rules[this.getRuleNameByElement(node)];
        return rule && rule.allowedToBeRoot;
    },

    isNodeForbiddenByAllowedChildrenDefinition: function(rootElement, childNodeRuleName, parentElementRule) {
        parentElementRule = parentElementRule || this.getRuleByElement(rootElement);
        if(!childNodeRuleName) return false;
        if(!parentElementRule.allowedChildren) return false;

        return parentElementRule.allowedChildren.indexOf(childNodeRuleName) === -1
    },

    isNodeForbiddenByCardinalityDefinition: function(cardinalities, childNodeRuleName, parentElementRule) {
        var maxAllowed;

        cardinalities[childNodeRuleName] = cardinalities[childNodeRuleName] || 0;

        maxAllowed = parentElementRule &&
                     parentElementRule.childrenCardinality &&
                     parentElementRule.childrenCardinality[childNodeRuleName] &&
                     parentElementRule.childrenCardinality[childNodeRuleName].max;

        if(!maxAllowed) return false;

        return maxAllowed <= cardinalities[childNodeRuleName];
    },

    getRootNodeOf: function(node)  {
        var root = node;

        while(root && root.parentNode) {
            root = root.parentNode;
        }

        return root;
    },

    createDOMElementFromToken: function(token) {
        var self = this, element = document.createElement(token.value);
        Object.keys(token.attributes).forEach(function(key) {
            if(key === 'classNames') {
                element.setAttribute('class', token.attributes[key].join(' '));
            } else {
                element.setAttribute(key, self.strip(token.attributes[key]));
            }
        });

        return element;
    },

    cloneDOMElementAndChangeTagName: function(node, tagName) {
        var result = document.createElement(tagName);

        result.attributes = node.attributes;

        for(var i=0; i<node.attributes.length; i++) {
            result.setAttribute(node.attributes[i].name, node.attributes[i].value)
        }

        result.innerHTML = node.innerHTML;

        return result;
    },

    strip: function(html) {
        if(!html.replace) { return html }

        return html.replace(/&#?(\w+);/g, function(match, dec) {
            if(isNaN(dec) && namedEncodings[dec]) {
                dec = namedEncodings[dec];
            }

            return String.fromCharCode(dec);
        });
    },

    tokenizeHTML: function*(html) {
        var token = null;
        this.stateMachine.resetStateMachine();
        for(let i=0; i<=html.length; i++) {
            token = this.stateMachine.process(html[i] || 'EOF');
            if(token) { yield token; token = null };
        }
    },

    buildTrees: function*(html) {
        var self = this,
            tokenStream = this.tokenizeHTML(html),
            token = null,
            newChild = null,
            currentNodeInTree = null,
            tmpHandlerResult = null;

        var tokenHandler =  {
            OPEN_TAG: function(token) {
                var result;

                if(['br', 'img', 'input'].indexOf(token.value.toLowerCase()) !== -1) {
                    return tokenHandler['EMPTY_TAG'](token);
                }

                newChild = self.createDOMElementFromToken(token);

                if(currentNodeInTree &&
                   self.isTokenAllowedToBeRootElement(token) &&
                   !self.isTokenAllowedToContainItself(token) &&
                   !self.rootElementsShouldNotBreakOutFrom(currentNodeInTree)) {
                    result = self.getRootNodeOf(currentNodeInTree);
                    currentNodeInTree = newChild;
                    return result;
                } else if(currentNodeInTree) {
                    currentNodeInTree.appendChild(newChild);
                    currentNodeInTree = newChild;
                } else {
                    currentNodeInTree = newChild;
                }
            },

            CLOSE_TAG: function(token) {
                if(!currentNodeInTree) return;

                var tmpCurrentNodeInTree;

                if(currentNodeInTree.parentNode) {
                    currentNodeInTree = currentNodeInTree.parentNode;
                } else {
                    tmpCurrentNodeInTree = currentNodeInTree;
                    currentNodeInTree = null;

                    if(tmpCurrentNodeInTree.tagName.toLowerCase() !== token.value && token.value !== '') {
                        tmpCurrentNodeInTree = self.cloneDOMElementAndChangeTagName(tmpCurrentNodeInTree, token.value);
                    }

                    return tmpCurrentNodeInTree;
                }
            },

            EMPTY_TAG: function(token) {
                newChild = self.createDOMElementFromToken(token);

                if(currentNodeInTree) {
                    currentNodeInTree.appendChild(newChild);
                } else {
                    return newChild;
                }
            },

            TEXT: function(token) {
                newChild = document.createTextNode(self.strip(token.value));

                if(!currentNodeInTree) {
                    if(token.value.trim().length === 0) return;
                    currentNodeInTree = document.createElement('p');
                }
                currentNodeInTree.appendChild(newChild);
            }
        }

        while(token = tokenStream.next().value) {
            try {
                tmpHandlerResult = tokenHandler[token.type](token);
            } catch(ex) {
                token = tokenStream.next().value;
                tmpHandlerResult = tokenHandler[token.type](token);
            }

            if(tmpHandlerResult) yield tmpHandlerResult;
        }

        if(currentNodeInTree) {
            yield self.getRootNodeOf(currentNodeInTree);
        }
    },

    transformTreeWithReruns: function(rootElement, transRule, className, modLog) {
        var self = this,
            res = this.transformTree(rootElement, transRule, className, modLog);

        if(Array.isArray(res)) {
            res = res.map(function(r) {
                return self.transformTreeWithReruns(r, undefined, undefined, modLog);
            });

            res = res.reduce((acc, val) => acc.concat(val), []);
        }

        return res;
    },

    // returns an array of DOM elements which should replace the passed element
    transformTree: function(rootElement, transRule, className, modLog) {
        var self = this,
            transRuleWithClass = this.tagTransformationByNode(rootElement),
            transRuleAr, toRuleCondidates, newContent,
            normalizedInnerText, praefixToBeReplaced, praefixMatch, directiveParams,
            toTransformation, tmpDirectiveParams;

        modLog = modLog || {};
        modLog.deletedCharsByMarkupTransformations = modLog.deletedCharsByMarkupTransformations || 0;

        if(!Array.isArray(transRuleWithClass)) {
            transRuleAr = transRuleWithClass ? transRuleWithClass.split('.') : [];
            transRule = transRule || transRuleAr[0];
            className = className || transRuleAr[1];
        } else {
            transRule = transRule || transRuleWithClass;
        }

        if (transRule === '#content') {
            return Array.from(rootElement.childNodes)
        } else if (transRule === '#no-content') {
            rootElement.innerHTML = '';
            return rootElement;
        } else if (transRule === '#text-content') {
            rootElement.innerHTML = rootElement.innerText.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            return rootElement;
        } else if (transRule && rootElement.nodeType === Node.TEXT_NODE) {
            //text node in the left part of the rule is not supported
        } else if(Array.isArray(transRule)) {
            for(let i=0; i<transRule.length; i++) {
                normalizedInnerText = rootElement.innerText.replace(new RegExp(String.fromCharCode(160),"g"), ' ');
                normalizedInnerText = normalizedInnerText.replace(this.temproaryPruneProtectedWhitespace, ' ');
                praefixMatch = normalizedInnerText.match(new RegExp('^' + transRule[i].praefix + '(\\((.*?)\\))?\\s'));

                if(praefixMatch) {
                    praefixToBeReplaced = praefixMatch[0];
                    if(praefixMatch[2]) {
                        directiveParams = praefixMatch[2].split(',').map(function(e) { return e.trim() });
                    } else {
                        directiveParams = [];
                    }

                    toTransformation = transRule[i].to.split(/\(|\)/)[0];
                    tmpDirectiveParams = transRule[i].to.split(/\(|\)/)[1];

                    if(tmpDirectiveParams) {
                        tmpDirectiveParams = tmpDirectiveParams.split(',').map(function(e) { return e.trim() });
                        directiveParams = directiveParams.concat(tmpDirectiveParams);
                    }

                    toRuleCondidates = this.getRuleNamesByTag(toTransformation)
                                           .map(function(ruleName) { return self.rules[ruleName] })
                                           .filter(function(rule) { return rule.allowedToBeRoot && rule.buildEmptyElement });

                    newContent = rootElement.innerHTML.replace('&nbsp;', ' ').replace(this.temproaryPruneProtectedWhitespace, ' ').replace(praefixToBeReplaced, '');
                    modLog.deletedCharsByMarkupTransformations += praefixToBeReplaced.length;
                    modLog.changeSectionType = true;

                    if(toRuleCondidates.length === 1) {
                        rootElement = toRuleCondidates[0].buildEmptyElement(newContent, directiveParams, toRuleCondidates[0]);
                    } else {
                        rootElement = this.cloneDOMElementAndChangeTagName(rootElement, toTransformation);
                        rootElement.innerHTML = newContent;
                    }
                }
            }
        } else if(transRule) {
            rootElement = this.cloneDOMElementAndChangeTagName(rootElement, transRule);
            if(className) rootElement.classList.add(className)
        }

        if(rootElement.childNodes) {
            for(let i=0; i<rootElement.childNodes.length; i++) {

                transRuleWithClass = this.tagTransformationByNode(rootElement.childNodes[i]);
                transRuleAr = transRuleWithClass ? transRuleWithClass.split('.') : [];
                transRule = transRuleAr[0];
                className = transRuleAr[1];

                if(transRule === '-') {
                    let res = [rootElement, rootElement.removeChild(rootElement.childNodes[i])]

                    if(rootElement.childNodes[i]) {
                        let newEl = document.createElement(rootElement.tagName);
                        while(rootElement.childNodes[i]) {
                            newEl.appendChild(rootElement.removeChild(rootElement.childNodes[i]))
                        }

                        res.push(newEl);
                    }

                    if(rootElement.childNodes.length === 0) {
                        res.shift();
                    }

                    return res;
                } else if(transRule && transRule[0] === '=')  {
                    let res = [rootElement, rootElement.removeChild(rootElement.childNodes[i])];
                    let newElementTagName = transRule.substring(1, transRule.length);

                    let newEl = document.createElement(newElementTagName === '' ? rootElement.tagName : newElementTagName);
                    utils.copyNodeAttributes(rootElement, newEl, ['class']);

                    while(rootElement.childNodes[i]) {
                        newEl.appendChild(rootElement.removeChild(rootElement.childNodes[i]))
                    }

                    res.push(newEl);
                    return res;
                } else {
                    let res = this.transformTree(rootElement.childNodes[i], transRule, className, modLog);
                    if(res instanceof Array) {
                        rootElement.childNodes[i].replaceWith(...res);
                        i--;
                    } else if(res) {
                        rootElement.childNodes[i].replaceWith(res);
                    }
                }
            }
        }

        return rootElement;
    },

    cleanupClassAttribte: function(node) {
        var rule = this.getRuleByElement(node),
            classNamesToRemove = [];

        if(rule && rule.allowedClassNames) {
            for(let i=0; i<node.classList.length; i++) {
                if(rule.allowedClassNames.indexOf(node.classList[i]) === -1) {
                    classNamesToRemove.push(node.classList[i]);
                }
            }
            classNamesToRemove.forEach(function(cn) {node.classList.remove(cn);})
        } else if (rule && node.attributes && node.attributes.class) {
            node.removeAttribute('class');
        }
    },

    cleanupNodeAttributes: function(node) {
        // first check whether the cleaning process will remove the class attribute
        var rule = this.getRuleByElement(node),
            attributesToRemove = [];

        if(!rule) return;

        if(node.attributes) {
            for(let i=0; i<node.attributes.length; i++) {
                if(!rule.allowedAttributes ||
                   rule.allowedAttributes.indexOf(node.attributes[i].name) === -1 ||
                  node.attributes[i].value === ''
                  ) {
                    attributesToRemove.push(node.attributes[i].name);
                }
            }
        }

        attributesToRemove.forEach(function(attr) {
            node.removeAttribute(attr);
        });
    },

    buildEmptyElementByRuleName: function(ruleName) {
        var el, rule = this.rules[ruleName];

        if(rule.buildEmptyElement) {
            return rule.buildEmptyElement(null, null, rule);
        }

        el = document.createElement(rule.tagName);
        if(rule.className) {
            el.classList.add(rule.className);
        }
        return el;
    },

    cleanupTree: function(rootElement, modificationLogEntry, previousDOMTree, nextDOMTree) {
        this.cleanupClassAttribte(rootElement);
        this.cleanupNodeAttributes(rootElement);

        var self = this,
            ruleName = this.getRuleNameByElement(rootElement),
            rule = this.rules[ruleName],
            childNodeRuleName,
            cardinalityMap = {},
            result = {},
            deletedCharsByMarkupTransformationsCalulationHelper,
            cTResult;

        if(!ruleName || (rule && rule.deleteIfEmpty && rootElement.innerText.length === 0)) {
            return { removeThisNode: true };
        }

        if(rule && rule.buildAttributes) {
            rule.buildAttributes.forEach(function(ba) {
                if(!rootElement.hasAttribute(ba.name)) {
                    rootElement.setAttribute(ba.name, ba.build())
                }
            })
        }

        for(let i=0; i<rootElement.childNodes.length; i++) {
            childNodeRuleName = this.getRuleNameByElement(rootElement.childNodes[i]);

            if(this.isNodeForbiddenByAllowedChildrenDefinition(rootElement, childNodeRuleName, rule) ||
               this.isNodeForbiddenByCardinalityDefinition(cardinalityMap, childNodeRuleName, rule)) {
                rootElement.removeChild(rootElement.childNodes[i--]);
            } else {
                cardinalityMap[childNodeRuleName]++;

                if(rule.pruneSpaces && rootElement.childNodes[i].nodeType == Node.TEXT_NODE) {
                    deletedCharsByMarkupTransformationsCalulationHelper = rootElement.childNodes[i].nodeValue.length;
                    rootElement.childNodes[i].nodeValue = rootElement.childNodes[i].nodeValue.replace(/(\s|\u00A0)+/g, ' ').replace(/\s$/, '\u00A0');
                    modificationLogEntry.deletedCharsByMarkupTransformations += (deletedCharsByMarkupTransformationsCalulationHelper - rootElement.childNodes[i].nodeValue.length);
                }

                if(rootElement.childNodes[i].nodeType == Node.TEXT_NODE) {
                    rootElement.childNodes[i].nodeValue = rootElement.childNodes[i].nodeValue.replace(this.temproaryPruneProtectedWhitespace, '\u00A0');
                }

                cTResult = this.cleanupTree(rootElement.childNodes[i], modificationLogEntry);

                if(cTResult.removeThisNode) {
                    rootElement.removeChild(rootElement.childNodes[i--]);
                }

                if(cTResult.insertNodeAfter) {
                    rootElement.insertBefore(cTResult.insertNodeAfter, rootElement.childNodes[i].nextSibling);
                }

                if(cTResult.insertNodeBefore) {
                    rootElement.insertBefore(cTResult.insertNodeBefore, rootElement.childNodes[i++]);
                }
            }
        }

        if(rule && rule.allowedSuccessors && rule.allowedSuccessors.length !== 0 && !this.doesElementMatchOneRule(nextDOMTree || rootElement.nextSibling, rule.allowedSuccessors)) {
            result.insertNodeAfter = this.buildEmptyElementByRuleName(rule.allowedSuccessors[0]);
        }

        if(rule && rule.allowedPredecessors && rule.allowedPredecessors.length !== 0 && !this.doesElementMatchOneRule(previousDOMTree || rootElement.previousSibling, rule.allowedPredecessors)) {
            result.insertNodeBefore = this.buildEmptyElementByRuleName(rule.allowedPredecessors[0]);
        }

        return result;
    },

    HTMLToTransformedTreeStream: function*(html, modificationLogEntry) {
        var DOMTreeStream = this.buildTrees(html),
            DOMTree = DOMTreeStream.next().value;

        while(DOMTree) {
            DOMTree = this.transformTreeWithReruns(DOMTree, undefined, undefined, modificationLogEntry);

            if(Array.isArray(DOMTree)) {
                for(let i=0; i<DOMTree.length; i++) {
                    yield DOMTree[i];
                }
            } else {
                yield DOMTree;
            }

            DOMTree = DOMTreeStream.next().value;
        }
    },

    cleanupHTML: function*(html, modificationLogEntry)  {
        if(!html || html === '') { html = '<p></p>' }

        modificationLogEntry = modificationLogEntry || {}
        modificationLogEntry.deletedCharsByMarkupTransformations = 0;

        var DOMTreeStream = this.HTMLToTransformedTreeStream(html, modificationLogEntry),
            cTResult,
            previousDOMTree,
            DOMTree = DOMTreeStream.next().value,
            nextDOMTree = DOMTreeStream.next().value;

        while(DOMTree) {
            if(this.isNodeAllowedToBeRootElement(DOMTree)) {
                cTResult = this.cleanupTree(DOMTree, modificationLogEntry, previousDOMTree, nextDOMTree);
                if(cTResult.insertNodeBefore) {
                    yield this.memorizedNode(cTResult.insertNodeBefore, modificationLogEntry.modLogFlags);
                }

                if(!cTResult.removeThisNode) {
                    yield this.memorizedNode(DOMTree, modificationLogEntry.modLogFlags);
                }

                if(cTResult.insertNodeAfter) {
                    yield this.memorizedNode(cTResult.insertNodeAfter, modificationLogEntry.modLogFlags);
                }
            }

            previousDOMTree = DOMTree;
            DOMTree = nextDOMTree;
            nextDOMTree = DOMTreeStream.next().value;
        }
    },

    memorizedNode: function(node, modLogFlags) {

        modLogFlags = modLogFlags || {};
        node.originalHTML = node.outerHTML;

        Object.keys(modLogFlags).forEach(function(flag) {
            node['originalHTMLContains' + flag] = modLogFlags[flag].some(function(selector) {
                return node.matches(selector) || node.querySelector(selector)
            });
        });

        return node;
    },

    cleanupHTMLAndAttachEventHandlers: function*(html, modificationLogEntry) {
          var DOMTreeStream = this.cleanupHTML(html, modificationLogEntry),
            DOMTree = DOMTreeStream.next().value,
            dummyElement, rule;

        while(DOMTree) {
            rule = this.getRuleByElement(DOMTree);
            if(rule.buildEmptyElement) {
                dummyElement = rule.buildEmptyElement(null, null, rule);
                utils.copyEventListenersRecursively(dummyElement, DOMTree);
            }

            yield DOMTree;
            DOMTree = DOMTreeStream.next().value;
        }
    }
}

module.exports = HTMLRazor;


/***/ }),

/***/ "../structured-text-editor/lib/html_razor/state_machine.js":
/*!*****************************************************************!*\
  !*** ../structured-text-editor/lib/html_razor/state_machine.js ***!
  \*****************************************************************/
/***/ ((module) => {

var i=0,
    WAIT_FOR_NEXT_TOKEN_TO_START = i++,
    READING_TAG_NAME = i++,
    DETERMINING_TAG_TYPE = i++,
    READING_ATTRIBUTE_NAME = i++,
    EXPECTING_QUOTE_TO_START_ATTRIBUTE_VALUE = i++,
    READING_ATTRIBUTE_VALUE = i++,
    WAIT_FOR_NEXT_ATTRIBUTE_TO_START = i++,
    READING_TEXT = i++,
    WAITING_FOR_EMPTY_TAG_TO_BE_CLOSED = i++;

function addCharRangeToTransition(transition, CharRangeStart, CharRangeEnd, TransitionAction) {
    for(let asciCode=CharRangeStart.charCodeAt(0); asciCode<=CharRangeEnd.charCodeAt(0); asciCode++) {
        transition[String.fromCharCode(asciCode)] = TransitionAction;
    }
}

function globCharRangesInTranstion(transition) {
    Object.keys(transition).filter(function(tk) {
        return tk.match(/^\[(.|\s)*\]$/);
    }).forEach(function(tk) {
        var tf = transition[tk];

        if(tk.indexOf('A-Z') !== -1) {addCharRangeToTransition(transition, 'A', 'Z', tf);}
        if(tk.indexOf('a-z') !== -1) {addCharRangeToTransition(transition, 'a', 'z', tf);}
        if(tk.indexOf('0-9') !== -1) {addCharRangeToTransition(transition, '0', '9', tf);}

        if(tk.indexOf(' \n') !== -1) {
           transition[' '] = tf;
           transition['\n'] = tf;
        }

        //tk.replace(/\[|\]|A\-Z|a\-z|0\-9/g, '') -> "[A-Za-z-']" is replaced to "-'", and then "-" and "'" are added to the transition
        tk.replace(/\[|\]|A\-Z|a\-z|0\-9/g, '').split('').forEach(function(c) {
            transition[c] = tf;
        });
    });
}


function StateMachine() {
    var self = this;

    this.transistions = [];
    this.tokens = [];
    this.state = WAIT_FOR_NEXT_TOKEN_TO_START;

    this.resetState();

    this.transistions[WAIT_FOR_NEXT_TOKEN_TO_START] = {
        '<':                 function()     { self.state = DETERMINING_TAG_TYPE; },
        'else':              function(char) { self.state = READING_TEXT; self.currentToken.type = 'TEXT'; self.currentToken.value += char; }
    };

    this.transistions[DETERMINING_TAG_TYPE] = {
        '[a-zA-Z]':          function(char)  { self.state = READING_TAG_NAME; self.currentToken.type = 'OPEN_TAG'; self.currentToken.value += char; },
        '/':                 function()      { self.state = READING_TAG_NAME; self.currentToken.type = 'CLOSE_TAG'; },
    };

    this.transistions[READING_TAG_NAME] = {
        '[a-zA-Z0-9]':       function(char) { self.currentToken.value += char },
        '[ \n]':             function()     { self.currentToken.type === 'CLOSE_TAG' ? self.transistions[READING_TAG_NAME]['>']() : self.state = WAIT_FOR_NEXT_ATTRIBUTE_TO_START },
        '>':                 function()     { self.state = WAIT_FOR_NEXT_TOKEN_TO_START, self.finishToken() },
        '/':                 function()     { self.state = WAITING_FOR_EMPTY_TAG_TO_BE_CLOSED, self.currentToken.type = 'EMPTY_TAG'; }
    };

    this.transistions[READING_ATTRIBUTE_NAME] = {
        '[a-zA-Z-]':         function(char) { self.currentAttribute.name += char },
        ' ':                 function()     { self.state = WAIT_FOR_NEXT_ATTRIBUTE_TO_START; self.finishAttribute() },
        '\n':                function()     {},
        '=':                 function()     { self.state = EXPECTING_QUOTE_TO_START_ATTRIBUTE_VALUE },
        '>':                 function()     { self.state = WAIT_FOR_NEXT_TOKEN_TO_START; self.finishAttribute(); self.finishToken()  },
        '<':                 function()     { self.state = DETERMINING_TAG_TYPE; self.handleBrokenOpenTag(READING_ATTRIBUTE_NAME); },
        '/':                 function()     { self.state = WAITING_FOR_EMPTY_TAG_TO_BE_CLOSED, self.currentToken.type = 'EMPTY_TAG'; self.finishAttribute() }
    };

    this.transistions[EXPECTING_QUOTE_TO_START_ATTRIBUTE_VALUE] = {
        '["\']':             function()     { self.state = READING_ATTRIBUTE_VALUE }
    };

    this.transistions[READING_ATTRIBUTE_VALUE] = {
        '["\']':             function()     { self.state = WAIT_FOR_NEXT_ATTRIBUTE_TO_START; self.finishAttribute() },
        '<':                 function()     { self.state = DETERMINING_TAG_TYPE; self.handleBrokenOpenTag(READING_ATTRIBUTE_VALUE); },
        'else':              function(char) { self.currentAttribute.value += char }
    };

    this.transistions[WAIT_FOR_NEXT_ATTRIBUTE_TO_START] = {
        '[ \n]':             function()     { },
        '[a-zA-Z]':          function(char) { self.state = READING_ATTRIBUTE_NAME; self.currentAttribute.name += char },
        '>':                 function()     { self.state = WAIT_FOR_NEXT_TOKEN_TO_START, self.finishToken() },
        '/':                 function()     { self.state = WAITING_FOR_EMPTY_TAG_TO_BE_CLOSED, self.currentToken.type = 'EMPTY_TAG'; }
    };

    this.transistions[WAITING_FOR_EMPTY_TAG_TO_BE_CLOSED] = {
        '\n':                function()     {},
        '>':                 function()     { self.state = WAIT_FOR_NEXT_TOKEN_TO_START, self.finishToken() },
    };

    this.transistions[READING_TEXT] = {
        '<':                 function()     { self.state = DETERMINING_TAG_TYPE; self.finishToken(); },
        'else':              function(char) { self.currentToken.value += char; },
        'EOF':               function()     { self.finishToken(); }
    };

    this.transistions.forEach(function(t) {
        globCharRangesInTranstion(t);
    })
};

StateMachine.prototype.finishAttribute = function() {

    if(this.currentAttribute.name === 'class') {
        this.currentAttribute.name = 'classNames';
        this.currentAttribute.value = this.currentAttribute.value.split(' ');
        this.currentAttribute.value = this.currentAttribute.value.map(function(c) { return c.trim() });
    }

    this.currentToken.attributes[this.currentAttribute.name] = this.currentAttribute.value || true;
    this.currentAttribute = {name: '', value: ''};
};

StateMachine.prototype.finishToken = function() {
    this.tokens.push(this.currentToken);
    this.resetState();
};

StateMachine.prototype.resetState = function() {
    this.currentToken = {value: '', type: 'UNKNOWN', attributes: {}};
    this.currentAttribute = {name: '', value: ''};
};

StateMachine.prototype.resetStateMachine = function() {
    this.resetState();
    this.tokens = [];
    this.state = WAIT_FOR_NEXT_TOKEN_TO_START;
}

// State Param: the StateMachine state in which the broken open tag has been detected
StateMachine.prototype.handleBrokenOpenTag = function(state) {
    if(state === READING_ATTRIBUTE_NAME || state === READING_ATTRIBUTE_VALUE) {
        this.finishToken();
        this.currentToken = {value: '', type: 'TEXT', attributes: {}};
        this.finishToken();
    }
}

StateMachine.prototype.process = function(char) {

    if(this.transistions[this.state][char]) {
        this.transistions[this.state][char](char);
    } else if (this.transistions[this.state]['else'])  {
        this.transistions[this.state]['else'](char)
    } else {
        // console.log('error parsing content');
    }

    return this.tokens.pop();
};


module.exports = StateMachine


/***/ }),

/***/ "../structured-text-editor/lib/html_razor/tag_transformation.js":
/*!**********************************************************************!*\
  !*** ../structured-text-editor/lib/html_razor/tag_transformation.js ***!
  \**********************************************************************/
/***/ ((module) => {

var TagTransformations = function() {
    Object.call(this);
}

TagTransformations.prototype = Object.create(Object.prototype);

TagTransformations.prototype.allowOnlyTextIn = function(path, args) {
    var t = this,
        p = path,
        c = '#content';

    args = args || {};

    t[p+'/span'] =
    t[p+'/ul'] =
    t[p+'/li'] =
    t[p+'/ul/li'] =
    t[p+'/ol'] =
    t[p+'/ol/li'] =
    t[p+'/strong'] =
    t[p+'/em'] =
    t[p+'/a/span'] =
    t[p+'/b/b'] =
    t[p+'/u/u'] =
    t[p+'/i/i'] =
    t[p+'/font'] = c;

    if(!args.allowBoldItalicUnderline) {
        t[p+'/b'] =
        t[p+'/u'] =
        t[p+'/i'] =
        t[p+'/code'] = c;
    } else {
        t[p+'/inlinecode/b'] =
        t[p+'/inlinecode/i'] =
        t[p+'/inlinecode/u'] =
        t[p+'/inlinecode/a'] = c;
        t[p+'/code'] = 'inlinecode';
        t[p+'/inlinecode/inlinecode'] = '#content';
        t[p+'/b/inlinecode'] = '-';
        t[p+'/u/inlinecode'] = '-';
        t[p+'/i/inlinecode'] = '-';
        t[p+'/a/code'] = 'inlinecode';
    }

    if(!args.allowLinks) {
      t[p+'/a'] = c;
      t[p+'/code'] = c;
      t[p+'/inlinecode'] = c;
    }

    if(!args.allowRootElements) {
        t[p+'/h1'] =
        t[p+'/h2'] =
        t[p+'/h3'] =
        t[p+'/h4'] =
        t[p+'/h5'] =
        t[p+'/h6'] =
        t[p+'/h7'] =
        t[p+'/div'] =
        t[p+'/p'] = c;
    }

    if(args.allowEquations) {
        t.allowInlineequationsIn(p)
    }

    if(args.allowRefs) {
        t.allowRefsIn(p);

        if(args.allowBoldItalicUnderline) {
            t.allowRefsIn(p + '/b');
            t.allowRefsIn(p + '/u');
            t.allowRefsIn(p + '/i');
        }

        if(args.allowLinks) {
            t.allowRefsIn(p + '/a');
        }
    }
};

TagTransformations.prototype.allowInlineequationsIn = function(path) {
    var t = this,
        p = path;

    t[p+'/inlineequation'] = '#no-content';
    t[p+'/b/inlineequation'] =
    t[p+'/u/inlineequation'] =
    t[p+'/i/inlineequation'] =
    t[p+'/a/inlineequation'] =
    t[p+'/b/i/inlineequation'] =
    t[p+'/i/b/inlineequation'] =
    t[p+'/b/u/inlineequation'] =
    t[p+'/u/b/inlineequation'] =
    t[p+'/i/u/inlineequation'] =
    t[p+'/u/i/inlineequation'] =
    t[p+'/a/i/inlineequation'] =
    t[p+'/i/a/inlineequation'] =
    t[p+'/a/u/inlineequation'] =
    t[p+'/u/a/inlineequation'] =
    t[p+'/a/b/inlineequation'] =
    t[p+'/b/a/inlineequation'] = '-'
};



TagTransformations.prototype.allowRefsIn = function(path) {
    this[path+'/span'] = '#content';
    this[path+'/span.footnote'] = 'span.footnote';
    this[path+'/span.reference'] = 'span.reference';
};


module.exports = TagTransformations


/***/ }),

/***/ "../structured-text-editor/lib/lookup_refs/errors.js":
/*!***********************************************************!*\
  !*** ../structured-text-editor/lib/lookup_refs/errors.js ***!
  \***********************************************************/
/***/ ((module) => {

class NotFound extends Error {
    constructor(lookupID) {
        super(`No record found for ${lookupID}`)
    }
}

class InvalidID extends Error {
    constructor(lookupID) {
        super(`ID is invalid: ${lookupID}`)
    }
}

class EmptyID extends Error {
    constructor() {
        super('ID argument should not be null for fetching reference data. Needs to be a DOI/ISBN')
    }
}

module.exports = {
    NotFound,
    InvalidID,
    EmptyID
};

/***/ }),

/***/ "../structured-text-editor/lib/lookup_refs/index.js":
/*!**********************************************************!*\
  !*** ../structured-text-editor/lib/lookup_refs/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var lookupByDOI = __webpack_require__(/*! ./lookup_by_doi */ "../structured-text-editor/lib/lookup_refs/lookup_by_doi.js");
var lookupByISBN = __webpack_require__(/*! ./lookup_by_isbn */ "../structured-text-editor/lib/lookup_refs/lookup_by_isbn.js");
var lookupByURL = __webpack_require__(/*! ./lookup_by_url */ "../structured-text-editor/lib/lookup_refs/lookup_by_url.js");
var lookupByArxiv = __webpack_require__(/*! ./lookup_by_arxiv */ "../structured-text-editor/lib/lookup_refs/lookup_by_arxiv.js");
var errors = __webpack_require__(/*! ./errors */ "../structured-text-editor/lib/lookup_refs/errors.js");

module.exports = {
    fetchJSON: function(id) {
        if(!id) {
            return new Promise((_, rej) => rej(new errors.EmptyID()));
        }

        id = id.trim();

        if(lookupByDOI.isValidID(id)) {
            return lookupByDOI.fetchJSON(id);
        }

        if(lookupByISBN.isValidID(id)) {
            return lookupByISBN.fetchJSON(id);
        }

        if(lookupByURL.isValidID(id)) {
            return lookupByURL.fetchJSON(id);
        }

        if(lookupByArxiv.isValidID(id)) {
            return lookupByArxiv.fetchJSON(id);
        }

        return new Promise((_, rej) => rej(new errors.InvalidID(id)));
    },

    lookupByDOI: lookupByDOI.fetchJSON,
    lookupByISBN: lookupByISBN.fetchJSON,
    lookupByURL: lookupByURL.fetchJSON,
    errors: errors,
}

/***/ }),

/***/ "../structured-text-editor/lib/lookup_refs/lookup_by_arxiv.js":
/*!********************************************************************!*\
  !*** ../structured-text-editor/lib/lookup_refs/lookup_by_arxiv.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// fetch('http://export.arxiv.org/api/query?id_list=1906.01738').then(r => r.text()).then(text => )

var errors = __webpack_require__(/*! ./errors */ "../structured-text-editor/lib/lookup_refs/errors.js");
var months = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May.', 'Jun.', 'Jul.', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec'];
var lookupCache = {}

function getPublishedMonth(entry) {
    try {
        var date = new Date(entry.querySelector('published').innerHTML)

        if(!date || date == 'Invalid Date') {
            throw 'invalid publication date';
        }

        return months[date.getMonth()]
    } catch (ex) {
        console.log('error parsing publication date', ex)
        return ''
    }
}

function getPublishedYear(entry) {
    try {
        var date = new Date(entry.querySelector('published').innerHTML)

        if(!date || date == 'Invalid Date') {
            throw 'invalid publication date'
        }

        return date.getFullYear()
    } catch (ex) {
        console.log('error parsing publication date', ex)
        return ''
    }
}

function resultFromRespnose(xmlDoc) {
    var entry = xmlDoc.querySelector('entry')
    var titleEl = entry.querySelector('title')
    var authors = entry.querySelectorAll('author').map(author => {
        author = author && author.querySelector('name')
        if(author && author.innerHTML) {
            return author.innerHTML
        }
    }).join(' and ')

    return {
        type: 'Article',
        title: (titleEl && titleEl.innerHTML) || '',
        author: authors,
        year: getPublishedYear(entry),
        month: getPublishedMonth(entry)
    }
}

module.exports = {

    isValidID: function(id) {
        return id && id.trim().match(/^(arXiv:)?[0-9]{4}\.[0-9]+(v.)?$/)
    },

    fetchJSON: async function(id) {

        if(!this.isValidID(id)) {
            throw new errors.InvalidID(id);
        }

        if(id.trim().match(/^arXiv:/)) {
            id = id.trim().replace(/^arXiv:/, '')
        }

        if(lookupCache[id]) {
            return lookupCache[id]
        }

        var res = await fetch(`http://export.arxiv.org/api/query?id_list=${id}`)

        if(!res.ok) {
            throw errors.NotFound
        }

        lookupCache[id] = resultFromRespnose(
            new window.DOMParser().parseFromString(await res.text(), "text/xml")
        )

        return lookupCache[id]
    }
}

/***/ }),

/***/ "../structured-text-editor/lib/lookup_refs/lookup_by_doi.js":
/*!******************************************************************!*\
  !*** ../structured-text-editor/lib/lookup_refs/lookup_by_doi.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var errors = __webpack_require__(/*! ./errors */ "../structured-text-editor/lib/lookup_refs/errors.js");
var doiLookupCache = {}

var months = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May.', 'Jun.', 'Jul.', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec'];

var doiType2bibTeXType = {
    'journal-article': 'Article',
    'proceedings-article': 'Conference/Inproceedings',
    'dissertation': 'Phdthesis',

    'book': 'Book',
    'book-series': 'Book',
    'book-set': 'Book',
    'book-track': 'Book',
    'monograph': 'Book',
    'reference-book': 'Book',

    'book-chapter': 'Inbook',
    'book-part': 'Inbook',
    'book-section': 'Inbook',
    'reference-entry': 'Inbook',

    'dataset': 'Techreport',
    'posted-content': 'Techreport',
    'report': 'Techreport',
    'report-series': 'Techreport',
    'standard': 'Techreport',
};

var selectedFields = [
    'type',
    'container-title', // -> journal, booktitle, eventtitle
    'volume',
    'issue',
    'publisher',
    'issued', // -> year, month
    'title',
    'subtitle',
    'author',
    'editor',
];

function transformDoiAuthors(doiData, field) {
    return (doiData[(field)] || [])
        .map(a => `${a.family}, ${a.given}`)
        .join(' and ')
}

function transformDoiMonth(doiData) {
    if(doiData && doiData.issued && doiData.issued['date-parts'] && doiData.issued['date-parts'][0] && doiData.issued['date-parts'][0][1]) {
        return months[doiData.issued['date-parts'][0][1]-1];
    }

    return '';
}

function transformDoiYear(doiData) {
    if(doiData && doiData.issued && doiData.issued['date-parts'] && doiData.issued['date-parts'][0] && doiData.issued['date-parts'][0][0]) {
        return doiData.issued['date-parts'][0][0];
    }

    return '';
}

function transformDoiPublisher(doiData) {
    if(['book-chapter',
      'book-part',
      'book-section',
      'reference-entry',
      'proceedings-article',
      'book',
      'book-series',
      'book-set',
      'book-track',
      'monograph',
      'reference-book'].includes(doiData.type)) {
        return doiData.publisher || '';
    }
    return '';
}

function transformDoiOrganization(doiData) {
    if(['proceedings-article'].includes(doiData.type)) {
        return doiData.publisher || '';
    }

    return '';
}

function transformDoiSchool(doiData) {
    if(['dissertation'].includes(doiData.type)) {
        return doiData.publisher || '';
    }
    return '';
}

function decode(str) {
    return str.replace('&amp;', '&')
}

module.exports = {

    isValidID: function(doi) {
        return doi.match(/^10.\d{4,9}\/.+$/i);
    },

    fetchJSON: function(doi) {
        return module.exports.queryCrossref(doi).then(resultData => {
            return {
                type: resultData.type ? doiType2bibTeXType[resultData.type] : 'Article',
                author: transformDoiAuthors(resultData, 'author'),
                editor: transformDoiAuthors(resultData, 'editor'),
                title: decode(resultData.title ? resultData.title.join(' - ') : ''),
                subtitle: decode(resultData.subtitle ? resultData.subtitle.join(' - ') : ''),
                journal: decode(resultData['container-title'] ? resultData['container-title'].join(' - ') : ''),
                number: resultData.issue || '',
                volume: resultData.volume || '',
                publisher: decode(transformDoiPublisher(resultData)),
                organization: decode(transformDoiOrganization(resultData)),
                year: transformDoiYear(resultData),
                month: transformDoiMonth(resultData),
                school: transformDoiSchool(resultData)
            }
        });
    },

    queryCrossref: function(doi) {
        if(!doi || !this.isValidID(doi)) {
            return new Promise((res, rej) => rej('invalid DOI'));
        }

        if(doiLookupCache[doi]) {
            return doiLookupCache[doi]
        }

        doiLookupCache[doi] = fetch(`https://api.crossref.org/works/?filter=doi:${encodeURIComponent(doi)}&select=${encodeURIComponent(selectedFields.join(','))}`)
            .then(response => response.json())
            .then(data => {
                if(data && data.message && data.message.items, data.message.items.length) {
                    return data.message.items[0];
                }

                return new Promise((_, rej) => rej(new errors.NotFound(doi)));
            });

        return doiLookupCache[doi];
    }
}

/***/ }),

/***/ "../structured-text-editor/lib/lookup_refs/lookup_by_isbn.js":
/*!*******************************************************************!*\
  !*** ../structured-text-editor/lib/lookup_refs/lookup_by_isbn.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var errors = __webpack_require__(/*! ./errors */ "../structured-text-editor/lib/lookup_refs/errors.js");
var fetchCache = {}
var months = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May.', 'Jun.', 'Jul.', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec'];

module.exports = {
    isValidID: function(isbn) {
        return isbn.match(/^(?=(?:\D*\d){10}(?:(?:\D*\d){3})?$)[\d-]+$/);
    },

    fetchJSON: async function(isbn) {
        if(!this.isValidID(isbn)) {
            throw new errors.InvalidID(isbn);
        }

        if(fetchCache[isbn]) {
            return fetchCache[isbn];
        }

        var rawData = await fetch(`https://openlibrary.org/isbn/${isbn}.json`);

        if(rawData.status === 404) {
            await new Promise(res => window.setTimeout(res, 1000));
            rawData = await fetch(`https://openlibrary.org/isbn/${isbn}.json`);
        }

        if(rawData.status === 404) {
            throw new errors.NotFound(isbn);
        }

        rawData = await rawData.json();

        var result = {};
        result.author = (await this.getAuthors(rawData)).join(' and ');
        result.type = 'Book';

        if(rawData.title) {
            result.title = rawData.title;
        }

        if(rawData.subtitle) {
            result.subtitle = rawData.subtitle;
        }

        if(rawData.publishers && rawData.publishers.length) {
            result.publisher = rawData.publishers[0];
        }

        if(rawData.publish_date) {
            var publishDate = new Date(rawData.publish_date);
            if(publishDate instanceof Date && !isNaN(publishDate)) {
                result.year = publishDate.getFullYear();
                result.month = months[publishDate.getMonth()];
            }
        }

        if(rawData.isbn_13 && rawData.isbn_13.length) {
            result.isbn = rawData.isbn_13[0];
        }

        fetchCache[isbn] = result;
        return result;
    },

    getAuthors: async function(payload) {
        var authors = [];

        if(payload.authors && payload.authors.length) {
            for(var i=0; i<payload.authors.length; i++) {
                var authorData = await fetch(`https://openlibrary.org${payload.authors[i].key}.json`);

                if(!authorData.ok) {
                    throw errors.NotFound
                }

                authorData = await authorData.json();
                if(authorData && authorData.name) {
                    authors.push(authorData.name);
                }
            }
        }

        if(payload.contributors && payload.contributors.length) {
            for(var i=0; i<payload.contributors.length; i++) {
                if(payload.contributors[i].role === 'Author') {
                    authors.push(payload.contributors[i].name);
                }
            }
        }

        return authors.map(this.authorNameToBibTeXFormat);
    },

    authorNameToBibTeXFormat: function(name) {
        var names = name.split(' ');
        var lastName = names.pop();

        if(!names.length) {
            return lastName;
        }

        return `${lastName}, ${names.join(' ')}`;
    },
}

/***/ }),

/***/ "../structured-text-editor/lib/lookup_refs/lookup_by_url.js":
/*!******************************************************************!*\
  !*** ../structured-text-editor/lib/lookup_refs/lookup_by_url.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var errors = __webpack_require__(/*! ./errors */ "../structured-text-editor/lib/lookup_refs/errors.js");
var lookupCache = {}
var months = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May.', 'Jun.', 'Jul.', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec'];
var apiEndpoint = 'https://djapi.eu-gb.mybluemix.net'
// var apiEndpoint = 'http://localhost:8080'

function getPublishedMonth(urlMeta) {
    try {
        var date = new Date(urlMeta['article:published_time'])

        if(!date || date == 'Invalid Date') {
            throw 'invalid publication date';
        }

        return months[date.getMonth()]
    } catch (ex) {
        console.log('error parsing publication date', ex)
        return ''
    }
}

function getPublishedYear(urlMeta) {
    try {
        var date = new Date(urlMeta['article:published_time'])

        if(!date || date == 'Invalid Date') {
            throw 'invalid publication date'
        }

        return date.getFullYear()
    } catch (ex) {
        console.log('error parsing publication date', ex)
        return ''
    }
}

function resultFromRespnose(urlMeta, url) {
    return {
        type: 'Website',
        title: (urlMeta.title && urlMeta.title.trim() !== '' ? urlMeta.title : urlMeta.description) || '',
        author: urlMeta.author || '',
        url: url || urlMeta.url || '',
        year: getPublishedYear(urlMeta),
        month: getPublishedMonth(urlMeta)
    }
}

module.exports = {

    isValidID: function(url) {
        return url && url.trim().match(/^https?:\/\//)
    },

    fetchJSON: async function(url) {

        if(!this.isValidID(url)) {
            throw new errors.InvalidID(url);
        }

        if(lookupCache[url]) {
            return lookupCache[url]
        }

        var urlMeta = await fetch(`${apiEndpoint}/api/v2/syncjobs/geturlmetadata?url=${encodeURIComponent(url)}`)

        if(!urlMeta.ok) {
            throw errors.NotFound
        }

        lookupCache[url] = resultFromRespnose(await urlMeta.json(), url)

        return lookupCache[url]
    }
}

/***/ }),

/***/ "../structured-text-editor/lib/pixelschubser/utils.js":
/*!************************************************************!*\
  !*** ../structured-text-editor/lib/pixelschubser/utils.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = {
    getElementPosition: function(el) {
        var xPos = 0,
            yPos = 0;

        while (el) {
            xPos += el.offsetLeft + el.clientLeft;
            yPos += el.offsetTop  + el.clientTop;

            el = el.offsetParent;
        }

        return {
            x: xPos,
            y: yPos
        };
    },

    getDistanceToRightWindowBorder: function(el) {
        var rect = el.getBoundingClientRect();
        if(!rect) return;
        return window.innerWidth - rect.x - rect.width;
    },

    copyNodeAttributes: function(srcNode, targetNode, skipAttributes) {
        skipAttributes = skipAttributes || [];

        for(var i=0; i<srcNode.attributes.length; i++) {
            if(skipAttributes.indexOf(srcNode.attributes[i].name) === -1) {
                targetNode.setAttribute(srcNode.attributes[i].name, srcNode.attributes[i].value);
            }
        }
    },

    getFirstParentWithTagName: function(el, tagName) {
        while(el && !el.tagName === tagName) {
            el = el.parentElement
        }

        return el
    },

    getAllTextNodesOfElement: function(el) {
      var n, a=[], walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);

      while(n = walk.nextNode()) { a.push(n); }
      return a;
    },

    getLastVisibleChildOfElement: function(el) {
        var walk = document.createTreeWalker(el, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, null, false);
        return walk.lastChild();
    },

    getFirstVisibleChildOfElement: function(el) {
        var walk = document.createTreeWalker(el, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, null, false);
        return walk.nextNode();
    },

    copyEventListenersRecursively: function(srcNode, targetNode) {
        if(srcNode && targetNode) {
            this.copyEventListeners(srcNode, targetNode);
            for(let i=0; i<srcNode.childNodes.length; i++) {
                this.copyEventListenersRecursively(srcNode.childNodes[i], targetNode.childNodes[i]);
            }
        }
    },

    copyEventListeners: function(srcNode, targetNode) {
        targetNode.onclick = targetNode.onclick || srcNode.onclick;
        targetNode.ondragover = targetNode.ondragover || srcNode.ondragover;
        targetNode.ondragleave = targetNode.ondragleave || srcNode.ondragleave;
        targetNode.ondrop = targetNode.ondrop || srcNode.ondrop;
        targetNode.onchange = targetNode.onchange || srcNode.onchange;
        targetNode.onKeyUp = targetNode.onKeyUp || srcNode.onKeyUp;
        targetNode.onKeyDown = targetNode.onKeyDown || srcNode.onKeyDown;
        targetNode.onKeyEnter = targetNode.onKeyEnter || srcNode.onKeyEnter;
        targetNode.onKeyTab = targetNode.onKeyTab || srcNode.onKeyTab;
        targetNode.onKeyBackspace = targetNode.onKeyBackspace || srcNode.onKeyBackspace;
        targetNode.onKeyCombination = targetNode.onKeyCombination || srcNode.onKeyCombination;
        targetNode.onMarkupCleaningFinshed = targetNode.onMarkupCleaningFinshed || srcNode.onMarkupCleaningFinshed;
        targetNode.setContenteditable = targetNode.setContenteditable || srcNode.setContenteditable;
        targetNode.onSelectionChange = targetNode.onSelectionChange || srcNode.onSelectionChange;
        targetNode.onUnfocus = targetNode.onUnfocus || srcNode.onUnfocus;
        targetNode.onWindowResize = targetNode.onWindowResize || srcNode.onWindowResize;

        targetNode.sectionType = targetNode.sectionType || srcNode.sectionType;
    },

    getNodeIteratorPointingTo: function(node) {
        if(!node) { return; }
        var nodeIterator = document.createTreeWalker(
              document.body,
              NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,
              function(node) {
                  return (node.length === 0 || node.innerHTML === '') ?
                        NodeFilter.FILTER_REJECT :
                        NodeFilter.FILTER_ACCEPT;
              }
        );

        nodeIterator.currentNode = node;

        return nodeIterator;
    },

    rescueLaTeXCharsFromEscape: function(str) {
        var mapping = {
            '\\': 'latexslash',
            '{': 'latexcmdstart',
            '}': 'latexcmdend',
            '$': 'latexcdollar',
        };

        return str.replace(/[\\{}$]/g, function(match) {
            return  mapping[match] ? ('--'+mapping[match]+'--') : '';
        });
    },

    restoreRescuedLaTeXChars: function(str) {
        var mapping = {
            'latexslash': '\\',
            'latexcmdstart': '{',
            'latexcmdend': '}',
            'latexcdollar': '$'
        };

        return str.replace(/--(latex.{5,8}?)--/g, function(match, codename) {
            console.log(codename, mapping[codename])
            return  mapping[codename] ? mapping[codename] : '';
        });
    },

    stringToAttributeSaveString: function(str) {
        var mapping = {
            '<': 'lt',
            '>': 'gt',
            '\'': 'apos',
            '"': 'quot'
        };

        return str.replace(/[<>'"]/g, function(match) {
            return  mapping[match] ? ('--'+mapping[match]+'--') : '';
        });
    },

    attributeSaveStringToString: function(str) {
        var mapping = {
            'lt': '<',
            'gt': '>',
            'apos': '\'',
            'quot': '"'
        };

        return str.replace(/--(.{2,4}?)--/g, function(match, code) {
            return mapping[code] || '';
        });
    },

    attributeSaveStringToHTMLEncoded: function(str) {
        return str.replace(/--(.{2,4}?)--/g, function(match, code) {
            return  '&' + code + ';';
        });
    },

    getSubtreeByChildNode: function(container, child) {
        while(child) {
            if(child && child.parentElement === container && child.nodeType !== Node.TEXT_NODE) {
                return child;
            }
            child = child.parentNode;
        }
    }
};


/***/ }),

/***/ "../structured-text-editor/lib/throttle/throttle.js":
/*!**********************************************************!*\
  !*** ../structured-text-editor/lib/throttle/throttle.js ***!
  \**********************************************************/
/***/ ((module) => {

//see: https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf
module.exports = function(limit, func) {
  let lastFunc;
  let lastRan;
  let lastReject;

  return function() {
      const context = this;
      const args = arguments;

      return new Promise((resolve, reject) => {
          if (!lastRan) {
              resolve(func.apply(context, args));
              lastRan = Date.now();
          } else {
              clearTimeout(lastFunc);

              if(lastReject) {
                  lastReject('canceled by throttle')
              }

              lastReject = reject

              lastFunc = setTimeout(function() {
                    if (Date.now() - lastRan >= limit) {
                        resolve(func.apply(context, args));
                        lastRan = Date.now();
                    }
              }, limit - (Date.now() - lastRan));
          }
      }).catch((err) => {
          console.log(err)

          if(err !== 'canceled by throttle') {
              return new Promise((_, reject) => reject(err))
          }
      });
  };
};


/***/ }),

/***/ "../structured-text-editor/lib/toc_builder/toc_builder.js":
/*!****************************************************************!*\
  !*** ../structured-text-editor/lib/toc_builder/toc_builder.js ***!
  \****************************************************************/
/***/ ((module) => {

function getNumberPreafixHTML(numbering) {
    if(!numbering || numbering.length === 0) { return '' }

    return '<span class="index-preafix">' + numbering + '. </span>'
}

function TOCEntryFromElement(h, args) {
    var link, result = document.createElement('li')

    if(h.el.hasAttribute('id') && args.withLinks) {
        link = document.createElement('a')
        link.setAttribute('href', '#' + h.el.getAttribute('id'))
        link.innerHTML = h.content
        result.appendChild(link)
    } else {
        result.innerHTML = h.content
    }

    if(h.numbering) {
        result.innerHTML = getNumberPreafixHTML(h.numbering) + result.innerHTML
    }

    if(h.el.classList.contains('missingLevelHint')) {
        result.classList = h.el.classList
    }
    return result
}

function missingLevelWaring(level) {
  var result = document.createElement('H' + level)
  result.classList.add('missingLevelHint')
  result.classList.add('level-' + level)

  return {
      level: level,
      content: '',
      el: result
  }
}

function annotateHeadingNumbering(DOMElement, args) {
    var c1 = c2 = c3 = c4 = c5 = c6 = 0;

    if(!Number.isInteger(args.startNumberingAtLevel) ||
       args.startNumberingAtLevel < 1 ||
       args.startNumberingAtLevel > 6) {
        return DOMElement;
    }

    DOMElement.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(function(heading) {
        var numbering

        if(heading.getAttribute('unnumbered-heading') === 'Yes') {
            heading.numbering = undefined;
            return;
        }

        if(heading.tagName === 'H1') {
            c2 = c3 = c4 = c5 = c6 = 0
            c1++
            heading.numbering = c1
            numbering = [c1]
        } else if(heading.tagName === 'H2') {
            c3 = c4 = c5 = c6 = 0
            c2++
            heading.numbering = c2
            numbering = [c1, c2]
        } else if(heading.tagName === 'H3') {
            c4 = c5 = c6 = 0
            c3++
            numbering = [c1, c2, c3]
        } else if(heading.tagName === 'H4') {
            c5 = c6 = 0
            c4++
            numbering = [c1, c2, c3, c4]
        } else if(heading.tagName === 'H5') {
            c6 = 0
            c5++
            numbering = [c1, c2, c3, c4, c5]
        } else if(heading.tagName === 'H6') {
            c6++
            numbering = [c1, c2, c3, c4, c5, c6]
        }

        if(numbering) {
            numbering.splice(0, args.startNumberingAtLevel-1)
            heading.numbering = numbering.join('.')
        }
    })

    return DOMElement
}

function extractHeadings(DOMElement) {
    var tmpMatch, headings = [];

    DOMElement.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(function(heading) {
        if((tmpMatch = heading.tagName.match(/^H(\d+)$/)) && !heading.classList.contains('no-toc-listing')) {
            headings.push({
                level: parseInt(tmpMatch[1]),
                content: heading.innerText,
                el: heading,
                numbering: heading.numbering
            })
        }
    });

    return headings;
}

function repairHierarchy(headings) {
    var result = [],
        currentLevel = 1

    headings.forEach((heading) => {
        let missingLevels = (heading.level - currentLevel)

        for(let i=0; missingLevels>1; missingLevels--) {
            result.push(missingLevelWaring(++currentLevel))
        }

        result.push(heading)

        if(missingLevels > 0) {
            currentLevel++
        } else if(missingLevels < 0) {
            currentLevel--
        }
    })

    return result
}

function TOCFromDOMElement(DOMElement, args) {
    args = args || {}
    var headings = repairHierarchy(extractHeadings(annotateHeadingNumbering(DOMElement, args))),
        result = document.createElement('ol'),
        currentList = result,
        currentLevel = 1

    headings.forEach((heading) => {
        if(currentLevel < heading.level) {
            let tmpList = document.createElement('ol')
            currentList.appendChild(tmpList)
            currentList = tmpList
            currentLevel = currentLevel+1
        }

        while(currentLevel > heading.level) {
            currentList = currentList.parentNode
            currentLevel = currentLevel-1
        }

        currentList.appendChild(TOCEntryFromElement(heading, args))
    })

    return result
}

module.exports = TOCFromDOMElement


/***/ }),

/***/ "../structured-text-editor/lib/zotero-client/index.js":
/*!************************************************************!*\
  !*** ../structured-text-editor/lib/zotero-client/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
    ZoteroOnline: __webpack_require__(/*! ./online */ "../structured-text-editor/lib/zotero-client/online.js")
}

/***/ }),

/***/ "../structured-text-editor/lib/zotero-client/online.js":
/*!*************************************************************!*\
  !*** ../structured-text-editor/lib/zotero-client/online.js ***!
  \*************************************************************/
/***/ ((module) => {

var months = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May.', 'Jun.', 'Jul.', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec']

function getNextLink(result) {
    const linkHeader = result.headers.get('Link')
    const nextMatch = linkHeader.split(',').map(x => x.match(/<(.+?)>; rel="(.+?)"/)).find(x => x[0] && x[1] && x[2] === 'next')

    if(nextMatch && nextMatch[1]) {
        return nextMatch[1]
    }
}

class ZoteroOnline {

    static transformResponseItem(item, lastModVersion) {
        const typeMap = {
            'book': 'Book',
            'webpage': 'Website',
            'encyclopediaArticle': 'Website',
            'blogPost': 'Website',
            'thesis': 'Mastersthesis',
            'conferencePaper': 'Conference',
            'journalArticle': 'Article',
            'bookSection': 'Inbook'
        }

        const getCreatorsByTypet = type => {
            if(!item || !item.data || !item.data.creators || !item.data.creators.filter) {
                return ''
            }

            return item.data.creators
                .filter(c => c)
                .filter(c => c.creatorType === type)
                .filter(c => c.lastName && c.firstName)
                .map(c => `${c.lastName}, ${c.firstName}`)
                .join(' and ')
        }

        const tryToParseYear = date => {
            if(!date) {
                return ''
            }

            try {
                return (new Date(date)).getFullYear().toString()
            } catch(ex) {
                return ''
            }
        }

        const tryToParseMonth = date => {
            if(!date) {
                return ''
            }

            try {
                return months[(new Date(date)).getMonth()]
            } catch(ex) {
                return ''
            }
        }

        const tryToParseDate = date => {
            if(!date) {
                return ''
            }

            try {
                return date.split('T')[0]
            } catch(ex) {
                return ''
            }
        }

        if(item.data) {
            return {
                lookupId: item.data.ISBN || item.data.DOI,
                id: item.key,
                type: typeMap[item.data.itemType] || 'Article',
                referenceSource: `zotero-online-${item.library.type}-${item.library.id}`,
                title: item.data.title,
                author: getCreatorsByTypet('author'),
                pages: item.data.numPages,
                volume: item.data.valume,
                url: item.data.url,
                series: item.data.series,
                publisher: item.data.publisher,
                edition: item.data.edition,
                date: tryToParseDate(item.data.accessDate),
                series: item.data.seriesNumber,
                booktitle: item.data.bookTitle,
                year: tryToParseYear(item.data.date),
                month: tryToParseMonth(item.data.date),
                editor: getCreatorsByTypet('editor'),
                zoteroLastModVersion: lastModVersion
            }
        }
    }

    constructor(apiKey, store) {
        this.apiKey = apiKey
        this.store = store || new Map()
        this.authHeaderOptions = {
            headers: {
                Authorization: `Bearer ${this.apiKey}`
            }
        }
    }

    async getLastModifiedVersion(scope, scopeID) {
        scope = scope === 'users' ? 'user' : 'group'

        return Object.values(this.store.all(true))
            .filter(item => item.id.startsWith(`zotero-online-item-${scopeID}`))
            .map(item => item.zoteroLastModVersion || 0)
            .reduce((a, b) => Math.max(a, b), 0)
    }

    async saveItem(item, scopeID) {
        await Promise.resolve(this.store.set(`zotero-online-item-${scopeID}-${item.id}`, item))
        return item
    }

    saveAllItem(items, lastModVersion, scopeID) {
        return Promise.all(items.map(item => {
            return this.saveItem(ZoteroOnline.transformResponseItem(item, lastModVersion), scopeID)
        }))
    }

    async loadUserInfo() {
        const result = await fetch(`https://api.zotero.org/keys/${this.apiKey}`)
        const body = await result.json()
        this.userID = body.userID
        this.userName = body.username
        return this
    }

    async groups() {
        const result = await fetch(`https://api.zotero.org/users/${this.userID}/groups`, this.authHeaderOptions)
        const body = await result.json()
        this._groups = body.map(r => r.data)
        return this._groups
    }

    async items() {
        await this.requestItems('users', this.userID)

        return Object.values(this.store.all(true))
            .filter(item => item.id.startsWith(`zotero-online-item-${this.userID}`))
    }

    async itemsByGroupID(groupID) {
        await this.requestItems('groups', groupID)

        return Object.values(this.store.all(true))
            .filter(item => item.id.startsWith(`zotero-online-item-${groupID}`))
    }

    async requestItems(scope, scopeID) {
        var [ body, nextLink, lastModVersion] = await this.requestJson(`https://api.zotero.org/${scope}/${scopeID}/items?since=${await this.getLastModifiedVersion(scope, scopeID)}`)
        var nextLink;

        var storedValues = await this.saveAllItem(body, lastModVersion, scopeID)

        while(nextLink) {
            [ body, nextLink ] = await this.requestJson(nextLink)
            storedValues.push(...(await this.saveAllItem(body, lastModVersion, scopeID)))
        }

        return Object.values(storedValues)
    }

    async requestJson(url) {
        const result = await fetch(url, this.authHeaderOptions)

        if(result.status !== 200) {
            throw 'Error while connecting to Zotero API'
        }

        return [
            await result.json(),
            getNextLink(result),
            result.headers.get('Last-Modified-Version')
        ]
    }
}

module.exports = ZoteroOnline

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ contains)
/* harmony export */ });
function contains(parent, child) {
  // $FlowFixMe: hasOwnProperty doesn't seem to work in tests
  var isShadow = Boolean(child.getRootNode && child.getRootNode().host); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (isShadow) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBorders.js":
/*!*****************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBorders.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBorders)
/* harmony export */ });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");



function toNumber(cssValue) {
  return parseFloat(cssValue) || 0;
}

function getBorders(element) {
  var computedStyle = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) ? (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element) : {};
  return {
    top: toNumber(computedStyle.borderTopWidth),
    right: toNumber(computedStyle.borderRightWidth),
    bottom: toNumber(computedStyle.borderBottomWidth),
    left: toNumber(computedStyle.borderLeftWidth)
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBoundingClientRect)
/* harmony export */ });
function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getClippingRect)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getViewportRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js");
/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js");
/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./listScrollParents.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getOffsetParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getDocumentElement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getComputedStyle.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getDecorations_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./getDecorations.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDecorations.js");
/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./contains.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/rectToClientRect.js");













function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport ? (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])((0,_getViewportRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element)) : (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(clippingParent) ? (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_4__["default"])(clippingParent) : (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])((0,_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = (0,_listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__["default"])(element);
  var canEscapeClipping = ['absolute', 'fixed'].indexOf((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__["default"])(element).position) >= 0;
  var clipperElement = canEscapeClipping && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(element) ? (0,_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__["default"])(element) : element;

  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(clipperElement)) {
    return [];
  } // $FlowFixMe: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(clippingParent) && (0,_contains_js__WEBPACK_IMPORTED_MODULE_10__["default"])(clippingParent, clipperElement);
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    var decorations = (0,_getDecorations_js__WEBPACK_IMPORTED_MODULE_11__["default"])((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(clippingParent) ? clippingParent : (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element));
    accRect.top = Math.max(rect.top + decorations.top, accRect.top);
    accRect.right = Math.min(rect.right - decorations.right, accRect.right);
    accRect.bottom = Math.min(rect.bottom - decorations.bottom, accRect.bottom);
    accRect.left = Math.max(rect.left + decorations.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCompositeRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getNodeScroll.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isScrollParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");






 // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(offsetParent);
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(elementOrVirtualElement);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (!isFixed) {
    if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_3__["default"])(documentElement)) {
      scroll = (0,_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent);
    }

    if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_5__.isHTMLElement)(offsetParent)) {
      offsets = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_6__["default"])(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getComputedStyle)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getComputedStyle(element) {
  return (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element).getComputedStyle(element);
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDecorations.js":
/*!*********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDecorations.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDecorations)
/* harmony export */ });
/* harmony import */ var _getBorders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getBorders.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBorders.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");



 // Borders + scrollbars

function getDecorations(element) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var borders = (0,_getBorders_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var isHTML = (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element) === 'html';
  var winScrollBarX = (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);
  var x = element.clientWidth + borders.right;
  var y = element.clientHeight + borders.bottom; // HACK:
  // document.documentElement.clientHeight on iOS reports the height of the
  // viewport including the bottom bar, even if the bottom bar isn't visible.
  // If the difference between window innerHeight and html clientHeight is more
  // than 50, we assume it's a mobile bottom bar and ignore scrollbars.
  // * A 50px thick scrollbar is likely non-existent (macOS is 15px and Windows
  //   is about 17px)
  // * The mobile bar is 114px tall

  if (isHTML && win.innerHeight - element.clientHeight > 50) {
    y = win.innerHeight - borders.bottom;
  }

  return {
    top: isHTML ? 0 : element.clientTop,
    right: // RTL scrollbar (scrolling containers only)
    element.clientLeft > borders.left ? borders.right : // LTR scrollbar
    isHTML ? win.innerWidth - x - winScrollBarX : element.offsetWidth - x,
    bottom: isHTML ? win.innerHeight - y : element.offsetHeight - y,
    left: isHTML ? winScrollBarX : element.clientLeft
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentElement)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function getDocumentElement(element) {
  // $FlowFixMe: assume body is always available
  return ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.ownerDocument : element.document).documentElement;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentRect)
/* harmony export */ });
/* harmony import */ var _getCompositeRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getCompositeRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getDocumentElement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindowScroll.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");




function getDocumentRect(element) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var winScroll = (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var documentRect = (0,_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element), win);
  documentRect.height = Math.max(documentRect.height, win.innerHeight);
  documentRect.width = Math.max(documentRect.width, win.innerWidth);
  documentRect.x = -winScroll.scrollLeft;
  documentRect.y = -winScroll.scrollTop;
  return documentRect;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getHTMLElementScroll)
/* harmony export */ });
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getLayoutRect)
/* harmony export */ });
// Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.
function getLayoutRect(element) {
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeName)
/* harmony export */ });
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeScroll)
/* harmony export */ });
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");




function getNodeScroll(node) {
  if (node === (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node) || !(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node)) {
    return (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node);
  } else {
    return (0,_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node);
  }
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOffsetParent)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getNodeName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isTableElement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js");






function getTrueOffsetParent(element) {
  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
  (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
}

function getOffsetParent(element) {
  var window = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element);
  var offsetParent = getTrueOffsetParent(element); // Find the nearest non-table offsetParent

  while (offsetParent && (0,_isTableElement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) === 'body' && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static') {
    return window;
  }

  return offsetParent || window;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getParentNode)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");


function getParentNode(element) {
  if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element) === 'html') {
    return element;
  }

  return (// $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    // $FlowFixMe: need a better way to handle this...
    element.host || // ShadowRoot detected
    // $FlowFixMe: HTMLElement is a Node
    (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element) // fallback

  );
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getScrollParent)
/* harmony export */ });
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node)) >= 0) {
    // $FlowFixMe: assume body is always available
    return node.ownerDocument.body;
  }

  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node) && (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node)) {
    return node;
  }

  return getScrollParent((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node));
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getViewportRect)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getViewportRect(element) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var visualViewport = win.visualViewport;
  var width = win.innerWidth;
  var height = win.innerHeight; // We don't know which browsers have buggy or odd implementations of this, so
  // for now we're only applying it to iOS to fix the keyboard issue.
  // Investigation required

  if (visualViewport && /iPhone|iPod|iPad/.test(navigator.platform)) {
    width = visualViewport.width;
    height = visualViewport.height;
  }

  return {
    width: width,
    height: height,
    x: 0,
    y: 0
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindow)
/* harmony export */ });
/*:: import type { Window } from '../types'; */

/*:: declare function getWindow(node: Node | Window): Window; */
function getWindow(node) {
  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView : window;
  }

  return node;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScroll)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getWindowScroll(node) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScrollBarX)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)).left + (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).scrollLeft;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isElement": () => (/* binding */ isElement),
/* harmony export */   "isHTMLElement": () => (/* binding */ isHTMLElement)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

/*:: declare function isElement(node: mixed): boolean %checks(node instanceof
  Element); */

function isElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
/*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
  HTMLElement); */


function isHTMLElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}



/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isScrollParent)
/* harmony export */ });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isTableElement)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) >= 0;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ listScrollParents)
/* harmony export */ });
/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getParentNode.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getNodeName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isScrollParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");





function listScrollParents(element, list) {
  if (list === void 0) {
    list = [];
  }

  var scrollParent = (0,_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var isBody = (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollParent) === 'body';
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_3__["default"])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_4__["default"])(target)));
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "afterMain": () => (/* binding */ afterMain),
/* harmony export */   "afterRead": () => (/* binding */ afterRead),
/* harmony export */   "afterWrite": () => (/* binding */ afterWrite),
/* harmony export */   "auto": () => (/* binding */ auto),
/* harmony export */   "basePlacements": () => (/* binding */ basePlacements),
/* harmony export */   "beforeMain": () => (/* binding */ beforeMain),
/* harmony export */   "beforeRead": () => (/* binding */ beforeRead),
/* harmony export */   "beforeWrite": () => (/* binding */ beforeWrite),
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "clippingParents": () => (/* binding */ clippingParents),
/* harmony export */   "end": () => (/* binding */ end),
/* harmony export */   "left": () => (/* binding */ left),
/* harmony export */   "main": () => (/* binding */ main),
/* harmony export */   "modifierPhases": () => (/* binding */ modifierPhases),
/* harmony export */   "placements": () => (/* binding */ placements),
/* harmony export */   "popper": () => (/* binding */ popper),
/* harmony export */   "read": () => (/* binding */ read),
/* harmony export */   "reference": () => (/* binding */ reference),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "start": () => (/* binding */ start),
/* harmony export */   "top": () => (/* binding */ top),
/* harmony export */   "variationPlacements": () => (/* binding */ variationPlacements),
/* harmony export */   "viewport": () => (/* binding */ viewport),
/* harmony export */   "write": () => (/* binding */ write)
/* harmony export */ });
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/index.js":
/*!**************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "afterMain": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterMain),
/* harmony export */   "afterRead": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterRead),
/* harmony export */   "afterWrite": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterWrite),
/* harmony export */   "auto": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.auto),
/* harmony export */   "basePlacements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements),
/* harmony export */   "beforeMain": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeMain),
/* harmony export */   "beforeRead": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeRead),
/* harmony export */   "beforeWrite": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeWrite),
/* harmony export */   "bottom": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom),
/* harmony export */   "clippingParents": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents),
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "end": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.end),
/* harmony export */   "left": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.left),
/* harmony export */   "main": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.main),
/* harmony export */   "modifierPhases": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases),
/* harmony export */   "placements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements),
/* harmony export */   "popper": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper),
/* harmony export */   "popperGenerator": () => (/* binding */ popperGenerator),
/* harmony export */   "read": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.read),
/* harmony export */   "reference": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference),
/* harmony export */   "right": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.right),
/* harmony export */   "start": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.start),
/* harmony export */   "top": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.top),
/* harmony export */   "variationPlacements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements),
/* harmony export */   "viewport": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport),
/* harmony export */   "write": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.write)
/* harmony export */ });
/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/orderModifiers.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/orderModifiers.js");
/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/debounce.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/debounce.js");
/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/validateModifiers.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/validateModifiers.js");
/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/uniqueBy.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/uniqueBy.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/mergeByName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/mergeByName.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, {}, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, {}, state.options, {}, options);
        state.scrollParents = {
          reference: (0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isElement)(reference) ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(reference) : reference.contextElement ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(reference.contextElement) : [],
          popper: (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = (0,_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_3__["default"])((0,_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_4__["default"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (true) {
          var modifiers = (0,_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_5__["default"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          (0,_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_6__["default"])(modifiers);

          if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_0__.auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__["default"])(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: (0,_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__["default"])(reference, (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(popper), state.options.strategy === 'fixed'),
          popper: (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__["default"])(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: (0,_utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__["default"])(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper = /*#__PURE__*/popperGenerator();

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dom-utils/contains.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/within.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/expandToHashMap.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");









 // eslint-disable-next-line import/no-unused-modules

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.placement);
  var axis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(basePlacement);
  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_2__.left, _enums_js__WEBPACK_IMPORTED_MODULE_2__.right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = state.modifiersData[name + "#persistent"].padding;
  var arrowRect = (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(arrowElement);
  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.top : _enums_js__WEBPACK_IMPORTED_MODULE_2__.left;
  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_2__.right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_4__["default"])(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_5__["default"])(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element,
      _options$padding = options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (true) {
    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!(0,_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
  state.modifiersData[name + "#persistent"] = {
    padding: (0,_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_8__["default"])(typeof padding !== 'number' ? padding : (0,_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_9__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_2__.basePlacements))
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "mapToStyles": () => (/* binding */ mapToStyles)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");





 // eslint-disable-next-line import/no-unused-modules

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsets(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: Math.round(x * dpr) / dpr || 0,
    y: Math.round(y * dpr) / dpr || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive;

  var _roundOffsets = roundOffsets(offsets),
      x = _roundOffsets.x,
      y = _roundOffsets.y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__.left;
  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__.top;
  var win = window;

  if (adaptive) {
    var offsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper);

    if (offsetParent === (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper)) {
      offsetParent = (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper);
    } // $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

    /*:: offsetParent = (offsetParent: Element); */


    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__.top) {
      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom;
      y -= offsetParent.clientHeight - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__.left) {
      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__.right;
      x -= offsetParent.clientWidth - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref3) {
  var state = _ref3.state,
      options = _ref3.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive;

  if (true) {
    var transitionProperty = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, {}, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, {}, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getVariation.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getVariation.js");






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto) {
    return [];
  }

  var oppositePlacement = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(placement);
  return [(0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement), oppositePlacement, (0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [(0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto ? (0,_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);

    var isStartVariation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.start;
    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.top, _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.right : _enums_js__WEBPACK_IMPORTED_MODULE_1__.left : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    }

    var altVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/detectOverflow.js");



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom, _enums_js__WEBPACK_IMPORTED_MODULE_0__.left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "distanceAndSkiddingToXY": () => (/* binding */ distanceAndSkiddingToXY)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");


function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__.placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/computeOffsets.js");


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = (0,_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getAltAxis.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getAltAxis.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/within.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getVariation.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");











function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.placement);
  var variation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement);
  var altAxis = (0,_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__["default"])(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;
    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = popperOffsets[mainAxis] + overflow[mainSide];
    var max = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0,_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;
    var preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(tether ? Math.min(min, tetherMin) : min, offset, tether ? Math.max(max, tetherMax) : max);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;

    var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;

    var _offset = popperOffsets[altAxis];

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var _preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(_min, _offset, _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/index.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/offset.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/flip.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/arrow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/hide.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/detectOverflow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/detectOverflow.js");











var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__["default"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__["default"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__["default"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__["default"]];
var createPopper = /*#__PURE__*/(0,_index_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeAutoPlacement)
/* harmony export */ });
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");





/*:: type OverflowsMap = { [ComputedPlacement]: number }; */

/*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements : _options$allowedAutoP;
  var variation = (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement);
  var placements = (variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements : _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements.filter(function (placement) {
    return (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === variation;
  }) : _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements).filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  }); // $FlowFixMe: Flow seems to have problems with two array unions...

  var overflows = placements.reduce(function (acc, placement) {
    acc[placement] = (0,_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[(0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeOffsets)
/* harmony export */ });
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? (0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) : null;
  var variation = placement ? (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? (0,_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.start:
        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);
        break;

      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.end:
        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ debounce)
/* harmony export */ });
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ detectOverflow)
/* harmony export */ });
/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./computeOffsets.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/computeOffsets.js");
/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rectToClientRect.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergePaddingObject.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./expandToHashMap.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/expandToHashMap.js");








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = (0,_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(typeof padding !== 'number' ? padding : (0,_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements));
  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference : _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = (0,_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])((0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(element) ? element : element.contextElement || (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = (0,_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(referenceElement);
  var popperOffsets = (0,_computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"])({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = (0,_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__["default"])(Object.assign({}, popperRect, {}, popperOffsets));
  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ expandToHashMap)
/* harmony export */ });
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/format.js":
/*!*********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ format)
/* harmony export */ });
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getAltAxis)
/* harmony export */ });
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBasePlacement)
/* harmony export */ });

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getFreshSideObject)
/* harmony export */ });
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getMainAxisFromPlacement)
/* harmony export */ });
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositePlacement)
/* harmony export */ });
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositeVariationPlacement)
/* harmony export */ });
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getVariation)
/* harmony export */ });
function getVariation(placement) {
  return placement.split('-')[1];
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeByName)
/* harmony export */ });
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, {}, current, {
      options: Object.assign({}, existing.options, {}, current.options),
      data: Object.assign({}, existing.data, {}, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergePaddingObject)
/* harmony export */ });
/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");

function mergePaddingObject(paddingObject) {
  return Object.assign({}, (0,_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(), {}, paddingObject);
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ orderModifiers)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rectToClientRect)
/* harmony export */ });
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ uniqueBy)
/* harmony export */ });
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!********************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ validateModifiers)
/* harmony export */ });
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/format.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "../structured-text-editor/node_modules/@popperjs/core/lib/enums.js");


var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    Object.keys(modifier).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

        case 'phase':
          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.indexOf(modifier.phase) < 0) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (typeof modifier.effect !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (!Array.isArray(modifier.requires)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

/***/ }),

/***/ "../structured-text-editor/node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ within)
/* harmony export */ });
function within(min, value, max) {
  return Math.max(min, Math.min(value, max));
}

/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/Builder.js":
/*!************************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/Builder.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Changeset = __webpack_require__(/*! ./Changeset */ "../structured-text-editor/node_modules/changesets/lib/Changeset.js")
  , Retain = __webpack_require__(/*! ./operations/Retain */ "../structured-text-editor/node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "../structured-text-editor/node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "../structured-text-editor/node_modules/changesets/lib/operations/Insert.js")

function Builder() {
  this.ops = []
  this.addendum = ''
  this.removendum = ''
}

module.exports = Builder

Builder.prototype.keep =
Builder.prototype.retain = function(len) {
  this.ops.push(new Retain(len))
  return this
}

Builder.prototype.delete =
Builder.prototype.skip = function(str) {
  this.removendum += str
  this.ops.push(new Skip(str.length))
  return this
}

Builder.prototype.add =
Builder.prototype.insert = function(str) {
  this.addendum += str
  this.ops.push(new Insert(str.length))
  return this
}

Builder.prototype.end = function() {
  var cs = new Changeset(this.ops)
  cs.addendum = this.addendum
  cs.removendum = this.removendum
  return cs
}


/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/Changeset.js":
/*!**************************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/Changeset.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * A sequence of consecutive operations
 *
 * @param ops.. <Operation> all passed operations will be added to the changeset
 */
function Changeset(ops/*or ops..*/) {
  this.addendum = ""
  this.removendum = ""
  this.inputLength = 0
  this.outputLength = 0

  if(!Array.isArray(ops)) ops = arguments
  for(var i=0; i<ops.length; i++) {
    this.push(ops[i])
    this.inputLength += ops[i].input
    this.outputLength += ops[i].output
  }
}

// True inheritance
Changeset.prototype = Object.create(Array.prototype, {
  constructor: {
    value: Changeset,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
module.exports = Changeset

var TextTransform = __webpack_require__(/*! ./TextTransform */ "../structured-text-editor/node_modules/changesets/lib/TextTransform.js")
  , ChangesetTransform = __webpack_require__(/*! ./ChangesetTransform */ "../structured-text-editor/node_modules/changesets/lib/ChangesetTransform.js")

var Retain = __webpack_require__(/*! ./operations/Retain */ "../structured-text-editor/node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "../structured-text-editor/node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "../structured-text-editor/node_modules/changesets/lib/operations/Insert.js")

var Builder = __webpack_require__(/*! ./Builder */ "../structured-text-editor/node_modules/changesets/lib/Builder.js")

/**
 * Returns an array containing the ops that are within the passed range
 * (only op.input is counted; thus not counting inserts to the range length, yet they are part of the range)
 */
Changeset.prototype.subrange = function(start, len) {
  var range = []
    , op, oplen
    , l=0
  for(var i=0, pos=0; i<this.length && l < len; i++) {
    op = this[i]
    if(op.input+pos >= start) {
      if(op.input) {
        if(op.length != Infinity) oplen = op.length -Math.max(0, start-pos) -Math.max(0, (op.length+pos)-(start+len))
        else oplen = len
        if (oplen !== 0) range.push( op.derive(oplen) ) // (Don't copy over more than len param allows)
      }
      else {
        range.push( op.derive(op.length) )
        oplen = 0
      }
      l += oplen
    }
    pos += op.input
  }
  return range
}

/**
 * Merge two changesets (that are based on the same state!) so that the resulting changseset
 * has the same effect as both orignal ones applied one after the other
 *
 * @param otherCs <Changeset>
 * @param left <boolean> Which op to choose if there's an insert tie (If you use this function in a distributed, synchronous environment, be sure to invert this param on the other site, otherwise it can be omitted safely))
 * @returns <Changeset>
 */
Changeset.prototype.merge = function(otherCs, left) {
  if(!(otherCs instanceof Changeset)) {
    throw new Error('Argument must be a #<Changeset>, but received '+otherCs.__proto__.constructor.name)
  }

  if(otherCs.inputLength !== this.outputLength) {
    throw new Error("Changeset lengths for merging don't match! Input length of younger cs: "+otherCs.inputLength+', output length of older cs:'+this.outputLength)
  }

  var newops = []
    , addPtr1 = 0
    , remPtr1 = 0
    , addPtr2 = 0
    , remPtr2 = 0
    , newaddendum = ''
    , newremovendum = ''

  zip(this, otherCs, function(op1, op2) {
    // console.log(newops)
    // console.log(op1, op2)

    // I'm deleting something -- the other cs can't know that, so just overtake my op
    if(op1 && !op1.output) {
      newops.push(op1.merge().clone())
      newremovendum += this.removendum.substr(remPtr1, op1.length) // overtake added chars
      remPtr1 += op1.length
      op1.length = 0 // don't gimme that one again.
      return
    }

    // op2 is an insert
    if(op2 && !op2.input) {
      newops.push(op2.merge().clone())
      newaddendum += otherCs.addendum.substr(addPtr2, op2.length) // overtake added chars
      addPtr2 += op2.length
      op2.length = 0 // don't gimme that one again.
      return
    }

    // op2 is either a retain or a skip
    if(op2 && op2.input && op1) {
      // op2 retains whatever we do here (retain or insert), so just clone my op
      if(op2.output) {
        newops.push(op1.merge(op2).clone())
        if(!op1.input) { // overtake addendum
          newaddendum += this.addendum.substr(addPtr1, op1.length)
          addPtr1 += op1.length
        }
        op1.length = 0 // don't gimme these again
        op2.length = 0
      }else

      // op2 deletes my retain here, so just clone the delete
      // (op1 can only be a retain and no skip here, cause we've handled skips above already)
      if(!op2.output && op1.input) {
        newops.push(op2.merge(op1).clone())
        newremovendum += otherCs.removendum.substr(remPtr2, op2.length) // overtake added chars
        remPtr2 += op2.length
        op1.length = 0 // don't gimme these again
        op2.length = 0
      }else

      //otherCs deletes something I added (-1) +1 = 0
      {
        addPtr1 += op1.length
        op1.length = 0 // don't gimme these again
        op2.length = 0
      }
      return
    }

    console.log('oops', arguments)
    throw new Error('oops. This case hasn\'t been considered by the developer (error code: PBCAC)')
  }.bind(this))

  var newCs = new Changeset(newops)
  newCs.addendum = newaddendum
  newCs.removendum = newremovendum

  return newCs
}

/**
 * A private and quite handy function that slices ops into equally long pieces and applies them on a mapping function
 * that can determine the iteration steps by setting op.length to 0 on an op (equals using .next() in a usual iterator)
 */
function zip(cs1, cs2, func) {
  var opstack1 = cs1.map(function(op) {return op.clone()}) // copy ops
    , opstack2 = cs2.map(function(op) {return op.clone()})

  var op2, op1
  while(opstack1.length || opstack2.length) {// iterate through all outstanding ops of this cs
    op1 = opstack1[0]? opstack1[0].clone() : null
    op2 = opstack2[0]? opstack2[0].clone() : null

    if(op1) {
      if(op2) op1 = op1.derive(Math.min(op1.length, op2.length)) // slice 'em into equally long pieces
      if(opstack1[0].length > op1.length) opstack1[0] = opstack1[0].derive(opstack1[0].length-op1.length)
      else opstack1.shift()
    }

    if(op2) {
      if(op1) op2 = op2.derive(Math.min(op1.length, op2.length)) // slice 'em into equally long pieces
      if(opstack2[0].length > op2.length) opstack2[0] = opstack2[0].derive(opstack2[0].length-op2.length)
      else opstack2.shift()
    }

    func(op1, op2)

    if(op1 && op1.length) opstack1.unshift(op1)
    if(op2 && op2.length) opstack2.unshift(op2)
  }
}

/**
 * Inclusion Transformation (IT) or Forward Transformation
 *
 * transforms the operations of the current changeset against the
 * all operations in another changeset in such a way that the
 * effects of the latter are effectively included.
 * This is basically like a applying the other cs on this one.
 *
 * @param otherCs <Changeset>
 * @param left <boolean> Which op to choose if there's an insert tie (If you use this function in a distributed, synchronous environment, be sure to invert this param on the other site, otherwise it can be omitted safely)
 *
 * @returns <Changeset>
 */
Changeset.prototype.transformAgainst = function(otherCs, left) {
  if(!(otherCs instanceof Changeset)) {
    throw new Error('Argument to Changeset#transformAgainst must be a #<Changeset>, but received '+otherCs.__proto__.constructor.name)
  }

  if(this.inputLength != otherCs.inputLength) {
    throw new Error('Can\'t transform changesets with differing inputLength: '+this.inputLength+' and '+otherCs.inputLength)
  }

  var transformation = new ChangesetTransform(this, [new Retain(Infinity)])
  otherCs.forEach(function(op) {
    var nextOp = this.subrange(transformation.pos, Infinity)[0] // next op of this cs
    if(nextOp && !nextOp.input && !op.input) { // two inserts tied; left breaks it
      if (left) transformation.writeOutput(transformation.readInput(nextOp.length))
    }
    op.apply(transformation)
  }.bind(this))

  return transformation.result()
}

/**
 * Exclusion Transformation (ET) or Backwards Transformation
 *
 * transforms all operations in the current changeset against the operations
 * in another changeset in such a way that the impact of the latter are effectively excluded
 *
 * @param changeset <Changeset> the changeset to substract from this one
 * @param left <boolean> Which op to choose if there's an insert tie (If you use this function in a distributed, synchronous environment, be sure to invert this param on the other site, otherwise it can be omitted safely)
 * @returns <Changeset>
 */
Changeset.prototype.substract = function(changeset, left) {
  // The current operations assume that the changes in
  // `changeset` happened before, so for each of those ops
  // we create an operation that undoes its effect and
  // transform all our operations on top of the inverse changes
  return this.transformAgainst(changeset.invert(), left)
}

/**
 * Returns the inverse Changeset of the current one
 *
 * Changeset.invert().apply(Changeset.apply(document)) == document
 */
Changeset.prototype.invert = function() {
  // invert all ops
  var newCs = new Changeset(this.map(function(op) {
    return op.invert()
  }))

  // removendum becomes addendum and vice versa
  newCs.addendum = this.removendum
  newCs.removendum = this.addendum

  return newCs
}

/**
 * Applies this changeset on a text
 */
Changeset.prototype.apply = function(input) {
  // pre-requisites
  if(input.length != this.inputLength) throw new Error('Input length doesn\'t match expected length. expected: '+this.inputLength+'; actual: '+input.length)

  var operation = new TextTransform(input, this.addendum, this.removendum)

  this.forEach(function(op) {
    // each Operation has access to all pointers as well as the input, addendum and removendum (the latter are immutable)
    op.apply(operation)
  }.bind(this))

  return operation.result()
}

/**
 * Returns an array of strings describing this changeset's operations
 */
Changeset.prototype.inspect = function() {
  var j = 0
  return this.map(function(op) {
    var string = ''

    if(!op.input) { // if Insert
      string = this.addendum.substr(j,op.length)
      j += op.length
      return string
    }

    for(var i=0; i<op.length; i++) string += op.symbol
    return string
  }.bind(this)).join('')
}

/**
 * Serializes the given changeset in order to return a (hopefully) more compact representation
 * than json that can be sent through a network or stored in a database
 *
 * Numbers are converted to the base 36, unsafe chars in the text are urlencoded
 *
 * @param cs <Changeset> The changeset to be serialized
 * @returns <String> The serialized changeset
 */
Changeset.prototype.pack = function() {
  var packed = this.map(function(op) {
    return op.pack()
  }).join('')

  var addendum = this.addendum.replace(/%/g, '%25').replace(/\|/g, '%7C')
    , removendum = this.removendum.replace(/%/g, '%25').replace(/\|/g, '%7C')
  return packed+'|'+addendum+'|'+removendum
}
Changeset.prototype.toString = function() {
  return this.pack()
}

/**
 * Unserializes the output of cs.text.Changeset#toString()
 *
 * @param packed <String> The serialized changeset
 * @param <cs.Changeset>
 */
Changeset.unpack = function(packed) {
  if(packed == '') throw new Error('Cannot unpack from empty string')
  var components = packed.split('|')
    , opstring = components[0]
    , addendum = components[1].replace(/%7c/gi, '|').replace(/%25/g, '%')
    , removendum = components[2].replace(/%7c/gi, '|').replace(/%25/g, '%')

  var matches = opstring.match(/[=+-]([^=+-])+/g)
  if(!matches) throw new Error('Cannot unpack invalidly serialized op string')

  var ops = []
  matches.forEach(function(s) {
    var symbol = s.substr(0,1)
      , data = s.substr(1)
    if(Skip.prototype.symbol == symbol) return ops.push(Skip.unpack(data))
    if(Insert.prototype.symbol == symbol) return ops.push(Insert.unpack(data))
    if(Retain.prototype.symbol == symbol) return ops.push(Retain.unpack(data))
    throw new Error('Invalid changeset representation passed to Changeset.unpack')
  })

  var cs = new Changeset(ops)
  cs.addendum = addendum
  cs.removendum = removendum

  return cs
}

Changeset.create = function() {
  return new Builder
}

/**
 * Returns a Changeset containing the operations needed to transform text1 into text2
 *
 * @param text1 <String>
 * @param text2 <String>
 */
Changeset.fromDiff = function(diff) {
  /**
   * The data structure representing a diff is an array of tuples:
   * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
   */
  var DIFF_DELETE = -1;
  var DIFF_INSERT = 1;
  var DIFF_EQUAL = 0;

  var ops = []
    , removendum = ''
    , addendum = ''

  diff.forEach(function(d) {
    if (DIFF_DELETE == d[0]) {
      ops.push(new Skip(d[1].length))
      removendum += d[1]
    }

    if (DIFF_INSERT == d[0]) {
      ops.push(new Insert(d[1].length))
      addendum += d[1]
    }

    if(DIFF_EQUAL == d[0]) {
      ops.push(new Retain(d[1].length))
    }
  })

  var cs = new Changeset(ops)
  cs.addendum = addendum
  cs.removendum = removendum
  return cs
}


/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/ChangesetTransform.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/ChangesetTransform.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational ChangesetTransform (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Retain = __webpack_require__(/*! ./operations/Retain */ "../structured-text-editor/node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "../structured-text-editor/node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "../structured-text-editor/node_modules/changesets/lib/operations/Insert.js")
  , Changeset = __webpack_require__(/*! ./Changeset */ "../structured-text-editor/node_modules/changesets/lib/Changeset.js")


function ChangesetTransform(inputCs, addendum) {
  this.output = []
  this.addendum = addendum
  this.newRemovendum = ''
  this.newAddendum = ''

  this.cs = inputCs
  this.pos = 0
  this.addendumPointer = 0
  this.removendumPointer = 0
}
module.exports = ChangesetTransform

ChangesetTransform.prototype.readInput = function (len) {
  var ret = this.cs.subrange(this.pos, len)
  this.pos += len
  return ret
}

ChangesetTransform.prototype.readAddendum = function (len) {
  //return [new Retain(len)]
  var ret = this.subrange(this.addendum, this.addendumPointer, len)
  this.addendumPointer += len
  return ret
}

ChangesetTransform.prototype.writeRemovendum = function (range) {
  range
    .filter(function(op) {return !op.output})
    .forEach(function(op) {
      this.removendumPointer += op.length
    }.bind(this))
}

ChangesetTransform.prototype.writeOutput = function (range) {
  this.output = this.output.concat(range)
  range
    .filter(function(op) {return !op.output})
    .forEach(function(op) {
      this.newRemovendum += this.cs.removendum.substr(this.removendumPointer, op.length)
      this.removendumPointer += op.length
    }.bind(this))
}

ChangesetTransform.prototype.subrange = function (range, start, len) {
  if(len) return this.cs.subrange.call(range, start, len)
  else return range.filter(function(op){ return !op.input})
}

ChangesetTransform.prototype.result = function() {
  this.writeOutput(this.readInput(Infinity))
  var newCs = new Changeset(this.output)
  newCs.addendum = this.cs.addendum
  newCs.removendum = this.newRemovendum
  return newCs
}


/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/Operator.js":
/*!*************************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/Operator.js ***!
  \*************************************************************************/
/***/ ((module) => {

function Operator() {
}

module.exports = Operator

Operator.prototype.clone = function() {
  return this.derive(this.length)
}

Operator.prototype.derive = function(len) {
  return new (this.constructor)(len)
}

Operator.prototype.pack = function() {
  return this.symbol + (this.length).toString(36)
}


/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/TextTransform.js":
/*!******************************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/TextTransform.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational Apply (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Retain = __webpack_require__(/*! ./operations/Retain */ "../structured-text-editor/node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "../structured-text-editor/node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "../structured-text-editor/node_modules/changesets/lib/operations/Insert.js")
  , Insert = __webpack_require__(/*! ./Changeset */ "../structured-text-editor/node_modules/changesets/lib/Changeset.js")


function TextTransform(input, addendum, removendum) {
  this.output = ''

  this.input = input
  this.addendum = addendum
  this.removendum = removendum
  this.pos = 0
  this.addPos = 0
  this.remPos = 0
}
module.exports = TextTransform

TextTransform.prototype.readInput = function (len) {
  var ret = this.input.substr(this.pos, len)
  this.pos += len
  return ret
}

TextTransform.prototype.readAddendum = function (len) {
  var ret = this.addendum.substr(this.addPos, len)
  this.addPos += len
  return ret
}

TextTransform.prototype.writeRemovendum = function (range) {
  //var expected = this.removendum.substr(this.remPos, range.length)
  //if(range != expected) throw new Error('Removed chars don\'t match removendum. expected: '+expected+'; actual: '+range)
  this.remPos += range.length
}

TextTransform.prototype.writeOutput = function (range) {
  this.output += range
}

TextTransform.prototype.subrange = function (range, start, len) {
  return range.substr(start, len)
}

TextTransform.prototype.result = function() {
  this.writeOutput(this.readInput(Infinity))
  return this.output
}


/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/index.js":
/*!**********************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Changeset = __webpack_require__(/*! ./Changeset */ "../structured-text-editor/node_modules/changesets/lib/Changeset.js")
  , Retain = __webpack_require__(/*! ./operations/Retain */ "../structured-text-editor/node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "../structured-text-editor/node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "../structured-text-editor/node_modules/changesets/lib/operations/Insert.js")

exports.Operator = __webpack_require__(/*! ./Operator */ "../structured-text-editor/node_modules/changesets/lib/Operator.js")
exports.Changeset = Changeset
exports.Insert = Insert
exports.Retain = Retain
exports.Skip = Skip

if('undefined' != typeof window) window.changesets = exports

/**
 * Serializes the given changeset in order to return a (hopefully) more compact representation
 * that can be sent through a network or stored in a database
 * @alias cs.text.Changeset#pack
 */
exports.pack = function(cs) {
  return cs.pack()
}

/**
 * Unserializes the output of cs.text.pack
 * @alias cs.text.Changeset.unpack
 */
exports.unpack = function(packed) {
  return Changeset.unpack(packed)
}




/**
 * shareJS ot type API sepc support
 */

exports.name = 'changesets'
exports.url = 'https://github.com/marcelklehr/changesets'

/**
 * create([initialText])
 *
 * creates a snapshot (optionally with supplied intial text)
 */
exports.create = function(initText) {
  return initText || ''
}

/**
 * Apply a changeset on a snapshot creating a new one
 *
 * The old snapshot object mustn't be used after calling apply on it
 * returns the resulting
 */
exports.apply = function(snapshot, op) {
  op = exports.unpack(op)
  return op.apply(snapshot)
}

/**
 * Transform changeset1 against changeset2
 */
exports.transform = function (op1, op2, side) {
  op1 = exports.unpack(op1)
  op2 = exports.unpack(op2)
  return exports.pack(op1.transformAgainst(op2, ('left'==side)))
}

/**
 * Merge two changesets into one
 */
exports.compose = function (op1, op2) {
  op1 = exports.unpack(op1)
  op2 = exports.unpack(op2)
  return exports.pack(op1.merge(op2))
}

/**
 * Invert a changeset
 */
exports.invert = function(op) {
  return exports.pack(exports.unpack(op).invert())
}


/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/operations/Insert.js":
/*!**********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/operations/Insert.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Operator = __webpack_require__(/*! ../Operator */ "../structured-text-editor/node_modules/changesets/lib/Operator.js")

/**
 * Insert Operator
 * Defined by:
 * - length
 * - input=0
 * - output=length
 *
 * @param length <Number> How many chars to be inserted
 */
function Insert(length) {
  this.length = length
  this.input = 0
  this.output = length
}

// True inheritance
Insert.prototype = Object.create(Operator.prototype, {
  constructor: {
    value: Insert,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
module.exports = Insert
Insert.prototype.symbol = '+'

var Skip = __webpack_require__(/*! ./Skip */ "../structured-text-editor/node_modules/changesets/lib/operations/Skip.js")
  , Retain = __webpack_require__(/*! ./Retain */ "../structured-text-editor/node_modules/changesets/lib/operations/Retain.js")

Insert.prototype.apply = function(t) {
  t.writeOutput(t.readAddendum(this.output))
}

Insert.prototype.merge = function() {
  return this
}

Insert.prototype.invert = function() {
  return new Skip(this.length)
}

Insert.unpack = function(data) {
  return new Insert(parseInt(data, 36))
}


/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/operations/Retain.js":
/*!**********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/operations/Retain.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Operator = __webpack_require__(/*! ../Operator */ "../structured-text-editor/node_modules/changesets/lib/Operator.js")

/**
 * Retain Operator
 * Defined by:
 * - length
 * - input=output=length
 *
 * @param length <Number> How many chars to retain
 */
function Retain(length) {
  this.length = length
  this.input = length
  this.output = length
}

// True inheritance
Retain.prototype = Object.create(Operator.prototype, {
  constructor: {
    value: Retain,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
module.exports = Retain
Retain.prototype.symbol = '='

Retain.prototype.apply = function(t) {
  t.writeOutput(t.readInput(this.input))
}

Retain.prototype.invert = function() {
  return this
}

Retain.prototype.merge = function(op2) {
  return this
}

Retain.unpack = function(data) {
  return new Retain(parseInt(data, 36))
}


/***/ }),

/***/ "../structured-text-editor/node_modules/changesets/lib/operations/Skip.js":
/*!********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/changesets/lib/operations/Skip.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Operator = __webpack_require__(/*! ../Operator */ "../structured-text-editor/node_modules/changesets/lib/Operator.js")

/**
 * Skip Operator
 * Defined by:
 * - length
 * - input=length
 * - output=0
 *
 * @param length <Number> How many chars to be Skip
 */
function Skip(length) {
  this.length = length
  this.input = length
  this.output = 0
}

// True inheritance
Skip.prototype = Object.create(Operator.prototype, {
  constructor: {
    value: Skip,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
module.exports = Skip
Skip.prototype.symbol = '-'

var Insert = __webpack_require__(/*! ./Insert */ "../structured-text-editor/node_modules/changesets/lib/operations/Insert.js")
  , Retain = __webpack_require__(/*! ./Retain */ "../structured-text-editor/node_modules/changesets/lib/operations/Retain.js")
  , Changeset = __webpack_require__(/*! ../Changeset */ "../structured-text-editor/node_modules/changesets/lib/Changeset.js")

Skip.prototype.apply = function(t) {
  var input = t.readInput(this.input)
  t.writeRemovendum(input)
  t.writeOutput(t.subrange(input, 0, this.output)) // retain Inserts in my range
}

Skip.prototype.merge = function(op2) {
  return this
}

Skip.prototype.invert = function() {
  return new Insert(this.length)
}

Skip.unpack = function(data) {
  return new Skip(parseInt(data, 36))
}


/***/ }),

/***/ "../structured-text-editor/node_modules/diff_match_patch/lib/diff_match_patch.js":
/*!***************************************************************************************!*\
  !*** ../structured-text-editor/node_modules/diff_match_patch/lib/diff_match_patch.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/**
 * Diff Match and Patch
 *
 * Copyright 2006 Google Inc.
 * http://code.google.com/p/google-diff-match-patch/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 * @author fraser@google.com (Neil Fraser)
 */

/**
 * Class containing the diff, match and patch methods.
 * @constructor
 */
function diff_match_patch() {

  // Defaults.
  // Redefine these in your program to override the defaults.

  // Number of seconds to map a diff before giving up (0 for infinity).
  this.Diff_Timeout = 1.0;
  // Cost of an empty edit operation in terms of edit characters.
  this.Diff_EditCost = 4;
  // The size beyond which the double-ended diff activates.
  // Double-ending is twice as fast, but less accurate.
  this.Diff_DualThreshold = 32;
  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
  this.Match_Threshold = 0.5;
  // How far to search for a match (0 = exact location, 1000+ = broad match).
  // A match this many characters away from the expected location will add
  // 1.0 to the score (0.0 is a perfect match).
  this.Match_Distance = 1000;
  // When deleting a large block of text (over ~64 characters), how close does
  // the contents have to match the expected contents. (0.0 = perfection,
  // 1.0 = very loose).  Note that Match_Threshold controls how closely the
  // end points of a delete need to match.
  this.Patch_DeleteThreshold = 0.5;
  // Chunk size for context length.
  this.Patch_Margin = 4;

  /**
   * Compute the number of bits in an int.
   * The normal answer for JavaScript is 32.
   * @return {number} Max bits
   */
  function getMaxBits() {
    var maxbits = 0;
    var oldi = 1;
    var newi = 2;
    while (oldi != newi) {
      maxbits++;
      oldi = newi;
      newi = newi << 1;
    }
    return maxbits;
  }
  // How many bits in a number?
  this.Match_MaxBits = getMaxBits();
}


//  DIFF FUNCTIONS


/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */
var DIFF_DELETE = -1;
var DIFF_INSERT = 1;
var DIFF_EQUAL = 0;


/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} opt_checklines Optional speedup flag.  If present and false,
 *     then don't run a line-level diff first to identify the changed areas.
 *     Defaults to true, which does a faster, slightly less optimal diff
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 */
diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines) {
  // Check for null inputs.
  if (text1 == null || text2 == null) {
    throw new Error('Null input. (diff_main)');
  }

  // Check for equality (speedup).
  if (text1 == text2) {
    return [[DIFF_EQUAL, text1]];
  }

  if (typeof opt_checklines == 'undefined') {
    opt_checklines = true;
  }
  var checklines = opt_checklines;

  // Trim off common prefix (speedup).
  var commonlength = this.diff_commonPrefix(text1, text2);
  var commonprefix = text1.substring(0, commonlength);
  text1 = text1.substring(commonlength);
  text2 = text2.substring(commonlength);

  // Trim off common suffix (speedup).
  commonlength = this.diff_commonSuffix(text1, text2);
  var commonsuffix = text1.substring(text1.length - commonlength);
  text1 = text1.substring(0, text1.length - commonlength);
  text2 = text2.substring(0, text2.length - commonlength);

  // Compute the diff on the middle block.
  var diffs = this.diff_compute(text1, text2, checklines);

  // Restore the prefix and suffix.
  if (commonprefix) {
    diffs.unshift([DIFF_EQUAL, commonprefix]);
  }
  if (commonsuffix) {
    diffs.push([DIFF_EQUAL, commonsuffix]);
  }
  this.diff_cleanupMerge(diffs);
  return diffs;
};


/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} checklines Speedup flag.  If false, then don't run a
 *     line-level diff first to identify the changed areas.
 *     If true, then run a faster, slightly less optimal diff
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_compute = function(text1, text2, checklines) {
  var diffs;

  if (!text1) {
    // Just add some text (speedup).
    return [[DIFF_INSERT, text2]];
  }

  if (!text2) {
    // Just delete some text (speedup).
    return [[DIFF_DELETE, text1]];
  }

  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  var i = longtext.indexOf(shorttext);
  if (i != -1) {
    // Shorter text is inside the longer text (speedup).
    diffs = [[DIFF_INSERT, longtext.substring(0, i)],
             [DIFF_EQUAL, shorttext],
             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
    // Swap insertions for deletions if diff is reversed.
    if (text1.length > text2.length) {
      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    }
    return diffs;
  }
  longtext = shorttext = null;  // Garbage collect.

  // Check to see if the problem can be split in two.
  var hm = this.diff_halfMatch(text1, text2);
  if (hm) {
    // A half-match was found, sort out the return data.
    var text1_a = hm[0];
    var text1_b = hm[1];
    var text2_a = hm[2];
    var text2_b = hm[3];
    var mid_common = hm[4];
    // Send both pairs off for separate processing.
    var diffs_a = this.diff_main(text1_a, text2_a, checklines);
    var diffs_b = this.diff_main(text1_b, text2_b, checklines);
    // Merge the results.
    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
  }

  // Perform a real diff.
  if (checklines && (text1.length < 100 || text2.length < 100)) {
    // Too trivial for the overhead.
    checklines = false;
  }
  var linearray;
  if (checklines) {
    // Scan the text on a line-by-line basis first.
    var a = this.diff_linesToChars(text1, text2);
    text1 = a[0];
    text2 = a[1];
    linearray = a[2];
  }
  diffs = this.diff_map(text1, text2);
  if (!diffs) {
    // No acceptable result.
    diffs = [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  }
  if (checklines) {
    // Convert the diff back to original text.
    this.diff_charsToLines(diffs, linearray);
    // Eliminate freak matches (e.g. blank lines)
    this.diff_cleanupSemantic(diffs);

    // Rediff any replacement blocks, this time character-by-character.
    // Add a dummy entry at the end.
    diffs.push([DIFF_EQUAL, '']);
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = '';
    var text_insert = '';
    while (pointer < diffs.length) {
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          break;
        case DIFF_EQUAL:
          // Upon reaching an equality, check for prior redundancies.
          if (count_delete >= 1 && count_insert >= 1) {
            // Delete the offending records and add the merged ones.
            var a = this.diff_main(text_delete, text_insert, false);
            diffs.splice(pointer - count_delete - count_insert,
                         count_delete + count_insert);
            pointer = pointer - count_delete - count_insert;
            for (var j = a.length - 1; j >= 0; j--) {
              diffs.splice(pointer, 0, a[j]);
            }
            pointer = pointer + a.length;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = '';
          text_insert = '';
          break;
      }
     pointer++;
    }
    diffs.pop();  // Remove the dummy entry at the end.
  }
  return diffs;
};


/**
 * Split two texts into an array of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string|Array.<string>>} Three element Array, containing the
 *     encoded text1, the encoded text2 and the array of unique strings.  The
 *     zeroth element of the array of unique strings is intentionally blank.
 * @private
 */
diff_match_patch.prototype.diff_linesToChars = function(text1, text2) {
  var lineArray = [];  // e.g. lineArray[4] == 'Hello\n'
  var lineHash = {};   // e.g. lineHash['Hello\n'] == 4

  // '\x00' is a valid character, but various debuggers don't like it.
  // So we'll insert a junk entry to avoid generating a null character.
  lineArray[0] = '';

  /**
   * Split a text into an array of strings.  Reduce the texts to a string of
   * hashes where each Unicode character represents one line.
   * Modifies linearray and linehash through being a closure.
   * @param {string} text String to encode.
   * @return {string} Encoded string.
   * @private
   */
  function diff_linesToCharsMunge(text) {
    var chars = '';
    // Walk the text, pulling out a substring for each line.
    // text.split('\n') would would temporarily double our memory footprint.
    // Modifying text would create many large strings to garbage collect.
    var lineStart = 0;
    var lineEnd = -1;
    // Keeping our own length variable is faster than looking it up.
    var lineArrayLength = lineArray.length;
    while (lineEnd < text.length - 1) {
      lineEnd = text.indexOf('\n', lineStart);
      if (lineEnd == -1) {
        lineEnd = text.length - 1;
      }
      var line = text.substring(lineStart, lineEnd + 1);
      lineStart = lineEnd + 1;

      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :
          (lineHash[line] !== undefined)) {
        chars += String.fromCharCode(lineHash[line]);
      } else {
        chars += String.fromCharCode(lineArrayLength);
        lineHash[line] = lineArrayLength;
        lineArray[lineArrayLength++] = line;
      }
    }
    return chars;
  }

  var chars1 = diff_linesToCharsMunge(text1);
  var chars2 = diff_linesToCharsMunge(text2);
  return [chars1, chars2, lineArray];
};


/**
 * Rehydrate the text in a diff from a string of line hashes to real lines of
 * text.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @param {Array.<string>} lineArray Array of unique strings.
 * @private
 */
diff_match_patch.prototype.diff_charsToLines = function(diffs, lineArray) {
  for (var x = 0; x < diffs.length; x++) {
    var chars = diffs[x][1];
    var text = [];
    for (var y = 0; y < chars.length; y++) {
      text[y] = lineArray[chars.charCodeAt(y)];
    }
    diffs[x][1] = text.join('');
  }
};


/**
 * Explore the intersection points between the two texts.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @return {?Array.<Array.<number|string>>} Array of diff tuples or null if no
 *     diff available.
 * @private
 */
diff_match_patch.prototype.diff_map = function(text1, text2) {
  // Don't run for too long.
  var ms_end = (new Date()).getTime() + this.Diff_Timeout * 1000;
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  var max_d = text1_length + text2_length - 1;
  var doubleEnd = this.Diff_DualThreshold * 2 < max_d;
  // JavaScript efficiency note: (x << 32) + y doesn't work since numbers are
  // only 32 bit.  Use x + ',' + y to create a hash instead.
  var v_map1 = [];
  var v_map2 = [];
  var v1 = {};
  var v2 = {};
  v1[1] = 0;
  v2[1] = 0;
  var x, y;
  var footstep;  // Used to track overlapping paths.
  var footsteps = {};
  var done = false;
  // If the total number of characters is odd, then the front path will collide
  // with the reverse path.
  var front = (text1_length + text2_length) % 2;
  for (var d = 0; d < max_d; d++) {
    // Bail out if timeout reached.
    if (this.Diff_Timeout > 0 && (new Date()).getTime() > ms_end) {
      return null;
    }

    // Walk the front path one step.
    v_map1[d] = {};
    for (var k = -d; k <= d; k += 2) {
      if (k == -d || k != d && v1[k - 1] < v1[k + 1]) {
        x = v1[k + 1];
      } else {
        x = v1[k - 1] + 1;
      }
      y = x - k;
      if (doubleEnd) {
        footstep = x + ',' + y;
        if (front && footsteps[footstep] !== undefined) {
          done = true;
        }
        if (!front) {
          footsteps[footstep] = d;
        }
      }
      while (!done && x < text1_length && y < text2_length &&
             text1.charAt(x) == text2.charAt(y)) {
        x++;
        y++;
        if (doubleEnd) {
          footstep = x + ',' + y;
          if (front && footsteps[footstep] !== undefined) {
            done = true;
          }
          if (!front) {
            footsteps[footstep] = d;
          }
        }
      }
      v1[k] = x;
      v_map1[d][x + ',' + y] = true;
      if (x == text1_length && y == text2_length) {
        // Reached the end in single-path mode.
        return this.diff_path1(v_map1, text1, text2);
      } else if (done) {
        // Front path ran over reverse path.
        v_map2 = v_map2.slice(0, footsteps[footstep] + 1);
        var a = this.diff_path1(v_map1, text1.substring(0, x),
                                text2.substring(0, y));
        return a.concat(this.diff_path2(v_map2, text1.substring(x),
                                        text2.substring(y)));
      }
    }

    if (doubleEnd) {
      // Walk the reverse path one step.
      v_map2[d] = {};
      for (var k = -d; k <= d; k += 2) {
        if (k == -d || k != d && v2[k - 1] < v2[k + 1]) {
          x = v2[k + 1];
        } else {
          x = v2[k - 1] + 1;
        }
        y = x - k;
        footstep = (text1_length - x) + ',' + (text2_length - y);
        if (!front && footsteps[footstep] !== undefined) {
          done = true;
        }
        if (front) {
          footsteps[footstep] = d;
        }
        while (!done && x < text1_length && y < text2_length &&
               text1.charAt(text1_length - x - 1) ==
               text2.charAt(text2_length - y - 1)) {
          x++;
          y++;
          footstep = (text1_length - x) + ',' + (text2_length - y);
          if (!front && footsteps[footstep] !== undefined) {
            done = true;
          }
          if (front) {
            footsteps[footstep] = d;
          }
        }
        v2[k] = x;
        v_map2[d][x + ',' + y] = true;
        if (done) {
          // Reverse path ran over front path.
          v_map1 = v_map1.slice(0, footsteps[footstep] + 1);
          var a = this.diff_path1(v_map1, text1.substring(0, text1_length - x),
                                  text2.substring(0, text2_length - y));
          return a.concat(this.diff_path2(v_map2,
                          text1.substring(text1_length - x),
                          text2.substring(text2_length - y)));
        }
      }
    }
  }
  // Number of diffs equals number of characters, no commonality at all.
  return null;
};


/**
 * Work from the middle back to the start to determine the path.
 * @param {Array.<Object>} v_map Array of paths.
 * @param {string} text1 Old string fragment to be diffed.
 * @param {string} text2 New string fragment to be diffed.
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_path1 = function(v_map, text1, text2) {
  var path = [];
  var x = text1.length;
  var y = text2.length;
  /** @type {?number} */
  var last_op = null;
  for (var d = v_map.length - 2; d >= 0; d--) {
    while (1) {
      if (v_map[d][(x - 1) + ',' + y] !== undefined) {
        x--;
        if (last_op === DIFF_DELETE) {
          path[0][1] = text1.charAt(x) + path[0][1];
        } else {
          path.unshift([DIFF_DELETE, text1.charAt(x)]);
        }
        last_op = DIFF_DELETE;
        break;
      } else if (v_map[d][x + ',' + (y - 1)] !== undefined) {
        y--;
        if (last_op === DIFF_INSERT) {
          path[0][1] = text2.charAt(y) + path[0][1];
        } else {
          path.unshift([DIFF_INSERT, text2.charAt(y)]);
        }
        last_op = DIFF_INSERT;
        break;
      } else {
        x--;
        y--;
        if (text1.charAt(x) != text2.charAt(y)) {
          throw new Error('No diagonal.  Can\'t happen. (diff_path1)');
        }
        if (last_op === DIFF_EQUAL) {
          path[0][1] = text1.charAt(x) + path[0][1];
        } else {
          path.unshift([DIFF_EQUAL, text1.charAt(x)]);
        }
        last_op = DIFF_EQUAL;
      }
    }
  }
  return path;
};


/**
 * Work from the middle back to the end to determine the path.
 * @param {Array.<Object>} v_map Array of paths.
 * @param {string} text1 Old string fragment to be diffed.
 * @param {string} text2 New string fragment to be diffed.
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_path2 = function(v_map, text1, text2) {
  var path = [];
  var pathLength = 0;
  var x = text1.length;
  var y = text2.length;
  /** @type {?number} */
  var last_op = null;
  for (var d = v_map.length - 2; d >= 0; d--) {
    while (1) {
      if (v_map[d][(x - 1) + ',' + y] !== undefined) {
        x--;
        if (last_op === DIFF_DELETE) {
          path[pathLength - 1][1] += text1.charAt(text1.length - x - 1);
        } else {
          path[pathLength++] =
              [DIFF_DELETE, text1.charAt(text1.length - x - 1)];
        }
        last_op = DIFF_DELETE;
        break;
      } else if (v_map[d][x + ',' + (y - 1)] !== undefined) {
        y--;
        if (last_op === DIFF_INSERT) {
          path[pathLength - 1][1] += text2.charAt(text2.length - y - 1);
        } else {
          path[pathLength++] =
              [DIFF_INSERT, text2.charAt(text2.length - y - 1)];
        }
        last_op = DIFF_INSERT;
        break;
      } else {
        x--;
        y--;
        if (text1.charAt(text1.length - x - 1) !=
            text2.charAt(text2.length - y - 1)) {
          throw new Error('No diagonal.  Can\'t happen. (diff_path2)');
        }
        if (last_op === DIFF_EQUAL) {
          path[pathLength - 1][1] += text1.charAt(text1.length - x - 1);
        } else {
          path[pathLength++] =
              [DIFF_EQUAL, text1.charAt(text1.length - x - 1)];
        }
        last_op = DIFF_EQUAL;
      }
    }
  }
  return path;
};


/**
 * Determine the common prefix of two strings
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */
diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerstart = 0;
  while (pointermin < pointermid) {
    if (text1.substring(pointerstart, pointermid) ==
        text2.substring(pointerstart, pointermid)) {
      pointermin = pointermid;
      pointerstart = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Determine the common suffix of two strings
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */
diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.charAt(text1.length - 1) !=
                          text2.charAt(text2.length - 1)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerend = 0;
  while (pointermin < pointermid) {
    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
      pointermin = pointermid;
      pointerend = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {?Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 */
diff_match_patch.prototype.diff_halfMatch = function(text1, text2) {
  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  if (longtext.length < 10 || shorttext.length < 1) {
    return null;  // Pointless.
  }
  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Does a substring of shorttext exist within longtext such that the substring
   * is at least half the length of longtext?
   * Closure, but does not reference any external variables.
   * @param {string} longtext Longer string.
   * @param {string} shorttext Shorter string.
   * @param {number} i Start index of quarter length substring within longtext
   * @return {?Array.<string>} Five element Array, containing the prefix of
   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
   *     of shorttext and the common middle.  Or null if there was no match.
   * @private
   */
  function diff_halfMatchI(longtext, shorttext, i) {
    // Start with a 1/4 length substring at position i as a seed.
    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    var j = -1;
    var best_common = '';
    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),
                                               shorttext.substring(j));
      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),
                                               shorttext.substring(0, j));
      if (best_common.length < suffixLength + prefixLength) {
        best_common = shorttext.substring(j - suffixLength, j) +
            shorttext.substring(j, j + prefixLength);
        best_longtext_a = longtext.substring(0, i - suffixLength);
        best_longtext_b = longtext.substring(i + prefixLength);
        best_shorttext_a = shorttext.substring(0, j - suffixLength);
        best_shorttext_b = shorttext.substring(j + prefixLength);
      }
    }
    if (best_common.length >= longtext.length / 2) {
      return [best_longtext_a, best_longtext_b,
              best_shorttext_a, best_shorttext_b, best_common];
    } else {
      return null;
    }
  }

  // First check if the second quarter is the seed for a half-match.
  var hm1 = diff_halfMatchI(longtext, shorttext,
                            Math.ceil(longtext.length / 4));
  // Check again based on the third quarter.
  var hm2 = diff_halfMatchI(longtext, shorttext,
                            Math.ceil(longtext.length / 2));
  var hm;
  if (!hm1 && !hm2) {
    return null;
  } else if (!hm2) {
    hm = hm1;
  } else if (!hm1) {
    hm = hm2;
  } else {
    // Both matched.  Select the longest.
    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
  }

  // A half-match was found, sort out the return data.
  var text1_a, text1_b, text2_a, text2_b;
  if (text1.length > text2.length) {
    text1_a = hm[0];
    text1_b = hm[1];
    text2_a = hm[2];
    text2_b = hm[3];
  } else {
    text2_a = hm[0];
    text2_b = hm[1];
    text1_a = hm[2];
    text1_b = hm[3];
  }
  var mid_common = hm[4];
  return [text1_a, text1_b, text2_a, text2_b, mid_common];
};


/**
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  var lastequality = null;  // Always equal to equalities[equalitiesLength-1][1]
  var pointer = 0;  // Index of current position.
  // Number of characters that changed prior to the equality.
  var length_changes1 = 0;
  // Number of characters that changed after the equality.
  var length_changes2 = 0;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // equality found
      equalities[equalitiesLength++] = pointer;
      length_changes1 = length_changes2;
      length_changes2 = 0;
      lastequality = diffs[pointer][1];
    } else {  // an insertion or deletion
      length_changes2 += diffs[pointer][1].length;
      if (lastequality !== null && (lastequality.length <= length_changes1) &&
          (lastequality.length <= length_changes2)) {
        // Duplicate record
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     [DIFF_DELETE, lastequality]);
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        // Throw away the equality we just deleted.
        equalitiesLength--;
        // Throw away the previous equality (it needs to be reevaluated).
        equalitiesLength--;
        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
        length_changes1 = 0;  // Reset the counters.
        length_changes2 = 0;
        lastequality = null;
        changes = true;
      }
    }
    pointer++;
  }
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
  this.diff_cleanupSemanticLossless(diffs);
};


/**
 * Look for single edits surrounded on both sides by equalities
 * which can be shifted sideways to align the edit to a word boundary.
 * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {
  // Define some regex patterns for matching boundaries.
  var punctuation = /[^a-zA-Z0-9]/;
  var whitespace = /\s/;
  var linebreak = /[\r\n]/;
  var blanklineEnd = /\n\r?\n$/;
  var blanklineStart = /^\r?\n\r?\n/;

  /**
   * Given two strings, compute a score representing whether the internal
   * boundary falls on logical boundaries.
   * Scores range from 5 (best) to 0 (worst).
   * Closure, makes reference to regex patterns defined above.
   * @param {string} one First string.
   * @param {string} two Second string.
   * @return {number} The score.
   */
  function diff_cleanupSemanticScore(one, two) {
    if (!one || !two) {
      // Edges are the best.
      return 5;
    }

    // Each port of this function behaves slightly differently due to
    // subtle differences in each language's definition of things like
    // 'whitespace'.  Since this function's purpose is largely cosmetic,
    // the choice has been made to use each language's native features
    // rather than force total conformity.
    var score = 0;
    // One point for non-alphanumeric.
    if (one.charAt(one.length - 1).match(punctuation) ||
        two.charAt(0).match(punctuation)) {
      score++;
      // Two points for whitespace.
      if (one.charAt(one.length - 1).match(whitespace) ||
          two.charAt(0).match(whitespace)) {
        score++;
        // Three points for line breaks.
        if (one.charAt(one.length - 1).match(linebreak) ||
            two.charAt(0).match(linebreak)) {
          score++;
          // Four points for blank lines.
          if (one.match(blanklineEnd) || two.match(blanklineStart)) {
            score++;
          }
        }
      }
    }
    return score;
  }

  var pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      var equality1 = diffs[pointer - 1][1];
      var edit = diffs[pointer][1];
      var equality2 = diffs[pointer + 1][1];

      // First, shift the edit as far left as possible.
      var commonOffset = this.diff_commonSuffix(equality1, edit);
      if (commonOffset) {
        var commonString = edit.substring(edit.length - commonOffset);
        equality1 = equality1.substring(0, equality1.length - commonOffset);
        edit = commonString + edit.substring(0, edit.length - commonOffset);
        equality2 = commonString + equality2;
      }

      // Second, step character by character right, looking for the best fit.
      var bestEquality1 = equality1;
      var bestEdit = edit;
      var bestEquality2 = equality2;
      var bestScore = diff_cleanupSemanticScore(equality1, edit) +
          diff_cleanupSemanticScore(edit, equality2);
      while (edit.charAt(0) === equality2.charAt(0)) {
        equality1 += edit.charAt(0);
        edit = edit.substring(1) + equality2.charAt(0);
        equality2 = equality2.substring(1);
        var score = diff_cleanupSemanticScore(equality1, edit) +
            diff_cleanupSemanticScore(edit, equality2);
        // The >= encourages trailing rather than leading whitespace on edits.
        if (score >= bestScore) {
          bestScore = score;
          bestEquality1 = equality1;
          bestEdit = edit;
          bestEquality2 = equality2;
        }
      }

      if (diffs[pointer - 1][1] != bestEquality1) {
        // We have an improvement, save it back to the diff.
        if (bestEquality1) {
          diffs[pointer - 1][1] = bestEquality1;
        } else {
          diffs.splice(pointer - 1, 1);
          pointer--;
        }
        diffs[pointer][1] = bestEdit;
        if (bestEquality2) {
          diffs[pointer + 1][1] = bestEquality2;
        } else {
          diffs.splice(pointer + 1, 1);
          pointer--;
        }
      }
    }
    pointer++;
  }
};


/**
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  var lastequality = '';  // Always equal to equalities[equalitiesLength-1][1]
  var pointer = 0;  // Index of current position.
  // Is there an insertion operation before the last equality.
  var pre_ins = false;
  // Is there a deletion operation before the last equality.
  var pre_del = false;
  // Is there an insertion operation after the last equality.
  var post_ins = false;
  // Is there a deletion operation after the last equality.
  var post_del = false;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // equality found
      if (diffs[pointer][1].length < this.Diff_EditCost &&
          (post_ins || post_del)) {
        // Candidate found.
        equalities[equalitiesLength++] = pointer;
        pre_ins = post_ins;
        pre_del = post_del;
        lastequality = diffs[pointer][1];
      } else {
        // Not a candidate, and can never become one.
        equalitiesLength = 0;
        lastequality = '';
      }
      post_ins = post_del = false;
    } else {  // an insertion or deletion
      if (diffs[pointer][0] == DIFF_DELETE) {
        post_del = true;
      } else {
        post_ins = true;
      }
      /*
       * Five types to be split:
       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
       * <ins>A</ins>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<ins>C</ins>
       * <ins>A</del>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<del>C</del>
       */
      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||
                           ((lastequality.length < this.Diff_EditCost / 2) &&
                            (pre_ins + pre_del + post_ins + post_del) == 3))) {
        // Duplicate record
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     [DIFF_DELETE, lastequality]);
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        equalitiesLength--;  // Throw away the equality we just deleted;
        lastequality = '';
        if (pre_ins && pre_del) {
          // No changes made which could affect previous entry, keep going.
          post_ins = post_del = true;
          equalitiesLength = 0;
        } else {
          equalitiesLength--;  // Throw away the previous equality;
          pointer = equalitiesLength > 0 ?
              equalities[equalitiesLength - 1] : -1;
          post_ins = post_del = false;
        }
        changes = true;
      }
    }
    pointer++;
  }

  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {
  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  var commonlength;
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete !== 0 || count_insert !== 0) {
          if (count_delete !== 0 && count_insert !== 0) {
            // Factor out any common prefixies.
            commonlength = this.diff_commonPrefix(text_insert, text_delete);
            if (commonlength !== 0) {
              if ((pointer - count_delete - count_insert) > 0 &&
                  diffs[pointer - count_delete - count_insert - 1][0] ==
                  DIFF_EQUAL) {
                diffs[pointer - count_delete - count_insert - 1][1] +=
                    text_insert.substring(0, commonlength);
              } else {
                diffs.splice(0, 0, [DIFF_EQUAL,
                    text_insert.substring(0, commonlength)]);
                pointer++;
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            // Factor out any common suffixies.
            commonlength = this.diff_commonSuffix(text_insert, text_delete);
            if (commonlength !== 0) {
              diffs[pointer][1] = text_insert.substring(text_insert.length -
                  commonlength) + diffs[pointer][1];
              text_insert = text_insert.substring(0, text_insert.length -
                  commonlength);
              text_delete = text_delete.substring(0, text_delete.length -
                  commonlength);
            }
          }
          // Delete the offending records and add the merged ones.
          if (count_delete === 0) {
            diffs.splice(pointer - count_delete - count_insert,
                count_delete + count_insert, [DIFF_INSERT, text_insert]);
          } else if (count_insert === 0) {
            diffs.splice(pointer - count_delete - count_insert,
                count_delete + count_insert, [DIFF_DELETE, text_delete]);
          } else {
            diffs.splice(pointer - count_delete - count_insert,
                count_delete + count_insert, [DIFF_DELETE, text_delete],
                [DIFF_INSERT, text_insert]);
          }
          pointer = pointer - count_delete - count_insert +
                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
          // Merge this equality with the previous one.
          diffs[pointer - 1][1] += diffs[pointer][1];
          diffs.splice(pointer, 1);
        } else {
          pointer++;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
  }
  if (diffs[diffs.length - 1][1] === '') {
    diffs.pop();  // Remove the dummy entry at the end.
  }

  // Second pass: look for single edits surrounded on both sides by equalities
  // which can be shifted sideways to eliminate an equality.
  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
  var changes = false;
  pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      if (diffs[pointer][1].substring(diffs[pointer][1].length -
          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
        // Shift the edit over the previous equality.
        diffs[pointer][1] = diffs[pointer - 1][1] +
            diffs[pointer][1].substring(0, diffs[pointer][1].length -
                                        diffs[pointer - 1][1].length);
        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
        diffs.splice(pointer - 1, 1);
        changes = true;
      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
          diffs[pointer + 1][1]) {
        // Shift the edit over the next equality.
        diffs[pointer - 1][1] += diffs[pointer + 1][1];
        diffs[pointer][1] =
            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
            diffs[pointer + 1][1];
        diffs.splice(pointer + 1, 1);
        changes = true;
      }
    }
    pointer++;
  }
  // If shifts were made, the diff needs reordering and another shift sweep.
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * loc is a location in text1, compute and return the equivalent location in
 * text2.
 * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @param {number} loc Location within text1.
 * @return {number} Location within text2.
 */
diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {
  var chars1 = 0;
  var chars2 = 0;
  var last_chars1 = 0;
  var last_chars2 = 0;
  var x;
  for (x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.
      chars1 += diffs[x][1].length;
    }
    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.
      chars2 += diffs[x][1].length;
    }
    if (chars1 > loc) {  // Overshot the location.
      break;
    }
    last_chars1 = chars1;
    last_chars2 = chars2;
  }
  // Was the location was deleted?
  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
    return last_chars2;
  }
  // Add the remaining character length.
  return last_chars2 + (loc - last_chars1);
};


/**
 * Convert a diff array into a pretty HTML report.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {string} HTML representation.
 */
diff_match_patch.prototype.diff_prettyHtml = function(diffs) {
  var html = [];
  var i = 0;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];    // Operation (insert, delete, equal)
    var data = diffs[x][1];  // Text of change.
    var text = data.replace(/&/g, '&amp;').replace(/</g, '&lt;')
        .replace(/>/g, '&gt;').replace(/\n/g, '&para;<BR>');
    switch (op) {
      case DIFF_INSERT:
        html[x] = '<INS STYLE="background:#E6FFE6;" TITLE="i=' + i + '">' +
                text + '</INS>';
        break;
      case DIFF_DELETE:
        html[x] = '<DEL STYLE="background:#FFE6E6;" TITLE="i=' + i + '">' +
                text + '</DEL>';
        break;
      case DIFF_EQUAL:
        html[x] = '<SPAN TITLE="i=' + i + '">' + text + '</SPAN>';
        break;
    }
    if (op !== DIFF_DELETE) {
      i += data.length;
    }
  }
  return html.join('');
};


/**
 * Compute and return the source text (all equalities and deletions).
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {string} Source text.
 */
diff_match_patch.prototype.diff_text1 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute and return the destination text (all equalities and insertions).
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {string} Destination text.
 */
diff_match_patch.prototype.diff_text2 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_DELETE) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute the Levenshtein distance; the number of inserted, deleted or
 * substituted characters.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {number} Number of changes.
 */
diff_match_patch.prototype.diff_levenshtein = function(diffs) {
  var levenshtein = 0;
  var insertions = 0;
  var deletions = 0;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];
    var data = diffs[x][1];
    switch (op) {
      case DIFF_INSERT:
        insertions += data.length;
        break;
      case DIFF_DELETE:
        deletions += data.length;
        break;
      case DIFF_EQUAL:
        // A deletion and an insertion is one substitution.
        levenshtein += Math.max(insertions, deletions);
        insertions = 0;
        deletions = 0;
        break;
    }
  }
  levenshtein += Math.max(insertions, deletions);
  return levenshtein;
};


/**
 * Crush the diff into an encoded string which describes the operations
 * required to transform text1 into text2.
 * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
 * Operations are tab-separated.  Inserted text is escaped using %xx notation.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {string} Delta text.
 */
diff_match_patch.prototype.diff_toDelta = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    switch (diffs[x][0]) {
      case DIFF_INSERT:
        text[x] = '+' + encodeURI(diffs[x][1]);
        break;
      case DIFF_DELETE:
        text[x] = '-' + diffs[x][1].length;
        break;
      case DIFF_EQUAL:
        text[x] = '=' + diffs[x][1].length;
        break;
    }
  }
  // Opera doesn't know how to encode char 0.
  return text.join('\t').replace(/\x00/g, '%00').replace(/%20/g, ' ');
};


/**
 * Given the original text1, and an encoded string which describes the
 * operations required to transform text1 into text2, compute the full diff.
 * @param {string} text1 Source string for the diff.
 * @param {string} delta Delta text.
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 * @throws {Error} If invalid input.
 */
diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {
  var diffs = [];
  var diffsLength = 0;  // Keeping our own length var is faster in JS.
  var pointer = 0;  // Cursor in text1
  // Opera doesn't know how to decode char 0.
  delta = delta.replace(/%00/g, '\0');
  var tokens = delta.split(/\t/g);
  for (var x = 0; x < tokens.length; x++) {
    // Each token begins with a one character parameter which specifies the
    // operation of this token (delete, insert, equality).
    var param = tokens[x].substring(1);
    switch (tokens[x].charAt(0)) {
      case '+':
        try {
          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];
        } catch (ex) {
          // Malformed URI sequence.
          throw new Error('Illegal escape in diff_fromDelta: ' + param);
        }
        break;
      case '-':
        // Fall through.
      case '=':
        var n = parseInt(param, 10);
        if (isNaN(n) || n < 0) {
          throw new Error('Invalid number in diff_fromDelta: ' + param);
        }
        var text = text1.substring(pointer, pointer += n);
        if (tokens[x].charAt(0) == '=') {
          diffs[diffsLength++] = [DIFF_EQUAL, text];
        } else {
          diffs[diffsLength++] = [DIFF_DELETE, text];
        }
        break;
      default:
        // Blank tokens are ok (from a trailing \t).
        // Anything else is an error.
        if (tokens[x]) {
          throw new Error('Invalid diff operation in diff_fromDelta: ' +
                          tokens[x]);
        }
    }
  }
  if (pointer != text1.length) {
    throw new Error('Delta length (' + pointer +
        ') does not equal source text length (' + text1.length + ').');
  }
  return diffs;
};


//  MATCH FUNCTIONS


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 */
diff_match_patch.prototype.match_main = function(text, pattern, loc) {
  // Check for null inputs.
  if (text == null || pattern == null || loc == null) {
    throw new Error('Null input. (match_main)');
  }

  loc = Math.max(0, Math.min(loc, text.length));
  if (text == pattern) {
    // Shortcut (potentially not guaranteed by the algorithm)
    return 0;
  } else if (!text.length) {
    // Nothing to match.
    return -1;
  } else if (text.substring(loc, loc + pattern.length) == pattern) {
    // Perfect match at the perfect spot!  (Includes case of null pattern)
    return loc;
  } else {
    // Do a fuzzy compare.
    return this.match_bitap(text, pattern, loc);
  }
};


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc' using the
 * Bitap algorithm.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 * @private
 */
diff_match_patch.prototype.match_bitap = function(text, pattern, loc) {
  if (pattern.length > this.Match_MaxBits) {
    throw new Error('Pattern too long for this browser.');
  }

  // Initialise the alphabet.
  var s = this.match_alphabet(pattern);

  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Compute and return the score for a match with e errors and x location.
   * Accesses loc and pattern through being a closure.
   * @param {number} e Number of errors in match.
   * @param {number} x Location of match.
   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).
   * @private
   */
  function match_bitapScore(e, x) {
    var accuracy = e / pattern.length;
    var proximity = Math.abs(loc - x);
    if (!dmp.Match_Distance) {
      // Dodge divide by zero error.
      return proximity ? 1.0 : accuracy;
    }
    return accuracy + (proximity / dmp.Match_Distance);
  }

  // Highest score beyond which we give up.
  var score_threshold = this.Match_Threshold;
  // Is there a nearby exact match? (speedup)
  var best_loc = text.indexOf(pattern, loc);
  if (best_loc != -1) {
    score_threshold = Math.min(match_bitapScore(0, best_loc), score_threshold);
    // What about in the other direction? (speedup)
    best_loc = text.lastIndexOf(pattern, loc + pattern.length);
    if (best_loc != -1) {
      score_threshold =
          Math.min(match_bitapScore(0, best_loc), score_threshold);
    }
  }

  // Initialise the bit arrays.
  var matchmask = 1 << (pattern.length - 1);
  best_loc = -1;

  var bin_min, bin_mid;
  var bin_max = pattern.length + text.length;
  var last_rd;
  for (var d = 0; d < pattern.length; d++) {
    // Scan for the best match; each iteration allows for one more error.
    // Run a binary search to determine how far from 'loc' we can stray at this
    // error level.
    bin_min = 0;
    bin_mid = bin_max;
    while (bin_min < bin_mid) {
      if (match_bitapScore(d, loc + bin_mid) <= score_threshold) {
        bin_min = bin_mid;
      } else {
        bin_max = bin_mid;
      }
      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
    }
    // Use the result from this iteration as the maximum for the next.
    bin_max = bin_mid;
    var start = Math.max(1, loc - bin_mid + 1);
    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;

    var rd = Array(finish + 2);
    rd[finish + 1] = (1 << d) - 1;
    for (var j = finish; j >= start; j--) {
      // The alphabet (s) is a sparse hash, so the following line generates
      // warnings.
      var charMatch = s[text.charAt(j - 1)];
      if (d === 0) {  // First pass: exact match.
        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
      } else {  // Subsequent passes: fuzzy match.
        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch |
                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |
                last_rd[j + 1];
      }
      if (rd[j] & matchmask) {
        var score = match_bitapScore(d, j - 1);
        // This match will almost certainly be better than any existing match.
        // But check anyway.
        if (score <= score_threshold) {
          // Told you so.
          score_threshold = score;
          best_loc = j - 1;
          if (best_loc > loc) {
            // When passing loc, don't exceed our current distance from loc.
            start = Math.max(1, 2 * loc - best_loc);
          } else {
            // Already passed loc, downhill from here on in.
            break;
          }
        }
      }
    }
    // No hope for a (better) match at greater error levels.
    if (match_bitapScore(d + 1, loc) > score_threshold) {
      break;
    }
    last_rd = rd;
  }
  return best_loc;
};


/**
 * Initialise the alphabet for the Bitap algorithm.
 * @param {string} pattern The text to encode.
 * @return {Object} Hash of character locations.
 * @private
 */
diff_match_patch.prototype.match_alphabet = function(pattern) {
  var s = {};
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] = 0;
  }
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);
  }
  return s;
};


//  PATCH FUNCTIONS


/**
 * Increase the context until it is unique,
 * but don't let the pattern expand beyond Match_MaxBits.
 * @param {patch_obj} patch The patch to grow.
 * @param {string} text Source text.
 * @private
 */
diff_match_patch.prototype.patch_addContext = function(patch, text) {
  if (text.length == 0) {
    return;
  }
  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
  var padding = 0;

  // Look for the first and last matches of pattern in text.  If two different
  // matches are found, increase the pattern length.
  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&
         pattern.length < this.Match_MaxBits - this.Patch_Margin -
         this.Patch_Margin) {
    padding += this.Patch_Margin;
    pattern = text.substring(patch.start2 - padding,
                             patch.start2 + patch.length1 + padding);
  }
  // Add one chunk for good luck.
  padding += this.Patch_Margin;

  // Add the prefix.
  var prefix = text.substring(patch.start2 - padding, patch.start2);
  if (prefix) {
    patch.diffs.unshift([DIFF_EQUAL, prefix]);
  }
  // Add the suffix.
  var suffix = text.substring(patch.start2 + patch.length1,
                              patch.start2 + patch.length1 + padding);
  if (suffix) {
    patch.diffs.push([DIFF_EQUAL, suffix]);
  }

  // Roll back the start points.
  patch.start1 -= prefix.length;
  patch.start2 -= prefix.length;
  // Extend the lengths.
  patch.length1 += prefix.length + suffix.length;
  patch.length2 += prefix.length + suffix.length;
};


/**
 * Compute a list of patches to turn text1 into text2.
 * Use diffs if provided, otherwise compute it ourselves.
 * There are four ways to call this function, depending on what data is
 * available to the caller:
 * Method 1:
 * a = text1, b = text2
 * Method 2:
 * a = diffs
 * Method 3 (optimal):
 * a = text1, b = diffs
 * Method 4 (deprecated, use method 3):
 * a = text1, b = text2, c = diffs
 *
 * @param {string|Array.<Array.<number|string>>} a text1 (methods 1,3,4) or
 * Array of diff tuples for text1 to text2 (method 2).
 * @param {string|Array.<Array.<number|string>>} opt_b text2 (methods 1,4) or
 * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
 * @param {string|Array.<Array.<number|string>>} opt_c Array of diff tuples for
 * text1 to text2 (method 4) or undefined (methods 1,2,3).
 * @return {Array.<patch_obj>} Array of patch objects.
 */
diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {
  var text1, diffs;
  if (typeof a == 'string' && typeof opt_b == 'string' &&
      typeof opt_c == 'undefined') {
    // Method 1: text1, text2
    // Compute diffs from text1 and text2.
    text1 = a;
    diffs = this.diff_main(text1, opt_b, true);
    if (diffs.length > 2) {
      this.diff_cleanupSemantic(diffs);
      this.diff_cleanupEfficiency(diffs);
    }
  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&
      typeof opt_c == 'undefined') {
    // Method 2: diffs
    // Compute text1 from diffs.
    diffs = a;
    text1 = this.diff_text1(diffs);
  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&
      typeof opt_c == 'undefined') {
    // Method 3: text1, diffs
    text1 = a;
    diffs = opt_b;
  } else if (typeof a == 'string' && typeof opt_b == 'string' &&
      opt_c && typeof opt_c == 'object') {
    // Method 4: text1, text2, diffs
    // text2 is not used.
    text1 = a;
    diffs = opt_c;
  } else {
    throw new Error('Unknown call format to patch_make.');
  }

  if (diffs.length === 0) {
    return [];  // Get rid of the null case.
  }
  var patches = [];
  var patch = new patch_obj();
  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.
  var char_count1 = 0;  // Number of characters into the text1 string.
  var char_count2 = 0;  // Number of characters into the text2 string.
  // Start with text1 (prepatch_text) and apply the diffs until we arrive at
  // text2 (postpatch_text).  We recreate the patches one by one to determine
  // context info.
  var prepatch_text = text1;
  var postpatch_text = text1;
  for (var x = 0; x < diffs.length; x++) {
    var diff_type = diffs[x][0];
    var diff_text = diffs[x][1];

    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
      // A new patch starts here.
      patch.start1 = char_count1;
      patch.start2 = char_count2;
    }

    switch (diff_type) {
      case DIFF_INSERT:
        patch.diffs[patchDiffLength++] = diffs[x];
        patch.length2 += diff_text.length;
        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +
                         postpatch_text.substring(char_count2);
        break;
      case DIFF_DELETE:
        patch.length1 += diff_text.length;
        patch.diffs[patchDiffLength++] = diffs[x];
        postpatch_text = postpatch_text.substring(0, char_count2) +
                         postpatch_text.substring(char_count2 +
                             diff_text.length);
        break;
      case DIFF_EQUAL:
        if (diff_text.length <= 2 * this.Patch_Margin &&
            patchDiffLength && diffs.length != x + 1) {
          // Small equality inside a patch.
          patch.diffs[patchDiffLength++] = diffs[x];
          patch.length1 += diff_text.length;
          patch.length2 += diff_text.length;
        } else if (diff_text.length >= 2 * this.Patch_Margin) {
          // Time for a new patch.
          if (patchDiffLength) {
            this.patch_addContext(patch, prepatch_text);
            patches.push(patch);
            patch = new patch_obj();
            patchDiffLength = 0;
            // Unlike Unidiff, our patch lists have a rolling context.
            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff
            // Update prepatch text & pos to reflect the application of the
            // just completed patch.
            prepatch_text = postpatch_text;
            char_count1 = char_count2;
          }
        }
        break;
    }

    // Update the current character count.
    if (diff_type !== DIFF_INSERT) {
      char_count1 += diff_text.length;
    }
    if (diff_type !== DIFF_DELETE) {
      char_count2 += diff_text.length;
    }
  }
  // Pick up the leftover patch if not empty.
  if (patchDiffLength) {
    this.patch_addContext(patch, prepatch_text);
    patches.push(patch);
  }

  return patches;
};


/**
 * Given an array of patches, return another array that is identical.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 * @return {Array.<patch_obj>} Array of patch objects.
 */
diff_match_patch.prototype.patch_deepCopy = function(patches) {
  // Making deep copies is hard in JavaScript.
  var patchesCopy = [];
  for (var x = 0; x < patches.length; x++) {
    var patch = patches[x];
    var patchCopy = new patch_obj();
    patchCopy.diffs = [];
    for (var y = 0; y < patch.diffs.length; y++) {
      patchCopy.diffs[y] = patch.diffs[y].slice();
    }
    patchCopy.start1 = patch.start1;
    patchCopy.start2 = patch.start2;
    patchCopy.length1 = patch.length1;
    patchCopy.length2 = patch.length2;
    patchesCopy[x] = patchCopy;
  }
  return patchesCopy;
};


/**
 * Merge a set of patches onto the text.  Return a patched text, as well
 * as a list of true/false values indicating which patches were applied.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 * @param {string} text Old text.
 * @return {Array.<string|Array.<boolean>>} Two element Array, containing the
 *      new text and an array of boolean values.
 */
diff_match_patch.prototype.patch_apply = function(patches, text) {
  if (patches.length == 0) {
    return [text, []];
  }

  // Deep copy the patches so that no changes are made to originals.
  patches = this.patch_deepCopy(patches);

  var nullPadding = this.patch_addPadding(patches);
  text = nullPadding + text + nullPadding;

  this.patch_splitMax(patches);
  // delta keeps track of the offset between the expected and actual location
  // of the previous patch.  If there are patches expected at positions 10 and
  // 20, but the first patch was found at 12, delta is 2 and the second patch
  // has an effective expected position of 22.
  var delta = 0;
  var results = [];
  for (var x = 0; x < patches.length; x++) {
    var expected_loc = patches[x].start2 + delta;
    var text1 = this.diff_text1(patches[x].diffs);
    var start_loc;
    var end_loc = -1;
    if (text1.length > this.Match_MaxBits) {
      // patch_splitMax will only provide an oversized pattern in the case of
      // a monster delete.
      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),
                                  expected_loc);
      if (start_loc != -1) {
        end_loc = this.match_main(text,
            text1.substring(text1.length - this.Match_MaxBits),
            expected_loc + text1.length - this.Match_MaxBits);
        if (end_loc == -1 || start_loc >= end_loc) {
          // Can't find valid trailing context.  Drop this patch.
          start_loc = -1;
        }
      }
    } else {
      start_loc = this.match_main(text, text1, expected_loc);
    }
    if (start_loc == -1) {
      // No match found.  :(
      results[x] = false;
      // Subtract the delta for this failed patch from subsequent patches.
      delta -= patches[x].length2 - patches[x].length1;
    } else {
      // Found a match.  :)
      results[x] = true;
      delta = start_loc - expected_loc;
      var text2;
      if (end_loc == -1) {
        text2 = text.substring(start_loc, start_loc + text1.length);
      } else {
        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
      }
      if (text1 == text2) {
        // Perfect match, just shove the replacement text in.
        text = text.substring(0, start_loc) +
               this.diff_text2(patches[x].diffs) +
               text.substring(start_loc + text1.length);
      } else {
        // Imperfect match.  Run a diff to get a framework of equivalent
        // indices.
        var diffs = this.diff_main(text1, text2, false);
        if (text1.length > this.Match_MaxBits &&
            this.diff_levenshtein(diffs) / text1.length >
            this.Patch_DeleteThreshold) {
          // The end points match, but the content is unacceptably bad.
          results[x] = false;
        } else {
          this.diff_cleanupSemanticLossless(diffs);
          var index1 = 0;
          var index2;
          for (var y = 0; y < patches[x].diffs.length; y++) {
            var mod = patches[x].diffs[y];
            if (mod[0] !== DIFF_EQUAL) {
              index2 = this.diff_xIndex(diffs, index1);
            }
            if (mod[0] === DIFF_INSERT) {  // Insertion
              text = text.substring(0, start_loc + index2) + mod[1] +
                     text.substring(start_loc + index2);
            } else if (mod[0] === DIFF_DELETE) {  // Deletion
              text = text.substring(0, start_loc + index2) +
                     text.substring(start_loc + this.diff_xIndex(diffs,
                         index1 + mod[1].length));
            }
            if (mod[0] !== DIFF_DELETE) {
              index1 += mod[1].length;
            }
          }
        }
      }
    }
  }
  // Strip the padding off.
  text = text.substring(nullPadding.length, text.length - nullPadding.length);
  return [text, results];
};


/**
 * Add some padding on text start and end so that edges can match something.
 * Intended to be called only from within patch_apply.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 * @return {string} The padding string added to each side.
 */
diff_match_patch.prototype.patch_addPadding = function(patches) {
  var paddingLength = this.Patch_Margin;
  var nullPadding = '';
  for (var x = 1; x <= paddingLength; x++) {
    nullPadding += String.fromCharCode(x);
  }

  // Bump all the patches forward.
  for (var x = 0; x < patches.length; x++) {
    patches[x].start1 += paddingLength;
    patches[x].start2 += paddingLength;
  }

  // Add some padding on start of first diff.
  var patch = patches[0];
  var diffs = patch.diffs;
  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
    // Add nullPadding equality.
    diffs.unshift([DIFF_EQUAL, nullPadding]);
    patch.start1 -= paddingLength;  // Should be 0.
    patch.start2 -= paddingLength;  // Should be 0.
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[0][1].length) {
    // Grow first equality.
    var extraLength = paddingLength - diffs[0][1].length;
    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
    patch.start1 -= extraLength;
    patch.start2 -= extraLength;
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }

  // Add some padding on end of last diff.
  patch = patches[patches.length - 1];
  diffs = patch.diffs;
  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
    // Add nullPadding equality.
    diffs.push([DIFF_EQUAL, nullPadding]);
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[diffs.length - 1][1].length) {
    // Grow last equality.
    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }

  return nullPadding;
};


/**
 * Look through the patches and break up any which are longer than the maximum
 * limit of the match algorithm.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 */
diff_match_patch.prototype.patch_splitMax = function(patches) {
  for (var x = 0; x < patches.length; x++) {
    if (patches[x].length1 > this.Match_MaxBits) {
      var bigpatch = patches[x];
      // Remove the big old patch.
      patches.splice(x--, 1);
      var patch_size = this.Match_MaxBits;
      var start1 = bigpatch.start1;
      var start2 = bigpatch.start2;
      var precontext = '';
      while (bigpatch.diffs.length !== 0) {
        // Create one of several smaller patches.
        var patch = new patch_obj();
        var empty = true;
        patch.start1 = start1 - precontext.length;
        patch.start2 = start2 - precontext.length;
        if (precontext !== '') {
          patch.length1 = patch.length2 = precontext.length;
          patch.diffs.push([DIFF_EQUAL, precontext]);
        }
        while (bigpatch.diffs.length !== 0 &&
               patch.length1 < patch_size - this.Patch_Margin) {
          var diff_type = bigpatch.diffs[0][0];
          var diff_text = bigpatch.diffs[0][1];
          if (diff_type === DIFF_INSERT) {
            // Insertions are harmless.
            patch.length2 += diff_text.length;
            start2 += diff_text.length;
            patch.diffs.push(bigpatch.diffs.shift());
            empty = false;
          } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&
                     patch.diffs[0][0] == DIFF_EQUAL &&
                     diff_text.length > 2 * patch_size) {
            // This is a large deletion.  Let it pass in one chunk.
            patch.length1 += diff_text.length;
            start1 += diff_text.length;
            empty = false;
            patch.diffs.push([diff_type, diff_text]);
            bigpatch.diffs.shift();
          } else {
            // Deletion or equality.  Only take as much as we can stomach.
            diff_text = diff_text.substring(0, patch_size - patch.length1 -
                                               this.Patch_Margin);
            patch.length1 += diff_text.length;
            start1 += diff_text.length;
            if (diff_type === DIFF_EQUAL) {
              patch.length2 += diff_text.length;
              start2 += diff_text.length;
            } else {
              empty = false;
            }
            patch.diffs.push([diff_type, diff_text]);
            if (diff_text == bigpatch.diffs[0][1]) {
              bigpatch.diffs.shift();
            } else {
              bigpatch.diffs[0][1] =
                  bigpatch.diffs[0][1].substring(diff_text.length);
            }
          }
        }
        // Compute the head context for the next patch.
        precontext = this.diff_text2(patch.diffs);
        precontext =
            precontext.substring(precontext.length - this.Patch_Margin);
        // Append the end context for this patch.
        var postcontext = this.diff_text1(bigpatch.diffs)
                              .substring(0, this.Patch_Margin);
        if (postcontext !== '') {
          patch.length1 += postcontext.length;
          patch.length2 += postcontext.length;
          if (patch.diffs.length !== 0 &&
              patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {
            patch.diffs[patch.diffs.length - 1][1] += postcontext;
          } else {
            patch.diffs.push([DIFF_EQUAL, postcontext]);
          }
        }
        if (!empty) {
          patches.splice(++x, 0, patch);
        }
      }
    }
  }
};


/**
 * Take a list of patches and return a textual representation.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 * @return {string} Text representation of patches.
 */
diff_match_patch.prototype.patch_toText = function(patches) {
  var text = [];
  for (var x = 0; x < patches.length; x++) {
    text[x] = patches[x];
  }
  return text.join('');
};


/**
 * Parse a textual representation of patches and return a list of patch objects.
 * @param {string} textline Text representation of patches.
 * @return {Array.<patch_obj>} Array of patch objects.
 * @throws {Error} If invalid input.
 */
diff_match_patch.prototype.patch_fromText = function(textline) {
  var patches = [];
  if (!textline) {
    return patches;
  }
  // Opera doesn't know how to decode char 0.
  textline = textline.replace(/%00/g, '\0');
  var text = textline.split('\n');
  var textPointer = 0;
  while (textPointer < text.length) {
    var m = text[textPointer].match(/^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/);
    if (!m) {
      throw new Error('Invalid patch string: ' + text[textPointer]);
    }
    var patch = new patch_obj();
    patches.push(patch);
    patch.start1 = parseInt(m[1], 10);
    if (m[2] === '') {
      patch.start1--;
      patch.length1 = 1;
    } else if (m[2] == '0') {
      patch.length1 = 0;
    } else {
      patch.start1--;
      patch.length1 = parseInt(m[2], 10);
    }

    patch.start2 = parseInt(m[3], 10);
    if (m[4] === '') {
      patch.start2--;
      patch.length2 = 1;
    } else if (m[4] == '0') {
      patch.length2 = 0;
    } else {
      patch.start2--;
      patch.length2 = parseInt(m[4], 10);
    }
    textPointer++;

    while (textPointer < text.length) {
      var sign = text[textPointer].charAt(0);
      try {
        var line = decodeURI(text[textPointer].substring(1));
      } catch (ex) {
        // Malformed URI sequence.
        throw new Error('Illegal escape in patch_fromText: ' + line);
      }
      if (sign == '-') {
        // Deletion.
        patch.diffs.push([DIFF_DELETE, line]);
      } else if (sign == '+') {
        // Insertion.
        patch.diffs.push([DIFF_INSERT, line]);
      } else if (sign == ' ') {
        // Minor equality.
        patch.diffs.push([DIFF_EQUAL, line]);
      } else if (sign == '@') {
        // Start of next patch.
        break;
      } else if (sign === '') {
        // Blank line?  Whatever.
      } else {
        // WTF?
        throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
      }
      textPointer++;
    }
  }
  return patches;
};


/**
 * Class representing one patch operation.
 * @constructor
 */
function patch_obj() {
  /** @type {Array.<Array.<number|string>>} */
  this.diffs = [];
  /** @type {?number} */
  this.start1 = null;
  /** @type {?number} */
  this.start2 = null;
  /** @type {number} */
  this.length1 = 0;
  /** @type {number} */
  this.length2 = 0;
}


/**
 * Emmulate GNU diff's format.
 * Header: @@ -382,8 +481,9 @@
 * Indicies are printed as 1-based, not 0-based.
 * @return {string} The GNU diff string.
 */
patch_obj.prototype.toString = function() {
  var coords1, coords2;
  if (this.length1 === 0) {
    coords1 = this.start1 + ',0';
  } else if (this.length1 == 1) {
    coords1 = this.start1 + 1;
  } else {
    coords1 = (this.start1 + 1) + ',' + this.length1;
  }
  if (this.length2 === 0) {
    coords2 = this.start2 + ',0';
  } else if (this.length2 == 1) {
    coords2 = this.start2 + 1;
  } else {
    coords2 = (this.start2 + 1) + ',' + this.length2;
  }
  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\n'];
  var op;
  // Escape the body of the patch with %xx notation.
  for (var x = 0; x < this.diffs.length; x++) {
    switch (this.diffs[x][0]) {
      case DIFF_INSERT:
        op = '+';
        break;
      case DIFF_DELETE:
        op = '-';
        break;
      case DIFF_EQUAL:
        op = ' ';
        break;
    }
    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\n';
  }
  // Opera doesn't know how to encode char 0.
  return text.join('').replace(/\x00/g, '%00').replace(/%20/g, ' ');
};


// Export these global variables so that they survive Google's JS compiler.
/*changed by lfborjas: changed `window` for `exports` to make it suitable for the node.js module conventions*/
exports.diff_match_patch = diff_match_patch;
exports.patch_obj = patch_obj;
exports.DIFF_DELETE = DIFF_DELETE;
exports.DIFF_INSERT = DIFF_INSERT;
exports.DIFF_EQUAL = DIFF_EQUAL;


/***/ }),

/***/ "../structured-text-editor/node_modules/prismjs/components/prism-latex.js":
/*!********************************************************************************!*\
  !*** ../structured-text-editor/node_modules/prismjs/components/prism-latex.js ***!
  \********************************************************************************/
/***/ (() => {

(function (Prism) {
	var funcPattern = /\\(?:[^a-z()[\]]|[a-z*]+)/i;
	var insideEqu = {
		'equation-command': {
			pattern: funcPattern,
			alias: 'regex'
		}
	};

	Prism.languages.latex = {
		'comment': /%.*/,
		// the verbatim environment prints whitespace to the document
		'cdata': {
			pattern: /(\\begin\{((?:lstlisting|verbatim)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
			lookbehind: true
		},
		/*
		 * equations can be between $$ $$ or $ $ or \( \) or \[ \]
		 * (all are multiline)
		 */
		'equation': [
			{
				pattern: /\$\$(?:\\[\s\S]|[^\\$])+\$\$|\$(?:\\[\s\S]|[^\\$])+\$|\\\([\s\S]*?\\\)|\\\[[\s\S]*?\\\]/,
				inside: insideEqu,
				alias: 'string'
			},
			{
				pattern: /(\\begin\{((?:align|eqnarray|equation|gather|math|multline)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
				lookbehind: true,
				inside: insideEqu,
				alias: 'string'
			}
		],
		/*
		 * arguments which are keywords or references are highlighted
		 * as keywords
		 */
		'keyword': {
			pattern: /(\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
			lookbehind: true
		},
		'url': {
			pattern: /(\\url\{)[^}]+(?=\})/,
			lookbehind: true
		},
		/*
		 * section or chapter headlines are highlighted as bold so that
		 * they stand out more
		 */
		'headline': {
			pattern: /(\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\*?(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
			lookbehind: true,
			alias: 'class-name'
		},
		'function': {
			pattern: funcPattern,
			alias: 'selector'
		},
		'punctuation': /[[\]{}&]/
	};

	Prism.languages.tex = Prism.languages.latex;
	Prism.languages.context = Prism.languages.latex;
}(Prism));


/***/ }),

/***/ "../structured-text-editor/node_modules/prismjs/prism.js":
/*!***************************************************************!*\
  !*** ../structured-text-editor/node_modules/prismjs/prism.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/* **********************************************
     Begin prism-core.js
********************************************** */

/// <reference lib="WebWorker"/>

var _self = (typeof window !== 'undefined')
	? window   // if in browser
	: (
		(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)
			? self // if in worker
			: {}   // if in node js
	);

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */
var Prism = (function (_self) {

	// Private helper vars
	var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
	var uniqueId = 0;

	// The grammar object for plaintext
	var plainTextGrammar = {};


	var _ = {
		/**
		 * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
		 * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
		 * additional languages or plugins yourself.
		 *
		 * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
		 *
		 * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
		 * empty Prism object into the global scope before loading the Prism script like this:
		 *
		 * ```js
		 * window.Prism = window.Prism || {};
		 * Prism.manual = true;
		 * // add a new <script> to load Prism's script
		 * ```
		 *
		 * @default false
		 * @type {boolean}
		 * @memberof Prism
		 * @public
		 */
		manual: _self.Prism && _self.Prism.manual,
		/**
		 * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
		 * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
		 * own worker, you don't want it to do this.
		 *
		 * By setting this value to `true`, Prism will not add its own listeners to the worker.
		 *
		 * You obviously have to change this value before Prism executes. To do this, you can add an
		 * empty Prism object into the global scope before loading the Prism script like this:
		 *
		 * ```js
		 * window.Prism = window.Prism || {};
		 * Prism.disableWorkerMessageHandler = true;
		 * // Load Prism's script
		 * ```
		 *
		 * @default false
		 * @type {boolean}
		 * @memberof Prism
		 * @public
		 */
		disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,

		/**
		 * A namespace for utility methods.
		 *
		 * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
		 * change or disappear at any time.
		 *
		 * @namespace
		 * @memberof Prism
		 */
		util: {
			encode: function encode(tokens) {
				if (tokens instanceof Token) {
					return new Token(tokens.type, encode(tokens.content), tokens.alias);
				} else if (Array.isArray(tokens)) {
					return tokens.map(encode);
				} else {
					return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
				}
			},

			/**
			 * Returns the name of the type of the given value.
			 *
			 * @param {any} o
			 * @returns {string}
			 * @example
			 * type(null)      === 'Null'
			 * type(undefined) === 'Undefined'
			 * type(123)       === 'Number'
			 * type('foo')     === 'String'
			 * type(true)      === 'Boolean'
			 * type([1, 2])    === 'Array'
			 * type({})        === 'Object'
			 * type(String)    === 'Function'
			 * type(/abc+/)    === 'RegExp'
			 */
			type: function (o) {
				return Object.prototype.toString.call(o).slice(8, -1);
			},

			/**
			 * Returns a unique number for the given object. Later calls will still return the same number.
			 *
			 * @param {Object} obj
			 * @returns {number}
			 */
			objId: function (obj) {
				if (!obj['__id']) {
					Object.defineProperty(obj, '__id', { value: ++uniqueId });
				}
				return obj['__id'];
			},

			/**
			 * Creates a deep clone of the given object.
			 *
			 * The main intended use of this function is to clone language definitions.
			 *
			 * @param {T} o
			 * @param {Record<number, any>} [visited]
			 * @returns {T}
			 * @template T
			 */
			clone: function deepClone(o, visited) {
				visited = visited || {};

				var clone; var id;
				switch (_.util.type(o)) {
					case 'Object':
						id = _.util.objId(o);
						if (visited[id]) {
							return visited[id];
						}
						clone = /** @type {Record<string, any>} */ ({});
						visited[id] = clone;

						for (var key in o) {
							if (o.hasOwnProperty(key)) {
								clone[key] = deepClone(o[key], visited);
							}
						}

						return /** @type {any} */ (clone);

					case 'Array':
						id = _.util.objId(o);
						if (visited[id]) {
							return visited[id];
						}
						clone = [];
						visited[id] = clone;

						(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {
							clone[i] = deepClone(v, visited);
						});

						return /** @type {any} */ (clone);

					default:
						return o;
				}
			},

			/**
			 * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
			 *
			 * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
			 *
			 * @param {Element} element
			 * @returns {string}
			 */
			getLanguage: function (element) {
				while (element) {
					var m = lang.exec(element.className);
					if (m) {
						return m[1].toLowerCase();
					}
					element = element.parentElement;
				}
				return 'none';
			},

			/**
			 * Sets the Prism `language-xxxx` class of the given element.
			 *
			 * @param {Element} element
			 * @param {string} language
			 * @returns {void}
			 */
			setLanguage: function (element, language) {
				// remove all `language-xxxx` classes
				// (this might leave behind a leading space)
				element.className = element.className.replace(RegExp(lang, 'gi'), '');

				// add the new `language-xxxx` class
				// (using `classList` will automatically clean up spaces for us)
				element.classList.add('language-' + language);
			},

			/**
			 * Returns the script element that is currently executing.
			 *
			 * This does __not__ work for line script element.
			 *
			 * @returns {HTMLScriptElement | null}
			 */
			currentScript: function () {
				if (typeof document === 'undefined') {
					return null;
				}
				if ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {
					return /** @type {any} */ (document.currentScript);
				}

				// IE11 workaround
				// we'll get the src of the current script by parsing IE11's error stack trace
				// this will not work for inline scripts

				try {
					throw new Error();
				} catch (err) {
					// Get file src url from stack. Specifically works with the format of stack traces in IE.
					// A stack will look like this:
					//
					// Error
					//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
					//    at Global code (http://localhost/components/prism-core.js:606:1)

					var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
					if (src) {
						var scripts = document.getElementsByTagName('script');
						for (var i in scripts) {
							if (scripts[i].src == src) {
								return scripts[i];
							}
						}
					}
					return null;
				}
			},

			/**
			 * Returns whether a given class is active for `element`.
			 *
			 * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
			 * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
			 * given class is just the given class with a `no-` prefix.
			 *
			 * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
			 * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
			 * ancestors have the given class or the negated version of it, then the default activation will be returned.
			 *
			 * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
			 * version of it, the class is considered active.
			 *
			 * @param {Element} element
			 * @param {string} className
			 * @param {boolean} [defaultActivation=false]
			 * @returns {boolean}
			 */
			isActive: function (element, className, defaultActivation) {
				var no = 'no-' + className;

				while (element) {
					var classList = element.classList;
					if (classList.contains(className)) {
						return true;
					}
					if (classList.contains(no)) {
						return false;
					}
					element = element.parentElement;
				}
				return !!defaultActivation;
			}
		},

		/**
		 * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
		 *
		 * @namespace
		 * @memberof Prism
		 * @public
		 */
		languages: {
			/**
			 * The grammar for plain, unformatted text.
			 */
			plain: plainTextGrammar,
			plaintext: plainTextGrammar,
			text: plainTextGrammar,
			txt: plainTextGrammar,

			/**
			 * Creates a deep copy of the language with the given id and appends the given tokens.
			 *
			 * If a token in `redef` also appears in the copied language, then the existing token in the copied language
			 * will be overwritten at its original position.
			 *
			 * ## Best practices
			 *
			 * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
			 * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
			 * understand the language definition because, normally, the order of tokens matters in Prism grammars.
			 *
			 * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
			 * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
			 *
			 * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
			 * @param {Grammar} redef The new tokens to append.
			 * @returns {Grammar} The new language created.
			 * @public
			 * @example
			 * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
			 *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
			 *     // at its original position
			 *     'comment': { ... },
			 *     // CSS doesn't have a 'color' token, so this token will be appended
			 *     'color': /\b(?:red|green|blue)\b/
			 * });
			 */
			extend: function (id, redef) {
				var lang = _.util.clone(_.languages[id]);

				for (var key in redef) {
					lang[key] = redef[key];
				}

				return lang;
			},

			/**
			 * Inserts tokens _before_ another token in a language definition or any other grammar.
			 *
			 * ## Usage
			 *
			 * This helper method makes it easy to modify existing languages. For example, the CSS language definition
			 * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
			 * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
			 * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
			 * this:
			 *
			 * ```js
			 * Prism.languages.markup.style = {
			 *     // token
			 * };
			 * ```
			 *
			 * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
			 * before existing tokens. For the CSS example above, you would use it like this:
			 *
			 * ```js
			 * Prism.languages.insertBefore('markup', 'cdata', {
			 *     'style': {
			 *         // token
			 *     }
			 * });
			 * ```
			 *
			 * ## Special cases
			 *
			 * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
			 * will be ignored.
			 *
			 * This behavior can be used to insert tokens after `before`:
			 *
			 * ```js
			 * Prism.languages.insertBefore('markup', 'comment', {
			 *     'comment': Prism.languages.markup.comment,
			 *     // tokens after 'comment'
			 * });
			 * ```
			 *
			 * ## Limitations
			 *
			 * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
			 * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
			 * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
			 * deleting properties which is necessary to insert at arbitrary positions.
			 *
			 * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
			 * Instead, it will create a new object and replace all references to the target object with the new one. This
			 * can be done without temporarily deleting properties, so the iteration order is well-defined.
			 *
			 * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
			 * you hold the target object in a variable, then the value of the variable will not change.
			 *
			 * ```js
			 * var oldMarkup = Prism.languages.markup;
			 * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
			 *
			 * assert(oldMarkup !== Prism.languages.markup);
			 * assert(newMarkup === Prism.languages.markup);
			 * ```
			 *
			 * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
			 * object to be modified.
			 * @param {string} before The key to insert before.
			 * @param {Grammar} insert An object containing the key-value pairs to be inserted.
			 * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
			 * object to be modified.
			 *
			 * Defaults to `Prism.languages`.
			 * @returns {Grammar} The new grammar object.
			 * @public
			 */
			insertBefore: function (inside, before, insert, root) {
				root = root || /** @type {any} */ (_.languages);
				var grammar = root[inside];
				/** @type {Grammar} */
				var ret = {};

				for (var token in grammar) {
					if (grammar.hasOwnProperty(token)) {

						if (token == before) {
							for (var newToken in insert) {
								if (insert.hasOwnProperty(newToken)) {
									ret[newToken] = insert[newToken];
								}
							}
						}

						// Do not insert token which also occur in insert. See #1525
						if (!insert.hasOwnProperty(token)) {
							ret[token] = grammar[token];
						}
					}
				}

				var old = root[inside];
				root[inside] = ret;

				// Update references in other language definitions
				_.languages.DFS(_.languages, function (key, value) {
					if (value === old && key != inside) {
						this[key] = ret;
					}
				});

				return ret;
			},

			// Traverse a language definition with Depth First Search
			DFS: function DFS(o, callback, type, visited) {
				visited = visited || {};

				var objId = _.util.objId;

				for (var i in o) {
					if (o.hasOwnProperty(i)) {
						callback.call(o, i, o[i], type || i);

						var property = o[i];
						var propertyType = _.util.type(property);

						if (propertyType === 'Object' && !visited[objId(property)]) {
							visited[objId(property)] = true;
							DFS(property, callback, null, visited);
						} else if (propertyType === 'Array' && !visited[objId(property)]) {
							visited[objId(property)] = true;
							DFS(property, callback, i, visited);
						}
					}
				}
			}
		},

		plugins: {},

		/**
		 * This is the most high-level function in Prism’s API.
		 * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
		 * each one of them.
		 *
		 * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
		 *
		 * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
		 * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
		 * @memberof Prism
		 * @public
		 */
		highlightAll: function (async, callback) {
			_.highlightAllUnder(document, async, callback);
		},

		/**
		 * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
		 * {@link Prism.highlightElement} on each one of them.
		 *
		 * The following hooks will be run:
		 * 1. `before-highlightall`
		 * 2. `before-all-elements-highlight`
		 * 3. All hooks of {@link Prism.highlightElement} for each element.
		 *
		 * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
		 * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
		 * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
		 * @memberof Prism
		 * @public
		 */
		highlightAllUnder: function (container, async, callback) {
			var env = {
				callback: callback,
				container: container,
				selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
			};

			_.hooks.run('before-highlightall', env);

			env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));

			_.hooks.run('before-all-elements-highlight', env);

			for (var i = 0, element; (element = env.elements[i++]);) {
				_.highlightElement(element, async === true, env.callback);
			}
		},

		/**
		 * Highlights the code inside a single element.
		 *
		 * The following hooks will be run:
		 * 1. `before-sanity-check`
		 * 2. `before-highlight`
		 * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
		 * 4. `before-insert`
		 * 5. `after-highlight`
		 * 6. `complete`
		 *
		 * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
		 * the element's language.
		 *
		 * @param {Element} element The element containing the code.
		 * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
		 * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
		 * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
		 * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
		 *
		 * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
		 * asynchronous highlighting to work. You can build your own bundle on the
		 * [Download page](https://prismjs.com/download.html).
		 * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
		 * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
		 * @memberof Prism
		 * @public
		 */
		highlightElement: function (element, async, callback) {
			// Find language
			var language = _.util.getLanguage(element);
			var grammar = _.languages[language];

			// Set language on the element, if not present
			_.util.setLanguage(element, language);

			// Set language on the parent, for styling
			var parent = element.parentElement;
			if (parent && parent.nodeName.toLowerCase() === 'pre') {
				_.util.setLanguage(parent, language);
			}

			var code = element.textContent;

			var env = {
				element: element,
				language: language,
				grammar: grammar,
				code: code
			};

			function insertHighlightedCode(highlightedCode) {
				env.highlightedCode = highlightedCode;

				_.hooks.run('before-insert', env);

				env.element.innerHTML = env.highlightedCode;

				_.hooks.run('after-highlight', env);
				_.hooks.run('complete', env);
				callback && callback.call(env.element);
			}

			_.hooks.run('before-sanity-check', env);

			// plugins may change/add the parent/element
			parent = env.element.parentElement;
			if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {
				parent.setAttribute('tabindex', '0');
			}

			if (!env.code) {
				_.hooks.run('complete', env);
				callback && callback.call(env.element);
				return;
			}

			_.hooks.run('before-highlight', env);

			if (!env.grammar) {
				insertHighlightedCode(_.util.encode(env.code));
				return;
			}

			if (async && _self.Worker) {
				var worker = new Worker(_.filename);

				worker.onmessage = function (evt) {
					insertHighlightedCode(evt.data);
				};

				worker.postMessage(JSON.stringify({
					language: env.language,
					code: env.code,
					immediateClose: true
				}));
			} else {
				insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
			}
		},

		/**
		 * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
		 * and the language definitions to use, and returns a string with the HTML produced.
		 *
		 * The following hooks will be run:
		 * 1. `before-tokenize`
		 * 2. `after-tokenize`
		 * 3. `wrap`: On each {@link Token}.
		 *
		 * @param {string} text A string with the code to be highlighted.
		 * @param {Grammar} grammar An object containing the tokens to use.
		 *
		 * Usually a language definition like `Prism.languages.markup`.
		 * @param {string} language The name of the language definition passed to `grammar`.
		 * @returns {string} The highlighted HTML.
		 * @memberof Prism
		 * @public
		 * @example
		 * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
		 */
		highlight: function (text, grammar, language) {
			var env = {
				code: text,
				grammar: grammar,
				language: language
			};
			_.hooks.run('before-tokenize', env);
			if (!env.grammar) {
				throw new Error('The language "' + env.language + '" has no grammar.');
			}
			env.tokens = _.tokenize(env.code, env.grammar);
			_.hooks.run('after-tokenize', env);
			return Token.stringify(_.util.encode(env.tokens), env.language);
		},

		/**
		 * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
		 * and the language definitions to use, and returns an array with the tokenized code.
		 *
		 * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
		 *
		 * This method could be useful in other contexts as well, as a very crude parser.
		 *
		 * @param {string} text A string with the code to be highlighted.
		 * @param {Grammar} grammar An object containing the tokens to use.
		 *
		 * Usually a language definition like `Prism.languages.markup`.
		 * @returns {TokenStream} An array of strings and tokens, a token stream.
		 * @memberof Prism
		 * @public
		 * @example
		 * let code = `var foo = 0;`;
		 * let tokens = Prism.tokenize(code, Prism.languages.javascript);
		 * tokens.forEach(token => {
		 *     if (token instanceof Prism.Token && token.type === 'number') {
		 *         console.log(`Found numeric literal: ${token.content}`);
		 *     }
		 * });
		 */
		tokenize: function (text, grammar) {
			var rest = grammar.rest;
			if (rest) {
				for (var token in rest) {
					grammar[token] = rest[token];
				}

				delete grammar.rest;
			}

			var tokenList = new LinkedList();
			addAfter(tokenList, tokenList.head, text);

			matchGrammar(text, tokenList, grammar, tokenList.head, 0);

			return toArray(tokenList);
		},

		/**
		 * @namespace
		 * @memberof Prism
		 * @public
		 */
		hooks: {
			all: {},

			/**
			 * Adds the given callback to the list of callbacks for the given hook.
			 *
			 * The callback will be invoked when the hook it is registered for is run.
			 * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
			 *
			 * One callback function can be registered to multiple hooks and the same hook multiple times.
			 *
			 * @param {string} name The name of the hook.
			 * @param {HookCallback} callback The callback function which is given environment variables.
			 * @public
			 */
			add: function (name, callback) {
				var hooks = _.hooks.all;

				hooks[name] = hooks[name] || [];

				hooks[name].push(callback);
			},

			/**
			 * Runs a hook invoking all registered callbacks with the given environment variables.
			 *
			 * Callbacks will be invoked synchronously and in the order in which they were registered.
			 *
			 * @param {string} name The name of the hook.
			 * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
			 * @public
			 */
			run: function (name, env) {
				var callbacks = _.hooks.all[name];

				if (!callbacks || !callbacks.length) {
					return;
				}

				for (var i = 0, callback; (callback = callbacks[i++]);) {
					callback(env);
				}
			}
		},

		Token: Token
	};
	_self.Prism = _;


	// Typescript note:
	// The following can be used to import the Token type in JSDoc:
	//
	//   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

	/**
	 * Creates a new token.
	 *
	 * @param {string} type See {@link Token#type type}
	 * @param {string | TokenStream} content See {@link Token#content content}
	 * @param {string|string[]} [alias] The alias(es) of the token.
	 * @param {string} [matchedStr=""] A copy of the full string this token was created from.
	 * @class
	 * @global
	 * @public
	 */
	function Token(type, content, alias, matchedStr) {
		/**
		 * The type of the token.
		 *
		 * This is usually the key of a pattern in a {@link Grammar}.
		 *
		 * @type {string}
		 * @see GrammarToken
		 * @public
		 */
		this.type = type;
		/**
		 * The strings or tokens contained by this token.
		 *
		 * This will be a token stream if the pattern matched also defined an `inside` grammar.
		 *
		 * @type {string | TokenStream}
		 * @public
		 */
		this.content = content;
		/**
		 * The alias(es) of the token.
		 *
		 * @type {string|string[]}
		 * @see GrammarToken
		 * @public
		 */
		this.alias = alias;
		// Copy of the full string this token was created from
		this.length = (matchedStr || '').length | 0;
	}

	/**
	 * A token stream is an array of strings and {@link Token Token} objects.
	 *
	 * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
	 * them.
	 *
	 * 1. No adjacent strings.
	 * 2. No empty strings.
	 *
	 *    The only exception here is the token stream that only contains the empty string and nothing else.
	 *
	 * @typedef {Array<string | Token>} TokenStream
	 * @global
	 * @public
	 */

	/**
	 * Converts the given token or token stream to an HTML representation.
	 *
	 * The following hooks will be run:
	 * 1. `wrap`: On each {@link Token}.
	 *
	 * @param {string | Token | TokenStream} o The token or token stream to be converted.
	 * @param {string} language The name of current language.
	 * @returns {string} The HTML representation of the token or token stream.
	 * @memberof Token
	 * @static
	 */
	Token.stringify = function stringify(o, language) {
		if (typeof o == 'string') {
			return o;
		}
		if (Array.isArray(o)) {
			var s = '';
			o.forEach(function (e) {
				s += stringify(e, language);
			});
			return s;
		}

		var env = {
			type: o.type,
			content: stringify(o.content, language),
			tag: 'span',
			classes: ['token', o.type],
			attributes: {},
			language: language
		};

		var aliases = o.alias;
		if (aliases) {
			if (Array.isArray(aliases)) {
				Array.prototype.push.apply(env.classes, aliases);
			} else {
				env.classes.push(aliases);
			}
		}

		_.hooks.run('wrap', env);

		var attributes = '';
		for (var name in env.attributes) {
			attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
		}

		return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
	};

	/**
	 * @param {RegExp} pattern
	 * @param {number} pos
	 * @param {string} text
	 * @param {boolean} lookbehind
	 * @returns {RegExpExecArray | null}
	 */
	function matchPattern(pattern, pos, text, lookbehind) {
		pattern.lastIndex = pos;
		var match = pattern.exec(text);
		if (match && lookbehind && match[1]) {
			// change the match to remove the text matched by the Prism lookbehind group
			var lookbehindLength = match[1].length;
			match.index += lookbehindLength;
			match[0] = match[0].slice(lookbehindLength);
		}
		return match;
	}

	/**
	 * @param {string} text
	 * @param {LinkedList<string | Token>} tokenList
	 * @param {any} grammar
	 * @param {LinkedListNode<string | Token>} startNode
	 * @param {number} startPos
	 * @param {RematchOptions} [rematch]
	 * @returns {void}
	 * @private
	 *
	 * @typedef RematchOptions
	 * @property {string} cause
	 * @property {number} reach
	 */
	function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
		for (var token in grammar) {
			if (!grammar.hasOwnProperty(token) || !grammar[token]) {
				continue;
			}

			var patterns = grammar[token];
			patterns = Array.isArray(patterns) ? patterns : [patterns];

			for (var j = 0; j < patterns.length; ++j) {
				if (rematch && rematch.cause == token + ',' + j) {
					return;
				}

				var patternObj = patterns[j];
				var inside = patternObj.inside;
				var lookbehind = !!patternObj.lookbehind;
				var greedy = !!patternObj.greedy;
				var alias = patternObj.alias;

				if (greedy && !patternObj.pattern.global) {
					// Without the global flag, lastIndex won't work
					var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
					patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
				}

				/** @type {RegExp} */
				var pattern = patternObj.pattern || patternObj;

				for ( // iterate the token list and keep track of the current token/string position
					var currentNode = startNode.next, pos = startPos;
					currentNode !== tokenList.tail;
					pos += currentNode.value.length, currentNode = currentNode.next
				) {

					if (rematch && pos >= rematch.reach) {
						break;
					}

					var str = currentNode.value;

					if (tokenList.length > text.length) {
						// Something went terribly wrong, ABORT, ABORT!
						return;
					}

					if (str instanceof Token) {
						continue;
					}

					var removeCount = 1; // this is the to parameter of removeBetween
					var match;

					if (greedy) {
						match = matchPattern(pattern, pos, text, lookbehind);
						if (!match || match.index >= text.length) {
							break;
						}

						var from = match.index;
						var to = match.index + match[0].length;
						var p = pos;

						// find the node that contains the match
						p += currentNode.value.length;
						while (from >= p) {
							currentNode = currentNode.next;
							p += currentNode.value.length;
						}
						// adjust pos (and p)
						p -= currentNode.value.length;
						pos = p;

						// the current node is a Token, then the match starts inside another Token, which is invalid
						if (currentNode.value instanceof Token) {
							continue;
						}

						// find the last node which is affected by this match
						for (
							var k = currentNode;
							k !== tokenList.tail && (p < to || typeof k.value === 'string');
							k = k.next
						) {
							removeCount++;
							p += k.value.length;
						}
						removeCount--;

						// replace with the new match
						str = text.slice(pos, p);
						match.index -= pos;
					} else {
						match = matchPattern(pattern, 0, str, lookbehind);
						if (!match) {
							continue;
						}
					}

					// eslint-disable-next-line no-redeclare
					var from = match.index;
					var matchStr = match[0];
					var before = str.slice(0, from);
					var after = str.slice(from + matchStr.length);

					var reach = pos + str.length;
					if (rematch && reach > rematch.reach) {
						rematch.reach = reach;
					}

					var removeFrom = currentNode.prev;

					if (before) {
						removeFrom = addAfter(tokenList, removeFrom, before);
						pos += before.length;
					}

					removeRange(tokenList, removeFrom, removeCount);

					var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
					currentNode = addAfter(tokenList, removeFrom, wrapped);

					if (after) {
						addAfter(tokenList, currentNode, after);
					}

					if (removeCount > 1) {
						// at least one Token object was removed, so we have to do some rematching
						// this can only happen if the current pattern is greedy

						/** @type {RematchOptions} */
						var nestedRematch = {
							cause: token + ',' + j,
							reach: reach
						};
						matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);

						// the reach might have been extended because of the rematching
						if (rematch && nestedRematch.reach > rematch.reach) {
							rematch.reach = nestedRematch.reach;
						}
					}
				}
			}
		}
	}

	/**
	 * @typedef LinkedListNode
	 * @property {T} value
	 * @property {LinkedListNode<T> | null} prev The previous node.
	 * @property {LinkedListNode<T> | null} next The next node.
	 * @template T
	 * @private
	 */

	/**
	 * @template T
	 * @private
	 */
	function LinkedList() {
		/** @type {LinkedListNode<T>} */
		var head = { value: null, prev: null, next: null };
		/** @type {LinkedListNode<T>} */
		var tail = { value: null, prev: head, next: null };
		head.next = tail;

		/** @type {LinkedListNode<T>} */
		this.head = head;
		/** @type {LinkedListNode<T>} */
		this.tail = tail;
		this.length = 0;
	}

	/**
	 * Adds a new node with the given value to the list.
	 *
	 * @param {LinkedList<T>} list
	 * @param {LinkedListNode<T>} node
	 * @param {T} value
	 * @returns {LinkedListNode<T>} The added node.
	 * @template T
	 */
	function addAfter(list, node, value) {
		// assumes that node != list.tail && values.length >= 0
		var next = node.next;

		var newNode = { value: value, prev: node, next: next };
		node.next = newNode;
		next.prev = newNode;
		list.length++;

		return newNode;
	}
	/**
	 * Removes `count` nodes after the given node. The given node will not be removed.
	 *
	 * @param {LinkedList<T>} list
	 * @param {LinkedListNode<T>} node
	 * @param {number} count
	 * @template T
	 */
	function removeRange(list, node, count) {
		var next = node.next;
		for (var i = 0; i < count && next !== list.tail; i++) {
			next = next.next;
		}
		node.next = next;
		next.prev = node;
		list.length -= i;
	}
	/**
	 * @param {LinkedList<T>} list
	 * @returns {T[]}
	 * @template T
	 */
	function toArray(list) {
		var array = [];
		var node = list.head.next;
		while (node !== list.tail) {
			array.push(node.value);
			node = node.next;
		}
		return array;
	}


	if (!_self.document) {
		if (!_self.addEventListener) {
			// in Node.js
			return _;
		}

		if (!_.disableWorkerMessageHandler) {
			// In worker
			_self.addEventListener('message', function (evt) {
				var message = JSON.parse(evt.data);
				var lang = message.language;
				var code = message.code;
				var immediateClose = message.immediateClose;

				_self.postMessage(_.highlight(code, _.languages[lang], lang));
				if (immediateClose) {
					_self.close();
				}
			}, false);
		}

		return _;
	}

	// Get current script and highlight
	var script = _.util.currentScript();

	if (script) {
		_.filename = script.src;

		if (script.hasAttribute('data-manual')) {
			_.manual = true;
		}
	}

	function highlightAutomaticallyCallback() {
		if (!_.manual) {
			_.highlightAll();
		}
	}

	if (!_.manual) {
		// If the document state is "loading", then we'll use DOMContentLoaded.
		// If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
		// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
		// might take longer one animation frame to execute which can create a race condition where only some plugins have
		// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
		// See https://github.com/PrismJS/prism/issues/2102
		var readyState = document.readyState;
		if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {
			document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);
		} else {
			if (window.requestAnimationFrame) {
				window.requestAnimationFrame(highlightAutomaticallyCallback);
			} else {
				window.setTimeout(highlightAutomaticallyCallback, 16);
			}
		}
	}

	return _;

}(_self));

if ( true && module.exports) {
	module.exports = Prism;
}

// hack for components to work correctly in node.js
if (typeof __webpack_require__.g !== 'undefined') {
	__webpack_require__.g.Prism = Prism;
}

// some additional documentation/types

/**
 * The expansion of a simple `RegExp` literal to support additional properties.
 *
 * @typedef GrammarToken
 * @property {RegExp} pattern The regular expression of the token.
 * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
 * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
 * @property {boolean} [greedy=false] Whether the token is greedy.
 * @property {string|string[]} [alias] An optional alias or list of aliases.
 * @property {Grammar} [inside] The nested grammar of this token.
 *
 * The `inside` grammar will be used to tokenize the text value of each token of this kind.
 *
 * This can be used to make nested and even recursive language definitions.
 *
 * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
 * each another.
 * @global
 * @public
 */

/**
 * @typedef Grammar
 * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
 * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
 * @global
 * @public
 */

/**
 * A function which will invoked after an element was successfully highlighted.
 *
 * @callback HighlightCallback
 * @param {Element} element The element successfully highlighted.
 * @returns {void}
 * @global
 * @public
 */

/**
 * @callback HookCallback
 * @param {Object<string, any>} env The environment variables of the hook.
 * @returns {void}
 * @global
 * @public
 */


/* **********************************************
     Begin prism-markup.js
********************************************** */

Prism.languages.markup = {
	'comment': {
		pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
		greedy: true
	},
	'prolog': {
		pattern: /<\?[\s\S]+?\?>/,
		greedy: true
	},
	'doctype': {
		// https://www.w3.org/TR/xml/#NT-doctypedecl
		pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
		greedy: true,
		inside: {
			'internal-subset': {
				pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
				lookbehind: true,
				greedy: true,
				inside: null // see below
			},
			'string': {
				pattern: /"[^"]*"|'[^']*'/,
				greedy: true
			},
			'punctuation': /^<!|>$|[[\]]/,
			'doctype-tag': /^DOCTYPE/i,
			'name': /[^\s<>'"]+/
		}
	},
	'cdata': {
		pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
		greedy: true
	},
	'tag': {
		pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
		greedy: true,
		inside: {
			'tag': {
				pattern: /^<\/?[^\s>\/]+/,
				inside: {
					'punctuation': /^<\/?/,
					'namespace': /^[^\s>\/:]+:/
				}
			},
			'special-attr': [],
			'attr-value': {
				pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
				inside: {
					'punctuation': [
						{
							pattern: /^=/,
							alias: 'attr-equals'
						},
						/"|'/
					]
				}
			},
			'punctuation': /\/?>/,
			'attr-name': {
				pattern: /[^\s>\/]+/,
				inside: {
					'namespace': /^[^\s>\/:]+:/
				}
			}

		}
	},
	'entity': [
		{
			pattern: /&[\da-z]{1,8};/i,
			alias: 'named-entity'
		},
		/&#x?[\da-f]{1,8};/i
	]
};

Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
	Prism.languages.markup['entity'];
Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {

	if (env.type === 'entity') {
		env.attributes['title'] = env.content.replace(/&amp;/, '&');
	}
});

Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
	/**
	 * Adds an inlined language to markup.
	 *
	 * An example of an inlined language is CSS with `<style>` tags.
	 *
	 * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addInlined('style', 'css');
	 */
	value: function addInlined(tagName, lang) {
		var includedCdataInside = {};
		includedCdataInside['language-' + lang] = {
			pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
			lookbehind: true,
			inside: Prism.languages[lang]
		};
		includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;

		var inside = {
			'included-cdata': {
				pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
				inside: includedCdataInside
			}
		};
		inside['language-' + lang] = {
			pattern: /[\s\S]+/,
			inside: Prism.languages[lang]
		};

		var def = {};
		def[tagName] = {
			pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),
			lookbehind: true,
			greedy: true,
			inside: inside
		};

		Prism.languages.insertBefore('markup', 'cdata', def);
	}
});
Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
	/**
	 * Adds an pattern to highlight languages embedded in HTML attributes.
	 *
	 * An example of an inlined language is CSS with `style` attributes.
	 *
	 * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addAttribute('style', 'css');
	 */
	value: function (attrName, lang) {
		Prism.languages.markup.tag.inside['special-attr'].push({
			pattern: RegExp(
				/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
				'i'
			),
			lookbehind: true,
			inside: {
				'attr-name': /^[^\s=]+/,
				'attr-value': {
					pattern: /=[\s\S]+/,
					inside: {
						'value': {
							pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
							lookbehind: true,
							alias: [lang, 'language-' + lang],
							inside: Prism.languages[lang]
						},
						'punctuation': [
							{
								pattern: /^=/,
								alias: 'attr-equals'
							},
							/"|'/
						]
					}
				}
			}
		});
	}
});

Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;

Prism.languages.xml = Prism.languages.extend('markup', {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;


/* **********************************************
     Begin prism-css.js
********************************************** */

(function (Prism) {

	var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;

	Prism.languages.css = {
		'comment': /\/\*[\s\S]*?\*\//,
		'atrule': {
			pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
			inside: {
				'rule': /^@[\w-]+/,
				'selector-function-argument': {
					pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
					lookbehind: true,
					alias: 'selector'
				},
				'keyword': {
					pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
					lookbehind: true
				}
				// See rest below
			}
		},
		'url': {
			// https://drafts.csswg.org/css-values-3/#urls
			pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
			greedy: true,
			inside: {
				'function': /^url/i,
				'punctuation': /^\(|\)$/,
				'string': {
					pattern: RegExp('^' + string.source + '$'),
					alias: 'url'
				}
			}
		},
		'selector': {
			pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
			lookbehind: true
		},
		'string': {
			pattern: string,
			greedy: true
		},
		'property': {
			pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
			lookbehind: true
		},
		'important': /!important\b/i,
		'function': {
			pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
			lookbehind: true
		},
		'punctuation': /[(){};:,]/
	};

	Prism.languages.css['atrule'].inside.rest = Prism.languages.css;

	var markup = Prism.languages.markup;
	if (markup) {
		markup.tag.addInlined('style', 'css');
		markup.tag.addAttribute('style', 'css');
	}

}(Prism));


/* **********************************************
     Begin prism-clike.js
********************************************** */

Prism.languages.clike = {
	'comment': [
		{
			pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
			lookbehind: true,
			greedy: true
		},
		{
			pattern: /(^|[^\\:])\/\/.*/,
			lookbehind: true,
			greedy: true
		}
	],
	'string': {
		pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		greedy: true
	},
	'class-name': {
		pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
		lookbehind: true,
		inside: {
			'punctuation': /[.\\]/
		}
	},
	'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
	'boolean': /\b(?:false|true)\b/,
	'function': /\b\w+(?=\()/,
	'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
	'punctuation': /[{}[\];(),.:]/
};


/* **********************************************
     Begin prism-javascript.js
********************************************** */

Prism.languages.javascript = Prism.languages.extend('clike', {
	'class-name': [
		Prism.languages.clike['class-name'],
		{
			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
			lookbehind: true
		}
	],
	'keyword': [
		{
			pattern: /((?:^|\})\s*)catch\b/,
			lookbehind: true
		},
		{
			pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
			lookbehind: true
		},
	],
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
	'number': {
		pattern: RegExp(
			/(^|[^\w$])/.source +
			'(?:' +
			(
				// constant
				/NaN|Infinity/.source +
				'|' +
				// binary integer
				/0[bB][01]+(?:_[01]+)*n?/.source +
				'|' +
				// octal integer
				/0[oO][0-7]+(?:_[0-7]+)*n?/.source +
				'|' +
				// hexadecimal integer
				/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source +
				'|' +
				// decimal bigint
				/\d+(?:_\d+)*n/.source +
				'|' +
				// decimal number (integer or float) but no bigint
				/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source
			) +
			')' +
			/(?![\w$])/.source
		),
		lookbehind: true
	},
	'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});

Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;

Prism.languages.insertBefore('javascript', 'keyword', {
	'regex': {
		pattern: RegExp(
			// lookbehind
			// eslint-disable-next-line regexp/no-dupe-characters-character-class
			/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +
			// Regex pattern:
			// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
			// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
			// with the only syntax, so we have to define 2 different regex patterns.
			/\//.source +
			'(?:' +
			/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source +
			'|' +
			// `v` flag syntax. This supports 3 levels of nested character classes.
			/(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +
			')' +
			// lookahead
			/(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source
		),
		lookbehind: true,
		greedy: true,
		inside: {
			'regex-source': {
				pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
				lookbehind: true,
				alias: 'language-regex',
				inside: Prism.languages.regex
			},
			'regex-delimiter': /^\/|\/$/,
			'regex-flags': /^[a-z]+$/,
		}
	},
	// This must be declared before keyword because we use "function" inside the look-forward
	'function-variable': {
		pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
		alias: 'function'
	},
	'parameter': [
		{
			pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
			lookbehind: true,
			inside: Prism.languages.javascript
		}
	],
	'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});

Prism.languages.insertBefore('javascript', 'string', {
	'hashbang': {
		pattern: /^#!.*/,
		greedy: true,
		alias: 'comment'
	},
	'template-string': {
		pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
		greedy: true,
		inside: {
			'template-punctuation': {
				pattern: /^`|`$/,
				alias: 'string'
			},
			'interpolation': {
				pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
				lookbehind: true,
				inside: {
					'interpolation-punctuation': {
						pattern: /^\$\{|\}$/,
						alias: 'punctuation'
					},
					rest: Prism.languages.javascript
				}
			},
			'string': /[\s\S]+/
		}
	},
	'string-property': {
		pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
		lookbehind: true,
		greedy: true,
		alias: 'property'
	}
});

Prism.languages.insertBefore('javascript', 'operator', {
	'literal-property': {
		pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
		lookbehind: true,
		alias: 'property'
	},
});

if (Prism.languages.markup) {
	Prism.languages.markup.tag.addInlined('script', 'javascript');

	// add attribute support for all DOM events.
	// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
	Prism.languages.markup.tag.addAttribute(
		/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
		'javascript'
	);
}

Prism.languages.js = Prism.languages.javascript;


/* **********************************************
     Begin prism-file-highlight.js
********************************************** */

(function () {

	if (typeof Prism === 'undefined' || typeof document === 'undefined') {
		return;
	}

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
	if (!Element.prototype.matches) {
		Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
	}

	var LOADING_MESSAGE = 'Loading…';
	var FAILURE_MESSAGE = function (status, message) {
		return '✖ Error ' + status + ' while fetching file: ' + message;
	};
	var FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';

	var EXTENSIONS = {
		'js': 'javascript',
		'py': 'python',
		'rb': 'ruby',
		'ps1': 'powershell',
		'psm1': 'powershell',
		'sh': 'bash',
		'bat': 'batch',
		'h': 'c',
		'tex': 'latex'
	};

	var STATUS_ATTR = 'data-src-status';
	var STATUS_LOADING = 'loading';
	var STATUS_LOADED = 'loaded';
	var STATUS_FAILED = 'failed';

	var SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '="' + STATUS_LOADED + '"])'
		+ ':not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';

	/**
	 * Loads the given file.
	 *
	 * @param {string} src The URL or path of the source file to load.
	 * @param {(result: string) => void} success
	 * @param {(reason: string) => void} error
	 */
	function loadFile(src, success, error) {
		var xhr = new XMLHttpRequest();
		xhr.open('GET', src, true);
		xhr.onreadystatechange = function () {
			if (xhr.readyState == 4) {
				if (xhr.status < 400 && xhr.responseText) {
					success(xhr.responseText);
				} else {
					if (xhr.status >= 400) {
						error(FAILURE_MESSAGE(xhr.status, xhr.statusText));
					} else {
						error(FAILURE_EMPTY_MESSAGE);
					}
				}
			}
		};
		xhr.send(null);
	}

	/**
	 * Parses the given range.
	 *
	 * This returns a range with inclusive ends.
	 *
	 * @param {string | null | undefined} range
	 * @returns {[number, number | undefined] | undefined}
	 */
	function parseRange(range) {
		var m = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range || '');
		if (m) {
			var start = Number(m[1]);
			var comma = m[2];
			var end = m[3];

			if (!comma) {
				return [start, start];
			}
			if (!end) {
				return [start, undefined];
			}
			return [start, Number(end)];
		}
		return undefined;
	}

	Prism.hooks.add('before-highlightall', function (env) {
		env.selector += ', ' + SELECTOR;
	});

	Prism.hooks.add('before-sanity-check', function (env) {
		var pre = /** @type {HTMLPreElement} */ (env.element);
		if (pre.matches(SELECTOR)) {
			env.code = ''; // fast-path the whole thing and go to complete

			pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading

			// add code element with loading message
			var code = pre.appendChild(document.createElement('CODE'));
			code.textContent = LOADING_MESSAGE;

			var src = pre.getAttribute('data-src');

			var language = env.language;
			if (language === 'none') {
				// the language might be 'none' because there is no language set;
				// in this case, we want to use the extension as the language
				var extension = (/\.(\w+)$/.exec(src) || [, 'none'])[1];
				language = EXTENSIONS[extension] || extension;
			}

			// set language classes
			Prism.util.setLanguage(code, language);
			Prism.util.setLanguage(pre, language);

			// preload the language
			var autoloader = Prism.plugins.autoloader;
			if (autoloader) {
				autoloader.loadLanguages(language);
			}

			// load file
			loadFile(
				src,
				function (text) {
					// mark as loaded
					pre.setAttribute(STATUS_ATTR, STATUS_LOADED);

					// handle data-range
					var range = parseRange(pre.getAttribute('data-range'));
					if (range) {
						var lines = text.split(/\r\n?|\n/g);

						// the range is one-based and inclusive on both ends
						var start = range[0];
						var end = range[1] == null ? lines.length : range[1];

						if (start < 0) { start += lines.length; }
						start = Math.max(0, Math.min(start - 1, lines.length));
						if (end < 0) { end += lines.length; }
						end = Math.max(0, Math.min(end, lines.length));

						text = lines.slice(start, end).join('\n');

						// add data-start for line numbers
						if (!pre.hasAttribute('data-start')) {
							pre.setAttribute('data-start', String(start + 1));
						}
					}

					// highlight code
					code.textContent = text;
					Prism.highlightElement(code);
				},
				function (error) {
					// mark as failed
					pre.setAttribute(STATUS_ATTR, STATUS_FAILED);

					code.textContent = error;
				}
			);
		}
	});

	Prism.plugins.fileHighlight = {
		/**
		 * Executes the File Highlight plugin for all matching `pre` elements under the given container.
		 *
		 * Note: Elements which are already loaded or currently loading will not be touched by this method.
		 *
		 * @param {ParentNode} [container=document]
		 */
		highlight: function highlight(container) {
			var elements = (container || document).querySelectorAll(SELECTOR);

			for (var i = 0, element; (element = elements[i++]);) {
				Prism.highlightElement(element);
			}
		}
	};

	var logged = false;
	/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */
	Prism.fileHighlight = function () {
		if (!logged) {
			console.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');
			logged = true;
		}
		Prism.plugins.fileHighlight.highlight.apply(this, arguments);
	};

}());


/***/ }),

/***/ "../structured-text-editor/node_modules/tippy.js/dist/tippy.esm.js":
/*!*************************************************************************!*\
  !*** ../structured-text-editor/node_modules/tippy.js/dist/tippy.esm.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "animateFill": () => (/* binding */ animateFill),
/* harmony export */   "createSingleton": () => (/* binding */ createSingleton),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "delegate": () => (/* binding */ delegate),
/* harmony export */   "followCursor": () => (/* binding */ followCursor),
/* harmony export */   "hideAll": () => (/* binding */ hideAll),
/* harmony export */   "inlinePositioning": () => (/* binding */ inlinePositioning),
/* harmony export */   "roundArrow": () => (/* binding */ ROUND_ARROW),
/* harmony export */   "sticky": () => (/* binding */ sticky)
/* harmony export */ });
/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ "../structured-text-editor/node_modules/@popperjs/core/lib/popper.js");
/**!
* tippy.js v6.2.3
* (c) 2017-2020 atomiks
* MIT License
*/


var ROUND_ARROW = '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>';
var BOX_CLASS = "tippy-box";
var CONTENT_CLASS = "tippy-content";
var BACKDROP_CLASS = "tippy-backdrop";
var ARROW_CLASS = "tippy-arrow";
var SVG_ARROW_CLASS = "tippy-svg-arrow";
var TOUCH_OPTIONS = {
  passive: true,
  capture: true
};

function hasOwnProperty(obj, key) {
  return {}.hasOwnProperty.call(obj, key);
}
function getValueAtIndexOrReturn(value, index, defaultValue) {
  if (Array.isArray(value)) {
    var v = value[index];
    return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
  }

  return value;
}
function isType(value, type) {
  var str = {}.toString.call(value);
  return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
}
function invokeWithArgsOrReturn(value, args) {
  return typeof value === 'function' ? value.apply(void 0, args) : value;
}
function debounce(fn, ms) {
  // Avoid wrapping in `setTimeout` if ms is 0 anyway
  if (ms === 0) {
    return fn;
  }

  var timeout;
  return function (arg) {
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      fn(arg);
    }, ms);
  };
}
function removeProperties(obj, keys) {
  var clone = Object.assign({}, obj);
  keys.forEach(function (key) {
    delete clone[key];
  });
  return clone;
}
function splitBySpaces(value) {
  return value.split(/\s+/).filter(Boolean);
}
function normalizeToArray(value) {
  return [].concat(value);
}
function pushIfUnique(arr, value) {
  if (arr.indexOf(value) === -1) {
    arr.push(value);
  }
}
function unique(arr) {
  return arr.filter(function (item, index) {
    return arr.indexOf(item) === index;
  });
}
function getBasePlacement(placement) {
  return placement.split('-')[0];
}
function arrayFrom(value) {
  return [].slice.call(value);
}

function div() {
  return document.createElement('div');
}
function isElement(value) {
  return ['Element', 'Fragment'].some(function (type) {
    return isType(value, type);
  });
}
function isNodeList(value) {
  return isType(value, 'NodeList');
}
function isMouseEvent(value) {
  return isType(value, 'MouseEvent');
}
function isReferenceElement(value) {
  return !!(value && value._tippy && value._tippy.reference === value);
}
function getArrayOfElements(value) {
  if (isElement(value)) {
    return [value];
  }

  if (isNodeList(value)) {
    return arrayFrom(value);
  }

  if (Array.isArray(value)) {
    return value;
  }

  return arrayFrom(document.querySelectorAll(value));
}
function setTransitionDuration(els, value) {
  els.forEach(function (el) {
    if (el) {
      el.style.transitionDuration = value + "ms";
    }
  });
}
function setVisibilityState(els, state) {
  els.forEach(function (el) {
    if (el) {
      el.setAttribute('data-state', state);
    }
  });
}
function getOwnerDocument(elementOrElements) {
  var _normalizeToArray = normalizeToArray(elementOrElements),
      element = _normalizeToArray[0];

  return element ? element.ownerDocument || document : document;
}
function isCursorOutsideInteractiveBorder(popperTreeData, event) {
  var clientX = event.clientX,
      clientY = event.clientY;
  return popperTreeData.every(function (_ref) {
    var popperRect = _ref.popperRect,
        popperState = _ref.popperState,
        props = _ref.props;
    var interactiveBorder = props.interactiveBorder;
    var basePlacement = getBasePlacement(popperState.placement);
    var offsetData = popperState.modifiersData.offset;

    if (!offsetData) {
      return true;
    }

    var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
    var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
    var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
    var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
    var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
    var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
    var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
    var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
    return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
  });
}
function updateTransitionEndListener(box, action, listener) {
  var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
  // `webkitTransitionEnd`...

  ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
    box[method](event, listener);
  });
}

var currentInput = {
  isTouch: false
};
var lastMouseMoveTime = 0;
/**
 * When a `touchstart` event is fired, it's assumed the user is using touch
 * input. We'll bind a `mousemove` event listener to listen for mouse input in
 * the future. This way, the `isTouch` property is fully dynamic and will handle
 * hybrid devices that use a mix of touch + mouse input.
 */

function onDocumentTouchStart() {
  if (currentInput.isTouch) {
    return;
  }

  currentInput.isTouch = true;

  if (window.performance) {
    document.addEventListener('mousemove', onDocumentMouseMove);
  }
}
/**
 * When two `mousemove` event are fired consecutively within 20ms, it's assumed
 * the user is using mouse input again. `mousemove` can fire on touch devices as
 * well, but very rarely that quickly.
 */

function onDocumentMouseMove() {
  var now = performance.now();

  if (now - lastMouseMoveTime < 20) {
    currentInput.isTouch = false;
    document.removeEventListener('mousemove', onDocumentMouseMove);
  }

  lastMouseMoveTime = now;
}
/**
 * When an element is in focus and has a tippy, leaving the tab/window and
 * returning causes it to show again. For mouse users this is unexpected, but
 * for keyboard use it makes sense.
 * TODO: find a better technique to solve this problem
 */

function onWindowBlur() {
  var activeElement = document.activeElement;

  if (isReferenceElement(activeElement)) {
    var instance = activeElement._tippy;

    if (activeElement.blur && !instance.state.isVisible) {
      activeElement.blur();
    }
  }
}
function bindGlobalEventListeners() {
  document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
  window.addEventListener('blur', onWindowBlur);
}

var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
var ua = isBrowser ? navigator.userAgent : '';
var isIE = /MSIE |Trident\//.test(ua);

function createMemoryLeakWarning(method) {
  var txt = method === 'destroy' ? 'n already-' : ' ';
  return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", 'indicates a potential memory leak.'].join(' ');
}
function clean(value) {
  var spacesAndTabs = /[ \t]{2,}/g;
  var lineStartWithSpaces = /^[ \t]*/gm;
  return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
}

function getDevMessage(message) {
  return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
}

function getFormattedMessage(message) {
  return [getDevMessage(message), // title
  'color: #00C584; font-size: 1.3em; font-weight: bold;', // message
  'line-height: 1.5', // footer
  'color: #a6a095;'];
} // Assume warnings and errors never have the same message

var visitedMessages;

if (true) {
  resetVisitedMessages();
}

function resetVisitedMessages() {
  visitedMessages = new Set();
}
function warnWhen(condition, message) {
  if (condition && !visitedMessages.has(message)) {
    var _console;

    visitedMessages.add(message);

    (_console = console).warn.apply(_console, getFormattedMessage(message));
  }
}
function errorWhen(condition, message) {
  if (condition && !visitedMessages.has(message)) {
    var _console2;

    visitedMessages.add(message);

    (_console2 = console).error.apply(_console2, getFormattedMessage(message));
  }
}
function validateTargets(targets) {
  var didPassFalsyValue = !targets;
  var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
  errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));
  errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));
}

var pluginProps = {
  animateFill: false,
  followCursor: false,
  inlinePositioning: false,
  sticky: false
};
var renderProps = {
  allowHTML: false,
  animation: 'fade',
  arrow: true,
  content: '',
  inertia: false,
  maxWidth: 350,
  role: 'tooltip',
  theme: '',
  zIndex: 9999
};
var defaultProps = Object.assign({
  appendTo: function appendTo() {
    return document.body;
  },
  aria: {
    content: 'auto',
    expanded: 'auto'
  },
  delay: 0,
  duration: [300, 250],
  getReferenceClientRect: null,
  hideOnClick: true,
  ignoreAttributes: false,
  interactive: false,
  interactiveBorder: 2,
  interactiveDebounce: 0,
  moveTransition: '',
  offset: [0, 10],
  onAfterUpdate: function onAfterUpdate() {},
  onBeforeUpdate: function onBeforeUpdate() {},
  onCreate: function onCreate() {},
  onDestroy: function onDestroy() {},
  onHidden: function onHidden() {},
  onHide: function onHide() {},
  onMount: function onMount() {},
  onShow: function onShow() {},
  onShown: function onShown() {},
  onTrigger: function onTrigger() {},
  onUntrigger: function onUntrigger() {},
  onClickOutside: function onClickOutside() {},
  placement: 'top',
  plugins: [],
  popperOptions: {},
  render: null,
  showOnCreate: false,
  touch: true,
  trigger: 'mouseenter focus',
  triggerTarget: null
}, pluginProps, {}, renderProps);
var defaultKeys = Object.keys(defaultProps);
var setDefaultProps = function setDefaultProps(partialProps) {
  /* istanbul ignore else */
  if (true) {
    validateProps(partialProps, []);
  }

  var keys = Object.keys(partialProps);
  keys.forEach(function (key) {
    defaultProps[key] = partialProps[key];
  });
};
function getExtendedPassedProps(passedProps) {
  var plugins = passedProps.plugins || [];
  var pluginProps = plugins.reduce(function (acc, plugin) {
    var name = plugin.name,
        defaultValue = plugin.defaultValue;

    if (name) {
      acc[name] = passedProps[name] !== undefined ? passedProps[name] : defaultValue;
    }

    return acc;
  }, {});
  return Object.assign({}, passedProps, {}, pluginProps);
}
function getDataAttributeProps(reference, plugins) {
  var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
    plugins: plugins
  }))) : defaultKeys;
  var props = propKeys.reduce(function (acc, key) {
    var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

    if (!valueAsString) {
      return acc;
    }

    if (key === 'content') {
      acc[key] = valueAsString;
    } else {
      try {
        acc[key] = JSON.parse(valueAsString);
      } catch (e) {
        acc[key] = valueAsString;
      }
    }

    return acc;
  }, {});
  return props;
}
function evaluateProps(reference, props) {
  var out = Object.assign({}, props, {
    content: invokeWithArgsOrReturn(props.content, [reference])
  }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
  out.aria = Object.assign({}, defaultProps.aria, {}, out.aria);
  out.aria = {
    expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
    content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
  };
  return out;
}
function validateProps(partialProps, plugins) {
  if (partialProps === void 0) {
    partialProps = {};
  }

  if (plugins === void 0) {
    plugins = [];
  }

  var keys = Object.keys(partialProps);
  keys.forEach(function (prop) {
    var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
    var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`

    if (didPassUnknownProp) {
      didPassUnknownProp = plugins.filter(function (plugin) {
        return plugin.name === prop;
      }).length === 0;
    }

    warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", 'a plugin, forgot to pass it in an array as props.plugins.', '\n\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));
  });
}

var innerHTML = function innerHTML() {
  return 'innerHTML';
};

function dangerouslySetInnerHTML(element, html) {
  element[innerHTML()] = html;
}

function createArrowElement(value) {
  var arrow = div();

  if (value === true) {
    arrow.className = ARROW_CLASS;
  } else {
    arrow.className = SVG_ARROW_CLASS;

    if (isElement(value)) {
      arrow.appendChild(value);
    } else {
      dangerouslySetInnerHTML(arrow, value);
    }
  }

  return arrow;
}

function setContent(content, props) {
  if (isElement(props.content)) {
    dangerouslySetInnerHTML(content, '');
    content.appendChild(props.content);
  } else if (typeof props.content !== 'function') {
    if (props.allowHTML) {
      dangerouslySetInnerHTML(content, props.content);
    } else {
      content.textContent = props.content;
    }
  }
}
function getChildren(popper) {
  var box = popper.firstElementChild;
  var boxChildren = arrayFrom(box.children);
  return {
    box: box,
    content: boxChildren.find(function (node) {
      return node.classList.contains(CONTENT_CLASS);
    }),
    arrow: boxChildren.find(function (node) {
      return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
    }),
    backdrop: boxChildren.find(function (node) {
      return node.classList.contains(BACKDROP_CLASS);
    })
  };
}
function render(instance) {
  var popper = div();
  var box = div();
  box.className = BOX_CLASS;
  box.setAttribute('data-state', 'hidden');
  box.setAttribute('tabindex', '-1');
  var content = div();
  content.className = CONTENT_CLASS;
  content.setAttribute('data-state', 'hidden');
  setContent(content, instance.props);
  popper.appendChild(box);
  box.appendChild(content);
  onUpdate(instance.props, instance.props);

  function onUpdate(prevProps, nextProps) {
    var _getChildren = getChildren(popper),
        box = _getChildren.box,
        content = _getChildren.content,
        arrow = _getChildren.arrow;

    if (nextProps.theme) {
      box.setAttribute('data-theme', nextProps.theme);
    } else {
      box.removeAttribute('data-theme');
    }

    if (typeof nextProps.animation === 'string') {
      box.setAttribute('data-animation', nextProps.animation);
    } else {
      box.removeAttribute('data-animation');
    }

    if (nextProps.inertia) {
      box.setAttribute('data-inertia', '');
    } else {
      box.removeAttribute('data-inertia');
    }

    box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;

    if (nextProps.role) {
      box.setAttribute('role', nextProps.role);
    } else {
      box.removeAttribute('role');
    }

    if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
      setContent(content, instance.props);
    }

    if (nextProps.arrow) {
      if (!arrow) {
        box.appendChild(createArrowElement(nextProps.arrow));
      } else if (prevProps.arrow !== nextProps.arrow) {
        box.removeChild(arrow);
        box.appendChild(createArrowElement(nextProps.arrow));
      }
    } else if (arrow) {
      box.removeChild(arrow);
    }
  }

  return {
    popper: popper,
    onUpdate: onUpdate
  };
} // Runtime check to identify if the render function is the default one; this
// way we can apply default CSS transitions logic and it can be tree-shaken away

render.$$tippy = true;

var idCounter = 1;
var mouseMoveListeners = []; // Used by `hideAll()`

var mountedInstances = [];
function createTippy(reference, passedProps) {
  var props = evaluateProps(reference, Object.assign({}, defaultProps, {}, getExtendedPassedProps(passedProps))); // ===========================================================================
  // 🔒 Private members
  // ===========================================================================

  var showTimeout;
  var hideTimeout;
  var scheduleHideAnimationFrame;
  var isVisibleFromClick = false;
  var didHideDueToDocumentMouseDown = false;
  var didTouchMove = false;
  var ignoreOnFirstUpdate = false;
  var lastTriggerEvent;
  var currentTransitionEndListener;
  var onFirstUpdate;
  var listeners = [];
  var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
  var currentTarget;
  var doc = getOwnerDocument(props.triggerTarget || reference); // ===========================================================================
  // 🔑 Public members
  // ===========================================================================

  var id = idCounter++;
  var popperInstance = null;
  var plugins = unique(props.plugins);
  var state = {
    // Is the instance currently enabled?
    isEnabled: true,
    // Is the tippy currently showing and not transitioning out?
    isVisible: false,
    // Has the instance been destroyed?
    isDestroyed: false,
    // Is the tippy currently mounted to the DOM?
    isMounted: false,
    // Has the tippy finished transitioning in?
    isShown: false
  };
  var instance = {
    // properties
    id: id,
    reference: reference,
    popper: div(),
    popperInstance: popperInstance,
    props: props,
    state: state,
    plugins: plugins,
    // methods
    clearDelayTimeouts: clearDelayTimeouts,
    setProps: setProps,
    setContent: setContent,
    show: show,
    hide: hide,
    hideWithInteractivity: hideWithInteractivity,
    enable: enable,
    disable: disable,
    unmount: unmount,
    destroy: destroy
  }; // TODO: Investigate why this early return causes a TDZ error in the tests —
  // it doesn't seem to happen in the browser

  /* istanbul ignore if */

  if (!props.render) {
    if (true) {
      errorWhen(true, 'render() function has not been supplied.');
    }

    return instance;
  } // ===========================================================================
  // Initial mutations
  // ===========================================================================


  var _props$render = props.render(instance),
      popper = _props$render.popper,
      onUpdate = _props$render.onUpdate;

  popper.setAttribute('data-tippy-root', '');
  popper.id = "tippy-" + instance.id;
  instance.popper = popper;
  reference._tippy = instance;
  popper._tippy = instance;
  var pluginsHooks = plugins.map(function (plugin) {
    return plugin.fn(instance);
  });
  var hasAriaExpanded = reference.hasAttribute('aria-expanded');
  addListeners();
  handleAriaExpandedAttribute();
  handleStyles();
  invokeHook('onCreate', [instance]);

  if (props.showOnCreate) {
    scheduleShow();
  } // Prevent a tippy with a delay from hiding if the cursor left then returned
  // before it started hiding


  popper.addEventListener('mouseenter', function () {
    if (instance.props.interactive && instance.state.isVisible) {
      instance.clearDelayTimeouts();
    }
  });
  popper.addEventListener('mouseleave', function (event) {
    if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
      doc.addEventListener('mousemove', debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }
  });
  return instance; // ===========================================================================
  // 🔒 Private methods
  // ===========================================================================

  function getNormalizedTouchSettings() {
    var touch = instance.props.touch;
    return Array.isArray(touch) ? touch : [touch, 0];
  }

  function getIsCustomTouchBehavior() {
    return getNormalizedTouchSettings()[0] === 'hold';
  }

  function getIsDefaultRenderFn() {
    var _instance$props$rende;

    // @ts-ignore
    return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
  }

  function getCurrentTarget() {
    return currentTarget || reference;
  }

  function getDefaultTemplateChildren() {
    return getChildren(popper);
  }

  function getDelay(isShow) {
    // For touch or keyboard input, force `0` delay for UX reasons
    // Also if the instance is mounted but not visible (transitioning out),
    // ignore delay
    if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
      return 0;
    }

    return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
  }

  function handleStyles() {
    popper.style.pointerEvents = instance.props.interactive && instance.state.isVisible ? '' : 'none';
    popper.style.zIndex = "" + instance.props.zIndex;
  }

  function invokeHook(hook, args, shouldInvokePropsHook) {
    if (shouldInvokePropsHook === void 0) {
      shouldInvokePropsHook = true;
    }

    pluginsHooks.forEach(function (pluginHooks) {
      if (pluginHooks[hook]) {
        pluginHooks[hook].apply(void 0, args);
      }
    });

    if (shouldInvokePropsHook) {
      var _instance$props;

      (_instance$props = instance.props)[hook].apply(_instance$props, args);
    }
  }

  function handleAriaContentAttribute() {
    var aria = instance.props.aria;

    if (!aria.content) {
      return;
    }

    var attr = "aria-" + aria.content;
    var id = popper.id;
    var nodes = normalizeToArray(instance.props.triggerTarget || reference);
    nodes.forEach(function (node) {
      var currentValue = node.getAttribute(attr);

      if (instance.state.isVisible) {
        node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
      } else {
        var nextValue = currentValue && currentValue.replace(id, '').trim();

        if (nextValue) {
          node.setAttribute(attr, nextValue);
        } else {
          node.removeAttribute(attr);
        }
      }
    });
  }

  function handleAriaExpandedAttribute() {
    if (hasAriaExpanded || !instance.props.aria.expanded) {
      return;
    }

    var nodes = normalizeToArray(instance.props.triggerTarget || reference);
    nodes.forEach(function (node) {
      if (instance.props.interactive) {
        node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
      } else {
        node.removeAttribute('aria-expanded');
      }
    });
  }

  function cleanupInteractiveMouseListeners() {
    doc.body.removeEventListener('mouseleave', scheduleHide);
    doc.removeEventListener('mousemove', debouncedOnMouseMove);
    mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
      return listener !== debouncedOnMouseMove;
    });
  }

  function onDocumentPress(event) {
    // Moved finger to scroll instead of an intentional tap outside
    if (currentInput.isTouch) {
      if (didTouchMove || event.type === 'mousedown') {
        return;
      }
    } // Clicked on interactive popper


    if (instance.props.interactive && popper.contains(event.target)) {
      return;
    } // Clicked on the event listeners target


    if (getCurrentTarget().contains(event.target)) {
      if (currentInput.isTouch) {
        return;
      }

      if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
        return;
      }
    } else {
      invokeHook('onClickOutside', [instance, event]);
    }

    if (instance.props.hideOnClick === true) {
      isVisibleFromClick = false;
      instance.clearDelayTimeouts();
      instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
      // currentTarget. This lets a tippy with `focus` trigger know that it
      // should not show

      didHideDueToDocumentMouseDown = true;
      setTimeout(function () {
        didHideDueToDocumentMouseDown = false;
      }); // The listener gets added in `scheduleShow()`, but this may be hiding it
      // before it shows, and hide()'s early bail-out behavior can prevent it
      // from being cleaned up

      if (!instance.state.isMounted) {
        removeDocumentPress();
      }
    }
  }

  function onTouchMove() {
    didTouchMove = true;
  }

  function onTouchStart() {
    didTouchMove = false;
  }

  function addDocumentPress() {
    doc.addEventListener('mousedown', onDocumentPress, true);
    doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
    doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
    doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
  }

  function removeDocumentPress() {
    doc.removeEventListener('mousedown', onDocumentPress, true);
    doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
    doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
    doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
  }

  function onTransitionedOut(duration, callback) {
    onTransitionEnd(duration, function () {
      if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
        callback();
      }
    });
  }

  function onTransitionedIn(duration, callback) {
    onTransitionEnd(duration, callback);
  }

  function onTransitionEnd(duration, callback) {
    var box = getDefaultTemplateChildren().box;

    function listener(event) {
      if (event.target === box) {
        updateTransitionEndListener(box, 'remove', listener);
        callback();
      }
    } // Make callback synchronous if duration is 0
    // `transitionend` won't fire otherwise


    if (duration === 0) {
      return callback();
    }

    updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
    updateTransitionEndListener(box, 'add', listener);
    currentTransitionEndListener = listener;
  }

  function on(eventType, handler, options) {
    if (options === void 0) {
      options = false;
    }

    var nodes = normalizeToArray(instance.props.triggerTarget || reference);
    nodes.forEach(function (node) {
      node.addEventListener(eventType, handler, options);
      listeners.push({
        node: node,
        eventType: eventType,
        handler: handler,
        options: options
      });
    });
  }

  function addListeners() {
    if (getIsCustomTouchBehavior()) {
      on('touchstart', onTrigger, {
        passive: true
      });
      on('touchend', onMouseLeave, {
        passive: true
      });
    }

    splitBySpaces(instance.props.trigger).forEach(function (eventType) {
      if (eventType === 'manual') {
        return;
      }

      on(eventType, onTrigger);

      switch (eventType) {
        case 'mouseenter':
          on('mouseleave', onMouseLeave);
          break;

        case 'focus':
          on(isIE ? 'focusout' : 'blur', onBlurOrFocusOut);
          break;

        case 'focusin':
          on('focusout', onBlurOrFocusOut);
          break;
      }
    });
  }

  function removeListeners() {
    listeners.forEach(function (_ref) {
      var node = _ref.node,
          eventType = _ref.eventType,
          handler = _ref.handler,
          options = _ref.options;
      node.removeEventListener(eventType, handler, options);
    });
    listeners = [];
  }

  function onTrigger(event) {
    var _lastTriggerEvent;

    var shouldScheduleClickHide = false;

    if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
      return;
    }

    var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
    lastTriggerEvent = event;
    currentTarget = event.currentTarget;
    handleAriaExpandedAttribute();

    if (!instance.state.isVisible && isMouseEvent(event)) {
      // If scrolling, `mouseenter` events can be fired if the cursor lands
      // over a new target, but `mousemove` events don't get fired. This
      // causes interactive tooltips to get stuck open until the cursor is
      // moved
      mouseMoveListeners.forEach(function (listener) {
        return listener(event);
      });
    } // Toggle show/hide when clicking click-triggered tooltips


    if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
      shouldScheduleClickHide = true;
    } else {
      scheduleShow(event);
    }

    if (event.type === 'click') {
      isVisibleFromClick = !shouldScheduleClickHide;
    }

    if (shouldScheduleClickHide && !wasFocused) {
      scheduleHide(event);
    }
  }

  function onMouseMove(event) {
    var target = event.target;
    var isCursorOverReferenceOrPopper = reference.contains(target) || popper.contains(target);

    if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
      return;
    }

    var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
      var _instance$popperInsta;

      var instance = popper._tippy;
      var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

      if (state) {
        return {
          popperRect: popper.getBoundingClientRect(),
          popperState: state,
          props: props
        };
      }

      return null;
    }).filter(Boolean);

    if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
      cleanupInteractiveMouseListeners();
      scheduleHide(event);
    }
  }

  function onMouseLeave(event) {
    var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

    if (shouldBail) {
      return;
    }

    if (instance.props.interactive) {
      instance.hideWithInteractivity(event);
      return;
    }

    scheduleHide(event);
  }

  function onBlurOrFocusOut(event) {
    if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
      return;
    } // If focus was moved to within the popper


    if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
      return;
    }

    scheduleHide(event);
  }

  function isEventListenerStopped(event) {
    return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
  }

  function createPopperInstance() {
    destroyPopperInstance();
    var _instance$props2 = instance.props,
        popperOptions = _instance$props2.popperOptions,
        placement = _instance$props2.placement,
        offset = _instance$props2.offset,
        getReferenceClientRect = _instance$props2.getReferenceClientRect,
        moveTransition = _instance$props2.moveTransition;
    var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
    var computedReference = getReferenceClientRect ? {
      getBoundingClientRect: getReferenceClientRect,
      contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
    } : reference;
    var tippyModifier = {
      name: '$$tippy',
      enabled: true,
      phase: 'beforeWrite',
      requires: ['computeStyles'],
      fn: function fn(_ref2) {
        var state = _ref2.state;

        if (getIsDefaultRenderFn()) {
          var _getDefaultTemplateCh = getDefaultTemplateChildren(),
              box = _getDefaultTemplateCh.box;

          ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
            if (attr === 'placement') {
              box.setAttribute('data-placement', state.placement);
            } else {
              if (state.attributes.popper["data-popper-" + attr]) {
                box.setAttribute("data-" + attr, '');
              } else {
                box.removeAttribute("data-" + attr);
              }
            }
          });
          state.attributes.popper = {};
        }
      }
    };
    var modifiers = [{
      name: 'offset',
      options: {
        offset: offset
      }
    }, {
      name: 'preventOverflow',
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    }, {
      name: 'flip',
      options: {
        padding: 5
      }
    }, {
      name: 'computeStyles',
      options: {
        adaptive: !moveTransition
      }
    }, tippyModifier];

    if (getIsDefaultRenderFn() && arrow) {
      modifiers.push({
        name: 'arrow',
        options: {
          element: arrow,
          padding: 3
        }
      });
    }

    modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
    instance.popperInstance = (0,_popperjs_core__WEBPACK_IMPORTED_MODULE_0__.createPopper)(computedReference, popper, Object.assign({}, popperOptions, {
      placement: placement,
      onFirstUpdate: onFirstUpdate,
      modifiers: modifiers
    }));
  }

  function destroyPopperInstance() {
    if (instance.popperInstance) {
      instance.popperInstance.destroy();
      instance.popperInstance = null;
    }
  }

  function mount() {
    var appendTo = instance.props.appendTo;
    var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
    // it's directly after the reference element so the elements inside the
    // tippy can be tabbed to
    // If there are clipping issues, the user can specify a different appendTo
    // and ensure focus management is handled correctly manually

    var node = getCurrentTarget();

    if (instance.props.interactive && appendTo === defaultProps.appendTo || appendTo === 'parent') {
      parentNode = node.parentNode;
    } else {
      parentNode = invokeWithArgsOrReturn(appendTo, [node]);
    } // The popper element needs to exist on the DOM before its position can be
    // updated as Popper needs to read its dimensions


    if (!parentNode.contains(popper)) {
      parentNode.appendChild(popper);
    }

    createPopperInstance();
    /* istanbul ignore else */

    if (true) {
      // Accessibility check
      warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\n\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\n\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\n\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));
    }
  }

  function getNestedPopperTree() {
    return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
  }

  function scheduleShow(event) {
    instance.clearDelayTimeouts();

    if (event) {
      invokeHook('onTrigger', [instance, event]);
    }

    addDocumentPress();
    var delay = getDelay(true);

    var _getNormalizedTouchSe = getNormalizedTouchSettings(),
        touchValue = _getNormalizedTouchSe[0],
        touchDelay = _getNormalizedTouchSe[1];

    if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
      delay = touchDelay;
    }

    if (delay) {
      showTimeout = setTimeout(function () {
        instance.show();
      }, delay);
    } else {
      instance.show();
    }
  }

  function scheduleHide(event) {
    instance.clearDelayTimeouts();
    invokeHook('onUntrigger', [instance, event]);

    if (!instance.state.isVisible) {
      removeDocumentPress();
      return;
    } // For interactive tippies, scheduleHide is added to a document.body handler
    // from onMouseLeave so must intercept scheduled hides from mousemove/leave
    // events when trigger contains mouseenter and click, and the tip is
    // currently shown as a result of a click.


    if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
      return;
    }

    var delay = getDelay(false);

    if (delay) {
      hideTimeout = setTimeout(function () {
        if (instance.state.isVisible) {
          instance.hide();
        }
      }, delay);
    } else {
      // Fixes a `transitionend` problem when it fires 1 frame too
      // late sometimes, we don't want hide() to be called.
      scheduleHideAnimationFrame = requestAnimationFrame(function () {
        instance.hide();
      });
    }
  } // ===========================================================================
  // 🔑 Public methods
  // ===========================================================================


  function enable() {
    instance.state.isEnabled = true;
  }

  function disable() {
    // Disabling the instance should also hide it
    // https://github.com/atomiks/tippy.js-react/issues/106
    instance.hide();
    instance.state.isEnabled = false;
  }

  function clearDelayTimeouts() {
    clearTimeout(showTimeout);
    clearTimeout(hideTimeout);
    cancelAnimationFrame(scheduleHideAnimationFrame);
  }

  function setProps(partialProps) {
    /* istanbul ignore else */
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
    }

    if (instance.state.isDestroyed) {
      return;
    }

    invokeHook('onBeforeUpdate', [instance, partialProps]);
    removeListeners();
    var prevProps = instance.props;
    var nextProps = evaluateProps(reference, Object.assign({}, instance.props, {}, partialProps, {
      ignoreAttributes: true
    }));
    instance.props = nextProps;
    addListeners();

    if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
      cleanupInteractiveMouseListeners();
      debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
    } // Ensure stale aria-expanded attributes are removed


    if (prevProps.triggerTarget && !nextProps.triggerTarget) {
      normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
        node.removeAttribute('aria-expanded');
      });
    } else if (nextProps.triggerTarget) {
      reference.removeAttribute('aria-expanded');
    }

    handleAriaExpandedAttribute();
    handleStyles();

    if (onUpdate) {
      onUpdate(prevProps, nextProps);
    }

    if (instance.popperInstance) {
      createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
      // and the nested ones get re-rendered first.
      // https://github.com/atomiks/tippyjs-react/issues/177
      // TODO: find a cleaner / more efficient solution(!)

      getNestedPopperTree().forEach(function (nestedPopper) {
        // React (and other UI libs likely) requires a rAF wrapper as it flushes
        // its work in one
        requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
      });
    }

    invokeHook('onAfterUpdate', [instance, partialProps]);
  }

  function setContent(content) {
    instance.setProps({
      content: content
    });
  }

  function show() {
    /* istanbul ignore else */
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
    } // Early bail-out


    var isAlreadyVisible = instance.state.isVisible;
    var isDestroyed = instance.state.isDestroyed;
    var isDisabled = !instance.state.isEnabled;
    var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
    var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

    if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
      return;
    } // Normalize `disabled` behavior across browsers.
    // Firefox allows events on disabled elements, but Chrome doesn't.
    // Using a wrapper element (i.e. <span>) is recommended.


    if (getCurrentTarget().hasAttribute('disabled')) {
      return;
    }

    invokeHook('onShow', [instance], false);

    if (instance.props.onShow(instance) === false) {
      return;
    }

    instance.state.isVisible = true;

    if (getIsDefaultRenderFn()) {
      popper.style.visibility = 'visible';
    }

    handleStyles();
    addDocumentPress();

    if (!instance.state.isMounted) {
      popper.style.transition = 'none';
    } // If flipping to the opposite side after hiding at least once, the
    // animation will use the wrong placement without resetting the duration


    if (getIsDefaultRenderFn()) {
      var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
          box = _getDefaultTemplateCh2.box,
          content = _getDefaultTemplateCh2.content;

      setTransitionDuration([box, content], 0);
    }

    onFirstUpdate = function onFirstUpdate() {
      if (!instance.state.isVisible || ignoreOnFirstUpdate) {
        return;
      }

      ignoreOnFirstUpdate = true; // reflow

      void popper.offsetHeight;
      popper.style.transition = instance.props.moveTransition;

      if (getIsDefaultRenderFn() && instance.props.animation) {
        var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
            _box = _getDefaultTemplateCh3.box,
            _content = _getDefaultTemplateCh3.content;

        setTransitionDuration([_box, _content], duration);
        setVisibilityState([_box, _content], 'visible');
      }

      handleAriaContentAttribute();
      handleAriaExpandedAttribute();
      pushIfUnique(mountedInstances, instance);
      instance.state.isMounted = true;
      invokeHook('onMount', [instance]);

      if (instance.props.animation && getIsDefaultRenderFn()) {
        onTransitionedIn(duration, function () {
          instance.state.isShown = true;
          invokeHook('onShown', [instance]);
        });
      }
    };

    mount();
  }

  function hide() {
    /* istanbul ignore else */
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
    } // Early bail-out


    var isAlreadyHidden = !instance.state.isVisible;
    var isDestroyed = instance.state.isDestroyed;
    var isDisabled = !instance.state.isEnabled;
    var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

    if (isAlreadyHidden || isDestroyed || isDisabled) {
      return;
    }

    invokeHook('onHide', [instance], false);

    if (instance.props.onHide(instance) === false) {
      return;
    }

    instance.state.isVisible = false;
    instance.state.isShown = false;
    ignoreOnFirstUpdate = false;

    if (getIsDefaultRenderFn()) {
      popper.style.visibility = 'hidden';
    }

    cleanupInteractiveMouseListeners();
    removeDocumentPress();
    handleStyles();

    if (getIsDefaultRenderFn()) {
      var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
          box = _getDefaultTemplateCh4.box,
          content = _getDefaultTemplateCh4.content;

      if (instance.props.animation) {
        setTransitionDuration([box, content], duration);
        setVisibilityState([box, content], 'hidden');
      }
    }

    handleAriaContentAttribute();
    handleAriaExpandedAttribute();

    if (instance.props.animation) {
      if (getIsDefaultRenderFn()) {
        onTransitionedOut(duration, instance.unmount);
      }
    } else {
      instance.unmount();
    }
  }

  function hideWithInteractivity(event) {
    /* istanbul ignore else */
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));
    }

    doc.body.addEventListener('mouseleave', scheduleHide);
    doc.addEventListener('mousemove', debouncedOnMouseMove);
    pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
    debouncedOnMouseMove(event);
  }

  function unmount() {
    /* istanbul ignore else */
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));
    }

    if (instance.state.isVisible) {
      instance.hide();
    }

    if (!instance.state.isMounted) {
      return;
    }

    destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
    // tree by default. This seems mainly for interactive tippies, but we should
    // find a workaround if possible

    getNestedPopperTree().forEach(function (nestedPopper) {
      nestedPopper._tippy.unmount();
    });

    if (popper.parentNode) {
      popper.parentNode.removeChild(popper);
    }

    mountedInstances = mountedInstances.filter(function (i) {
      return i !== instance;
    });
    instance.state.isMounted = false;
    invokeHook('onHidden', [instance]);
  }

  function destroy() {
    /* istanbul ignore else */
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
    }

    if (instance.state.isDestroyed) {
      return;
    }

    instance.clearDelayTimeouts();
    instance.unmount();
    removeListeners();
    delete reference._tippy;
    instance.state.isDestroyed = true;
    invokeHook('onDestroy', [instance]);
  }
}

function tippy(targets, optionalProps) {
  if (optionalProps === void 0) {
    optionalProps = {};
  }

  var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
  /* istanbul ignore else */

  if (true) {
    validateTargets(targets);
    validateProps(optionalProps, plugins);
  }

  bindGlobalEventListeners();
  var passedProps = Object.assign({}, optionalProps, {
    plugins: plugins
  });
  var elements = getArrayOfElements(targets);
  /* istanbul ignore else */

  if (true) {
    var isSingleContentElement = isElement(passedProps.content);
    var isMoreThanOneReferenceElement = elements.length > 1;
    warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\n\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\n\n', '1) content: element.innerHTML\n', '2) content: () => element.cloneNode(true)'].join(' '));
  }

  var instances = elements.reduce(function (acc, reference) {
    var instance = reference && createTippy(reference, passedProps);

    if (instance) {
      acc.push(instance);
    }

    return acc;
  }, []);
  return isElement(targets) ? instances[0] : instances;
}

tippy.defaultProps = defaultProps;
tippy.setDefaultProps = setDefaultProps;
tippy.currentInput = currentInput;
var hideAll = function hideAll(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      excludedReferenceOrInstance = _ref.exclude,
      duration = _ref.duration;

  mountedInstances.forEach(function (instance) {
    var isExcluded = false;

    if (excludedReferenceOrInstance) {
      isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;
    }

    if (!isExcluded) {
      var originalDuration = instance.props.duration;
      instance.setProps({
        duration: duration
      });
      instance.hide();

      if (!instance.state.isDestroyed) {
        instance.setProps({
          duration: originalDuration
        });
      }
    }
  });
};

var createSingleton = function createSingleton(tippyInstances, optionalProps) {
  if (optionalProps === void 0) {
    optionalProps = {};
  }

  /* istanbul ignore else */
  if (true) {
    errorWhen(!Array.isArray(tippyInstances), ['The first argument passed to createSingleton() must be an array of', 'tippy instances. The passed value was', String(tippyInstances)].join(' '));
  }

  var mutTippyInstances = tippyInstances;
  var references = [];
  var currentTarget;
  var overrides = optionalProps.overrides;

  function setReferences() {
    references = mutTippyInstances.map(function (instance) {
      return instance.reference;
    });
  }

  function enableInstances(isEnabled) {
    mutTippyInstances.forEach(function (instance) {
      if (isEnabled) {
        instance.enable();
      } else {
        instance.disable();
      }
    });
  }

  enableInstances(false);
  setReferences();
  var singleton = {
    fn: function fn() {
      return {
        onDestroy: function onDestroy() {
          enableInstances(true);
        },
        onTrigger: function onTrigger(instance, event) {
          var target = event.currentTarget;
          var index = references.indexOf(target); // bail-out

          if (target === currentTarget) {
            return;
          }

          currentTarget = target;
          var overrideProps = (overrides || []).concat('content').reduce(function (acc, prop) {
            acc[prop] = mutTippyInstances[index].props[prop];
            return acc;
          }, {});
          instance.setProps(Object.assign({}, overrideProps, {
            getReferenceClientRect: function getReferenceClientRect() {
              return target.getBoundingClientRect();
            }
          }));
        }
      };
    }
  };
  var instance = tippy(div(), Object.assign({}, removeProperties(optionalProps, ['overrides']), {
    plugins: [singleton].concat(optionalProps.plugins || []),
    triggerTarget: references
  }));
  var originalSetProps = instance.setProps;

  instance.setProps = function (props) {
    overrides = props.overrides || overrides;
    originalSetProps(props);
  };

  instance.setInstances = function (nextInstances) {
    enableInstances(true);
    mutTippyInstances = nextInstances;
    enableInstances(false);
    setReferences();
    instance.setProps({
      triggerTarget: references
    });
  };

  return instance;
};

var BUBBLING_EVENTS_MAP = {
  mouseover: 'mouseenter',
  focusin: 'focus',
  click: 'click'
};
/**
 * Creates a delegate instance that controls the creation of tippy instances
 * for child elements (`target` CSS selector).
 */

function delegate(targets, props) {
  /* istanbul ignore else */
  if (true) {
    errorWhen(!(props && props.target), ['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' '));
  }

  var listeners = [];
  var childTippyInstances = [];
  var target = props.target;
  var nativeProps = removeProperties(props, ['target']);
  var parentProps = Object.assign({}, nativeProps, {
    trigger: 'manual',
    touch: false
  });
  var childProps = Object.assign({}, nativeProps, {
    showOnCreate: true
  });
  var returnValue = tippy(targets, parentProps);
  var normalizedReturnValue = normalizeToArray(returnValue);

  function onTrigger(event) {
    if (!event.target) {
      return;
    }

    var targetNode = event.target.closest(target);

    if (!targetNode) {
      return;
    } // Get relevant trigger with fallbacks:
    // 1. Check `data-tippy-trigger` attribute on target node
    // 2. Fallback to `trigger` passed to `delegate()`
    // 3. Fallback to `defaultProps.trigger`


    var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || defaultProps.trigger; // @ts-ignore

    if (targetNode._tippy) {
      return;
    }

    if (event.type === 'touchstart' && typeof childProps.touch === 'boolean') {
      return;
    }

    if (event.type !== 'touchstart' && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type])) {
      return;
    }

    var instance = tippy(targetNode, childProps);

    if (instance) {
      childTippyInstances = childTippyInstances.concat(instance);
    }
  }

  function on(node, eventType, handler, options) {
    if (options === void 0) {
      options = false;
    }

    node.addEventListener(eventType, handler, options);
    listeners.push({
      node: node,
      eventType: eventType,
      handler: handler,
      options: options
    });
  }

  function addEventListeners(instance) {
    var reference = instance.reference;
    on(reference, 'touchstart', onTrigger);
    on(reference, 'mouseover', onTrigger);
    on(reference, 'focusin', onTrigger);
    on(reference, 'click', onTrigger);
  }

  function removeEventListeners() {
    listeners.forEach(function (_ref) {
      var node = _ref.node,
          eventType = _ref.eventType,
          handler = _ref.handler,
          options = _ref.options;
      node.removeEventListener(eventType, handler, options);
    });
    listeners = [];
  }

  function applyMutations(instance) {
    var originalDestroy = instance.destroy;

    instance.destroy = function (shouldDestroyChildInstances) {
      if (shouldDestroyChildInstances === void 0) {
        shouldDestroyChildInstances = true;
      }

      if (shouldDestroyChildInstances) {
        childTippyInstances.forEach(function (instance) {
          instance.destroy();
        });
      }

      childTippyInstances = [];
      removeEventListeners();
      originalDestroy();
    };

    addEventListeners(instance);
  }

  normalizedReturnValue.forEach(applyMutations);
  return returnValue;
}

var animateFill = {
  name: 'animateFill',
  defaultValue: false,
  fn: function fn(instance) {
    var _instance$props$rende;

    // @ts-ignore
    if (!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy)) {
      if (true) {
        errorWhen(instance.props.animateFill, 'The `animateFill` plugin requires the default render function.');
      }

      return {};
    }

    var _getChildren = getChildren(instance.popper),
        box = _getChildren.box,
        content = _getChildren.content;

    var backdrop = instance.props.animateFill ? createBackdropElement() : null;
    return {
      onCreate: function onCreate() {
        if (backdrop) {
          box.insertBefore(backdrop, box.firstElementChild);
          box.setAttribute('data-animatefill', '');
          box.style.overflow = 'hidden';
          instance.setProps({
            arrow: false,
            animation: 'shift-away'
          });
        }
      },
      onMount: function onMount() {
        if (backdrop) {
          var transitionDuration = box.style.transitionDuration;
          var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the
          // tooltip element. `clip-path` is the other alternative but is not
          // well-supported and is buggy on some devices.

          content.style.transitionDelay = Math.round(duration / 10) + "ms";
          backdrop.style.transitionDuration = transitionDuration;
          setVisibilityState([backdrop], 'visible');
        }
      },
      onShow: function onShow() {
        if (backdrop) {
          backdrop.style.transitionDuration = '0ms';
        }
      },
      onHide: function onHide() {
        if (backdrop) {
          setVisibilityState([backdrop], 'hidden');
        }
      }
    };
  }
};

function createBackdropElement() {
  var backdrop = div();
  backdrop.className = BACKDROP_CLASS;
  setVisibilityState([backdrop], 'hidden');
  return backdrop;
}

var followCursor = {
  name: 'followCursor',
  defaultValue: false,
  fn: function fn(instance) {
    var reference = instance.reference;
    var doc = getOwnerDocument(instance.props.triggerTarget || reference);
    var initialMouseCoords = null;

    function getIsManual() {
      return instance.props.trigger.trim() === 'manual';
    }

    function getIsEnabled() {
      // #597
      var isValidMouseEvent = getIsManual() ? true : // Check if a keyboard "click"
      initialMouseCoords !== null && !(initialMouseCoords.clientX === 0 && initialMouseCoords.clientY === 0);
      return instance.props.followCursor && isValidMouseEvent;
    }

    function getIsInitialBehavior() {
      return currentInput.isTouch || instance.props.followCursor === 'initial' && instance.state.isVisible;
    }

    function unsetReferenceClientRect(shouldUnset) {
      if (shouldUnset) {
        instance.setProps({
          getReferenceClientRect: null
        });
      }
    }

    function handleMouseMoveListener() {
      if (getIsEnabled()) {
        addListener();
      } else {
        unsetReferenceClientRect(instance.props.followCursor);
      }
    }

    function triggerLastMouseMove() {
      if (getIsEnabled()) {
        onMouseMove(initialMouseCoords);
      }
    }

    function addListener() {
      doc.addEventListener('mousemove', onMouseMove);
    }

    function removeListener() {
      doc.removeEventListener('mousemove', onMouseMove);
    }

    function onMouseMove(event) {
      initialMouseCoords = {
        clientX: event.clientX,
        clientY: event.clientY
      }; // If the instance is interactive, avoid updating the position unless it's
      // over the reference element

      var isCursorOverReference = event.target ? reference.contains(event.target) : true;
      var followCursor = instance.props.followCursor;
      var clientX = event.clientX,
          clientY = event.clientY;
      var rect = reference.getBoundingClientRect();
      var relativeX = clientX - rect.left;
      var relativeY = clientY - rect.top;

      if (isCursorOverReference || !instance.props.interactive) {
        instance.setProps({
          getReferenceClientRect: function getReferenceClientRect() {
            var rect = reference.getBoundingClientRect();
            var x = clientX;
            var y = clientY;

            if (followCursor === 'initial') {
              x = rect.left + relativeX;
              y = rect.top + relativeY;
            }

            var top = followCursor === 'horizontal' ? rect.top : y;
            var right = followCursor === 'vertical' ? rect.right : x;
            var bottom = followCursor === 'horizontal' ? rect.bottom : y;
            var left = followCursor === 'vertical' ? rect.left : x;
            return {
              width: right - left,
              height: bottom - top,
              top: top,
              right: right,
              bottom: bottom,
              left: left
            };
          }
        });
      }

      if (getIsInitialBehavior()) {
        removeListener();
      }
    }

    return {
      onAfterUpdate: function onAfterUpdate(_, _ref) {
        var followCursor = _ref.followCursor;

        if (followCursor !== undefined && !followCursor) {
          unsetReferenceClientRect(true);
        }
      },
      onMount: function onMount() {
        triggerLastMouseMove();
      },
      onShow: function onShow() {
        if (getIsManual()) {
          // Since there's no trigger event to use, we have to use these as
          // baseline coords
          initialMouseCoords = {
            clientX: 0,
            clientY: 0
          };
          handleMouseMoveListener();
        }
      },
      onTrigger: function onTrigger(_, event) {
        // Tapping on touch devices can trigger `mouseenter` then `focus`
        if (initialMouseCoords) {
          return;
        }

        if (isMouseEvent(event)) {
          initialMouseCoords = {
            clientX: event.clientX,
            clientY: event.clientY
          };
        }

        handleMouseMoveListener();
      },
      onUntrigger: function onUntrigger() {
        // If untriggered before showing (`onHidden` will never be invoked)
        if (!instance.state.isVisible) {
          removeListener();
          initialMouseCoords = null;
        }
      },
      onHidden: function onHidden() {
        removeListener();
        initialMouseCoords = null;
      }
    };
  }
};

function getProps(props, modifier) {
  var _props$popperOptions;

  return {
    popperOptions: Object.assign({}, props.popperOptions, {
      modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function (_ref) {
        var name = _ref.name;
        return name !== modifier.name;
      }), [modifier])
    })
  };
}

var inlinePositioning = {
  name: 'inlinePositioning',
  defaultValue: false,
  fn: function fn(instance) {
    var reference = instance.reference;

    function isEnabled() {
      return !!instance.props.inlinePositioning;
    }

    var placement;
    var cursorRectIndex = -1;
    var isInternalUpdate = false;
    var modifier = {
      name: 'tippyInlinePositioning',
      enabled: true,
      phase: 'afterWrite',
      fn: function fn(_ref2) {
        var state = _ref2.state;

        if (isEnabled()) {
          if (placement !== state.placement) {
            instance.setProps({
              getReferenceClientRect: function getReferenceClientRect() {
                return _getReferenceClientRect(state.placement);
              }
            });
          }

          placement = state.placement;
        }
      }
    };

    function _getReferenceClientRect(placement) {
      return getInlineBoundingClientRect(getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);
    }

    function setInternalProps(partialProps) {
      isInternalUpdate = true;
      instance.setProps(partialProps);
      isInternalUpdate = false;
    }

    function addModifier() {
      if (!isInternalUpdate) {
        setInternalProps(getProps(instance.props, modifier));
      }
    }

    return {
      onCreate: addModifier,
      onAfterUpdate: addModifier,
      onTrigger: function onTrigger(_, event) {
        if (isMouseEvent(event)) {
          var rects = arrayFrom(instance.reference.getClientRects());
          var cursorRect = rects.find(function (rect) {
            return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;
          });
          cursorRectIndex = rects.indexOf(cursorRect);
        }
      },
      onUntrigger: function onUntrigger() {
        cursorRectIndex = -1;
      }
    };
  }
};
function getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {
  // Not an inline element, or placement is not yet known
  if (clientRects.length < 2 || currentBasePlacement === null) {
    return boundingRect;
  } // There are two rects and they are disjoined


  if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) {
    return clientRects[cursorRectIndex] || boundingRect;
  }

  switch (currentBasePlacement) {
    case 'top':
    case 'bottom':
      {
        var firstRect = clientRects[0];
        var lastRect = clientRects[clientRects.length - 1];
        var isTop = currentBasePlacement === 'top';
        var top = firstRect.top;
        var bottom = lastRect.bottom;
        var left = isTop ? firstRect.left : lastRect.left;
        var right = isTop ? firstRect.right : lastRect.right;
        var width = right - left;
        var height = bottom - top;
        return {
          top: top,
          bottom: bottom,
          left: left,
          right: right,
          width: width,
          height: height
        };
      }

    case 'left':
    case 'right':
      {
        var minLeft = Math.min.apply(Math, clientRects.map(function (rects) {
          return rects.left;
        }));
        var maxRight = Math.max.apply(Math, clientRects.map(function (rects) {
          return rects.right;
        }));
        var measureRects = clientRects.filter(function (rect) {
          return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;
        });
        var _top = measureRects[0].top;
        var _bottom = measureRects[measureRects.length - 1].bottom;
        var _left = minLeft;
        var _right = maxRight;

        var _width = _right - _left;

        var _height = _bottom - _top;

        return {
          top: _top,
          bottom: _bottom,
          left: _left,
          right: _right,
          width: _width,
          height: _height
        };
      }

    default:
      {
        return boundingRect;
      }
  }
}

var sticky = {
  name: 'sticky',
  defaultValue: false,
  fn: function fn(instance) {
    var reference = instance.reference,
        popper = instance.popper;

    function getReference() {
      return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;
    }

    function shouldCheck(value) {
      return instance.props.sticky === true || instance.props.sticky === value;
    }

    var prevRefRect = null;
    var prevPopRect = null;

    function updatePosition() {
      var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;
      var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;

      if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {
        if (instance.popperInstance) {
          instance.popperInstance.update();
        }
      }

      prevRefRect = currentRefRect;
      prevPopRect = currentPopRect;

      if (instance.state.isMounted) {
        requestAnimationFrame(updatePosition);
      }
    }

    return {
      onMount: function onMount() {
        if (instance.props.sticky) {
          updatePosition();
        }
      }
    };
  }
};

function areRectsDifferent(rectA, rectB) {
  if (rectA && rectB) {
    return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;
  }

  return true;
}

tippy.setDefaultProps({
  render: render
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tippy);

//# sourceMappingURL=tippy.esm.js.map


/***/ }),

/***/ "../structured-text-editor/node_modules/uuid/lib/bytesToUuid.js":
/*!**********************************************************************!*\
  !*** ../structured-text-editor/node_modules/uuid/lib/bytesToUuid.js ***!
  \**********************************************************************/
/***/ ((module) => {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([bth[buf[i++]], bth[buf[i++]], 
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]]]).join('');
}

module.exports = bytesToUuid;


/***/ }),

/***/ "../structured-text-editor/node_modules/uuid/lib/rng-browser.js":
/*!**********************************************************************!*\
  !*** ../structured-text-editor/node_modules/uuid/lib/rng-browser.js ***!
  \**********************************************************************/
/***/ ((module) => {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}


/***/ }),

/***/ "../structured-text-editor/node_modules/uuid/v1.js":
/*!*********************************************************!*\
  !*** ../structured-text-editor/node_modules/uuid/v1.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rng = __webpack_require__(/*! ./lib/rng */ "../structured-text-editor/node_modules/uuid/lib/rng-browser.js");
var bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ "../structured-text-editor/node_modules/uuid/lib/bytesToUuid.js");

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),

/***/ "../structured-text-editor/src/caret.js":
/*!**********************************************!*\
  !*** ../structured-text-editor/src/caret.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../lib/pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js");

var Caret = function(editor) {
    var self = this;
    this.editor = editor;
    this.selectionchangeSubscribers = [];

    document.addEventListener('selectionchange', function(e) {
        var selection = window.getSelection();

        if(self._isSelectionProcessed(selection)) {
            self._markSelectionAsProcessed(selection)
            for(let i=0; i<self.selectionchangeSubscribers.length; i++) {
                self.selectionchangeSubscribers[i](selection);
            }
        }
    });
}

Caret.prototype = {

    subscribeSelectionChange: function(f) {
        this.selectionchangeSubscribers.push(f);
    },

    _markSelectionAsProcessed: function(selection) {
        this.lastProcessedSelectionChange = {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
        };
    },

    _isSelectionProcessed: function(selection) {
      return this.lastProcessedSelectionChange === undefined ||
             this.lastProcessedSelectionChange.anchorNode !==  selection.anchorNode ||
             this.lastProcessedSelectionChange.anchorOffset !==  selection.anchorOffset ||
             this.lastProcessedSelectionChange.focusNode !==  selection.focusNode ||
             this.lastProcessedSelectionChange.focusOffset !==  selection.focusOffset
    },

    _getElementsContentLengthIncrement: function(element) {
        if(['BR', 'IMG'].includes(element.tagName)) return 1;

        if(element && element.classList && element.classList.contains('toc-content')) return 0;
        if(element && element.classList && element.classList.contains('missingLevelHint')) return 0;

        if(element.tagName === 'LI' && element.innerText === '') return 1;
        if(element.getAttribute && element.getAttribute('contenteditable') === 'false') return 1;
        if(this.withinUnedidableReferenceEl(element)) return 0;

        if(['CAPTION', 'FIGCAPTION', 'CITESRC'].includes(element.tagName) && (element.children && element.children.length) === 0) { //Fixme: Should it not be childNodes instead of children
            return 1;
        }

        if(!element.length) return 0;
        return element.length;
    },

    // example Input:  "test<span class="footnote" data-note="note number 11" contenteditable="false">11</span> the editor interface to restoreX selection"
    // example Output: "test_ the editor interface to restoreX selection"
    // -> because we cannot place the caret within the footnote (or reference, inline equation, toc section)
    // we replace the footenote with one placeholder char.
    _getContentLengthIncrementMaskedText: function(rootElement) {
        var result = '';


        if(rootElement.length && rootElement.textContent) {
            return rootElement.textContent;
        }

        rootElement.childNodes.forEach(element => {
            if(['BR', 'IMG'].includes(element.tagName)) { result += '_'; }
            else if(element && element.classList && element.classList.contains('toc-content')) { result += ''; }
            else if(element && element.classList && element.classList.contains('missingLevelHint')) { result += ''; }
            else if(element.tagName === 'LI' && element.innerText === '') { result += '_'; }
            else if(element.getAttribute && element.getAttribute('contenteditable') === 'false') { result += '_'; }
            else if(this.withinUnedidableReferenceEl(element)) { result += ''; }

            else if(['CAPTION', 'FIGCAPTION', 'CITESRC'].includes(element.tagName) && (element.childNodes && element.childNodes.length) === 0) {
                result += '_';
            }
            else {
                result += this._getContentLengthIncrementMaskedText(element);
            }
        })

        return result;
    },

    _getContentLengthOfDOMElement: function(element, endChild) {
        if(!endChild && element.summarizedContentLength) {
            return element.summarizedContentLength;
        }

        var endSection = endChild && utils.getSubtreeByChildNode(element, endChild),
            endSectionIndex = endSection && element.children.indexOf(endSection),
            treeWalker = document.createTreeWalker(endSection || element),
            length = 0,
            currentEl;

        if(endSection) {
            for(var i=0; i<endSectionIndex; i++) {
                length += this._getContentLengthOfDOMElement(element.children[i])
            }
        }

        while((currentEl = treeWalker.currentNode)) {
            if(currentEl === endChild) return length;
            length += this._getElementsContentLengthIncrement(currentEl);

            if(!treeWalker.nextNode()) break;
        }

        if(!endChild) {
            element.summarizedContentLength = length;
        }

        return length;
    },

    _walkToNextEditableNode: function(treeWalker) {
        var candidte = treeWalker.nextNode();
        if(!candidte) { return candidte }

        while(this.withinUnedidableReferenceEl(candidte)) {
            candidte = treeWalker.nextNode();
            if(!candidte) { return candidte }
        }

        return candidte;
    },

    // rightMatch: when root element contains: '<p>Hello</p><p>World</p>' and contentLength is '5'
    //             it is not clear which element to return, if rightMatch is true then '<p>World</p>' will
    //             be returned, '<p>Hello</p>' otherwise
    _getElementByContentLength: function(rootEl, contentLength, rightMatch) {
        var treeWalker = document.createTreeWalker(rootEl),
            currentEl,
            length = 0,
            currentElLength;

        while(currentEl = treeWalker.currentNode) {
            currentElLength = this._getElementsContentLengthIncrement(currentEl);

            if((length + currentElLength) < contentLength) {
                length += currentElLength;
            } else if((length + currentElLength) === contentLength) {
                return rightMatch ? (this._walkToNextEditableNode(treeWalker) || currentEl) : currentEl;
            } else {
                return currentEl;
            }

            if(!treeWalker.nextNode()) break;
        }

        return null;
    },

    _getFirstParentWhichMatchContext: function(node, context) {
        if(!node) return;

        var tmpNode = node,
            contextType,
            matchFns;

        if(!Array.isArray(context)) {
            context = [context]
        }

        matchFns = context.map(function(ctx) {
            if(ctx.startsWith('.')) {
                contextType = 'class';
                ctx = ctx.substring(1);
            } else {
                contextType = 'tag';
            }

            if((contextType === 'tag' || !contextType)) {
                return function(node) {return node.tagName && node.tagName.toLowerCase() === ctx}
            } else {
                return function(node) {return node.classList && node.classList.contains(ctx)}
            }
        })

        while(tmpNode) {
            if(matchFns.some(function(matchFn) {return matchFn(tmpNode)})) {
                return tmpNode;
            }

            tmpNode = tmpNode.parentElement;
        }
    },

    isWithinElement: function(el) {
        var sel = window.getSelection();

        return sel.focusNode &&
               sel.anchorNode &&
               el.contains(sel.focusNode) &&
               el.contains(sel.anchorNode)
    },

    getPrecedingCharacter: function(contextElement) {
        var precedingChar = '', sel, range;
        var sel = window.getSelection();
        if (sel.rangeCount > 0) {
            range = sel.getRangeAt(0).cloneRange();
            range.collapse(true);
            range.setStart(contextElement, 0);
            precedingChar = range.toString().slice(-1);
        }
        return precedingChar;
    },

    isPrecedingCharacterWhitespace: function(contextElement) {
        var precedingCharacter = Caret.prototype.getPrecedingCharacter(contextElement),
            precedingCharacterCode;

        if(!precedingCharacter) { return false }
        precedingCharacterCode = precedingCharacter.charCodeAt(0);
        return (precedingCharacterCode === 32 || precedingCharacterCode === 160);
    },

    isCollapsedAndPositionedAtTheFirstLineOf: function(node) {
        if(!node.offsetTop) { return }

        if(node.innerText === '' && (node.tagName === 'OL' || node.tagName === 'UL')) {
            var targetEl = this.getContextElement('li');
            if(targetEl && targetEl !== node.firstChild) {
                return false;
            }
        } else if(node.innerText === '') {
            return true
        }

        var style = window.getComputedStyle(node),
            caretPos = this.getPosition(),
            caretPosY = caretPos && caretPos.y,
            paddingTop = parseInt(style.getPropertyValue('padding-top')),
            lineHeight = parseInt(style.getPropertyValue('line-height')),
            firstLineStartYPos = node.offsetTop + paddingTop,
            firstLineEndYPos = firstLineStartYPos + lineHeight;

        return firstLineStartYPos < caretPosY && firstLineEndYPos > caretPosY;
    },

    isCollapsedAndPositionedAtTheLastLineOf: function(node) {
        if(!node.offsetTop) { return }
        if(node.innerText === '') { return true }

        var style = window.getComputedStyle(node),
            caretPos = this.getPosition(),
            caretPosY = caretPos && caretPos.y,
            paddingBottom = parseInt(style.getPropertyValue('padding-bottom')),
            lineHeight = parseInt(style.getPropertyValue('line-height')),
            borderBottom = 1,
            lastLineEndYPos = (node.offsetTop + node.offsetHeight) - paddingBottom - borderBottom,
            lastLineStartYPos = lastLineEndYPos - lineHeight - 10;

        return lastLineEndYPos > caretPosY && lastLineStartYPos < caretPosY;
    },

    isCollapsedAndPositionedAtTheBeginningOf: function(node, ignoreFirstCharIfWhitespace) {
        var selection = window.getSelection(),
            pos;

        ignoreFirstCharIfWhitespace = ignoreFirstCharIfWhitespace === undefined ? true : ignoreFirstCharIfWhitespace;

        if(!selection.isCollapsed || !node) { return false }

        pos = this._getContentLengthOfDOMElement(node, selection.anchorNode) + selection.anchorOffset;
        if(ignoreFirstCharIfWhitespace &&
           pos === 1 &&
           node.childNodes && node.childNodes[0] === selection.anchorNode &&
           (selection.focusNode.nodeValue && (selection.focusNode.nodeValue[0] === '\u00A0' || selection.focusNode.nodeValue[0] === ' '))) {

            // when the first node of the section is focused and it starts with
            // a white space we do not mind whether the caret is placed right or
            // left from that whitespace. This is because for some reason the browser
            // just does not display this whitespace ?!?!? Blame this line in git
            // and see the spec in the same commit to get more details about this
            // specifc scenario.
            return true;
        }

        return pos === 0;
    },

    isCollapsedAndPositionedAtTheEndOf: function(node) {
        var selection = window.getSelection(),
            pos, nodeLength, lastEl;

        if(!selection.isCollapsed || !node) { return false }

        if(selection.anchorNode === node && selection.anchorOffset === node.childNodes.length) {
            return true;
        }

        pos = this._getContentLengthOfDOMElement(node, selection.anchorNode) + selection.anchorOffset;
        nodeLength = this._getContentLengthOfDOMElement(node);

        if(pos === nodeLength-1 && node.innerText[node.innerText.length-1] === '\n') {
            return true;
        }

        return pos === nodeLength;
    },

    positionAtTheBeginningOf: function(node) {
        var range = document.createRange(),
            selection = window.getSelection();

        range.setEnd(node, 0);
        range.setStart(node, 0);
        selection.removeAllRanges();
        selection.addRange(range);
    },

    positionAfter: function(node) {
        var nodeIndex,
            range = document.createRange(),
            selection = window.getSelection(),
            uneditableParent = this.withinUnedidableReferenceEl(node);

        if(uneditableParent) {
            node = uneditableParent
        }

        if(node.parentNode) {
            nodeIndex = Array.prototype.indexOf.call(node.parentNode.childNodes, node);
            range.setEnd(node.parentNode, nodeIndex+1);
            range.setStart(node.parentNode, nodeIndex+1);
            selection.removeAllRanges();
            selection.addRange(range);
        }
    },

    positionIn: function(node) {
        var range = document.createRange(),
            selection = window.getSelection();

        range.selectNodeContents(node);
        range.collapse();
        selection.removeAllRanges();
        selection.addRange(range);
    },

    modifyRangeToBeValidInsertPosition: function(range) {
        var node = range && range.collapsed && range.startContainer,
            firstLI;

        if(node && ['UL', 'OL'].includes(node.tagName) && range.startOffset === 0) {
            if(firstLI = node.querySelector('li')) {
                range.setStart(firstLI, 0);
                range.setEnd(firstLI, 0);
            }
        }

        return range;
    },

    insertNode: function (node) {
        var sel = window.getSelection(),
            range = sel.getRangeAt(0);

        this.modifyRangeToBeValidInsertPosition(range);
        range.insertNode(node);
        range.collapse();
        sel.removeAllRanges();
        sel.addRange(range);

        if(node.nextSibling && node.nextSibling.nodeValue === '') {
            node.nextSibling.remove();
        }
    },

    insertLineBreak: function() {
        var node = document.createElement('br'),
            focusedSection = this.editor.focusedSection(),
            index = this.editor.indexOfFocusedSection(),
            nextSection = 1;

        if(this.isPositionedAtTheBeginningOfFocusNode(window.getSelection())) {
            nextSection = 0;
        }

        this.editor.caret.insertNode(node);
        this.editor.replaceSectionWithHTML(focusedSection, focusedSection.outerHTML, {
            positionCaretAtTheEndOfSectionWithIndex: index+nextSection
        });
    },

    withinUnedidableReferenceEl: function(node) {
        if(node && node.isContentEditable) { return false }

        var sel = window.getSelection(),
            tmpNode = node || sel.focusNode;

        if(!tmpNode) { return false }

        while(tmpNode) {
            if(tmpNode.isContentEditable === true) {
                return false;
            }

            if(tmpNode.getAttribute && tmpNode.getAttribute('contenteditable') === 'false') {
                return tmpNode;
            }

            tmpNode = tmpNode.parentElement;
        }

        return false;
    },

    isPositionedAtTheEndOfFocusNode: function(selection) {
        return selection.isCollapsed &&
               selection.focusNode &&
               selection.focusOffset === selection.focusNode.length;
    },

    isPositionedAtTheBeginningOfFocusNode: function(selection) {
        return selection.isCollapsed &&
               selection.focusNode &&
               selection.focusOffset === 0;
    },

    getTangetNodes: function() {
        var self = this,
            selection = window.getSelection(),
            tangentNodes = {left: null, right: null},
            nodeIterator,
            ensureSameSection = function(n) { return n };

        if(this.editor && self.editor.focusedSection) {
            ensureSameSection = function(n) {
                if(n && self.editor.focusedSection() === self.editor.sectionByChildNode(n)) {
                    return n;
                }
            }
        }

        if(selection && selection.focusNode && selection.focusNode.nodeType !== Node.TEXT_NODE) {
            return {
                left: selection.focusNode.childNodes[selection.focusOffset-1],
                right: selection.focusNode.childNodes[selection.focusOffset]
            }
        }

        nodeIterator = utils.getNodeIteratorPointingTo(selection.focusNode);

        if(!nodeIterator) {
            return tangentNodes;
        }

        if(this.isPositionedAtTheBeginningOfFocusNode(selection)) {
            tangentNodes.left = ensureSameSection(nodeIterator.previousNode());
            nodeIterator.nextNode(); //move the iterator back to the focus node
        }

        if(this.isPositionedAtTheEndOfFocusNode(selection)) {
            tangentNodes.right = ensureSameSection(nodeIterator.nextNode());
        }

        return tangentNodes;
    },

    // This method finds a DOM element which wraps the passed selection and matches the context.
    //   - wraps means, focusNode and anchorNode are contained within the element
    //   - matches the context means, the returned element has either (depending on contextType, see below)
    //     the same tagName as specified in context, or a class name specified in context
    //   - the contextType is determined by the first char of the context argument. If it is '.' the type is
    //     "class" will match a element which has the according class assigned in its class attribute.
    //     If the context does not start with a '.' a element with the according tag name will match.
    getContextElement: function(context, selection, tangentNodes) {
        selection = selection || window.getSelection();
        tangentNodes = tangentNodes || this.getTangetNodes();

        if(selection.rangeCount === 0) return null;

        var commonAncestor = selection.getRangeAt(0).commonAncestorContainer;

        return this._getFirstParentWhichMatchContext(commonAncestor, context) ||
               this._getFirstParentWhichMatchContext(tangentNodes.right, context) ||
               this._getFirstParentWhichMatchContext(tangentNodes.left, context);
    },

    getPosition: function() {
        var selection = window.getSelection(),
            range = selection.getRangeAt(0),
            rect = range.getClientRects()[0],
            tn;

        if(rect) {
          return {x: rect.left, y: rect.top + window.scrollY, width: rect.width, height: rect.height};
        }

        tn = this.getTangetNodes();

        if(tn.left && tn.left.nodeType === Node.TEXT_NODE) {
            range = document.createRange();
            range.selectNodeContents(tn.left);
            range.collapse(false);
            rect = range.getClientRects()[0];
            return {x: rect.left+rect.width, y: rect.top + window.scrollY, width: 0, height: rect.height};
        } else if(tn.left) {
            rect = tn.left.getClientRects()[0];
            return {x: rect.left+rect.width, y: rect.top + window.scrollY, width: 0, height: rect.height};
        } else if(!rect && range.startContainer === range.endContainer)  {
            rect = range.startContainer.getClientRects()[0];
            return {x: rect.left, y: rect.top + window.scrollY, width: rect.width, height: rect.height};
        }

        // it seeems there is no known situation in which we have to consider tn.right
    },

    restoreSelection: function(moveToLeft, strategy) {
        strategy = strategy || 'OffsetStrategy';
        if(strategy === 'OffsetStrategy') {
            return this.restoreSelectionViaOffsetStrategy(moveToLeft);
        } else if(strategy === 'TryDOMStrategyFirst') {
            if(!this.restoreSelectionViaDOMStrategy()) {
                return this.restoreSelectionViaOffsetStrategy(moveToLeft);
            }
            return true;
        } else {
            return this.restoreSelectionViaDOMStrategy();
        }
    },

    // param 'moveToLeft': will correct the poistion by the given amount of char
    restoreSelectionViaOffsetStrategy: function(moveToLeft, savedSelection) {
        moveToLeft = moveToLeft || 0;

        if(savedSelection) {
            this.rootEl = savedSelection.rootEl;
            this.rangeStart = savedSelection.rangeStart;
            this.rangeEnd = savedSelection.rangeEnd;
            this.isAnchorLeft = savedSelection.isAnchorLeft;
            this.rangeStartAtZeroOffset = savedSelection.rangeStartAtZeroOffset;
            this.rangeEndAtZeroOffset =  savedSelection.rangeEndAtZeroOffset;
            this.selectionFocusNode = savedSelection.selectionFocusNode;
            this.selectionAnchorNode = savedSelection.selectionAnchorNode;
            this.rangeStartAtZeroOffset = savedSelection.rangeStartAtZeroOffset;
            this.rangeEndAtZeroOffset = savedSelection.rangeEndAtZeroOffset;
        }

        if(this.selectionIsUnedidable) {
            return true;
        }

        if(this.carretPlacementCorrection) {
            moveToLeft += this.carretPlacementCorrection;
        }

        this.rangeStartAtZeroOffset = (this.selectionAnchorOffset-moveToLeft) === 0;
        this.rangeEndAtZeroOffset = (this.selectionFocusOffset-moveToLeft) === 0;

        if(typeof this.rangeStart === 'number' && typeof this.rangeEnd === 'number') {

            var range,
                selection = window.getSelection(),
                startNode = this._getElementByContentLength(this.rootEl, this.rangeStart - moveToLeft, this.rangeStartAtZeroOffset),
                startOffset = this.rangeStart - moveToLeft - this._getContentLengthOfDOMElement(this.rootEl, startNode),
                endNode,
                endOffset,
                unediableContexEl;

            if(this.selectionIsCollapsed) {
                endNode = startNode;
                endOffset = startOffset;
            } else {
                endNode = this._getElementByContentLength(this.rootEl, this.rangeEnd - moveToLeft, this.rangeEndAtZeroOffset);
                endOffset = this.rangeEnd - moveToLeft - this._getContentLengthOfDOMElement(this.rootEl, endNode);
            }

            unediableContexEl = startNode == endNode && (unediableContexEl = this.withinUnedidableReferenceEl(startNode));

            try {
                if(unediableContexEl) {
                    startOffset = endOffset = unediableContexEl.parentElement.childNodes.indexOf(unediableContexEl) + 1;
                    startNode = endNode = unediableContexEl.parentElement;
                }

                range = document.createRange();
                if(this.isAnchorLeft) {
                    range.setStart(startNode, startOffset);
                    range.setEnd(endNode, endOffset);
                } else {
                    range.setEnd(startNode, startOffset);
                    range.setStart(endNode, endOffset);
                }

                selection.removeAllRanges();
                selection.addRange(range);
                return true;
            } catch(ex) {
                console.log('failed to set caret position via offset strategy', ex);
                return false;
            }
        }
    },

    restoreSelectionViaDOMStrategy: function() {
        var range, selection;

        if(!this.rootEl) {
            return false;
        }

        if(this.selectionIsUnedidable) {
            return true;
        }

        if(this.rootEl.contains(this.selectionAnchorNode) && this.rootEl.contains(this.selectionFocusNode)) {
            range = document.createRange();
            selection = window.getSelection();
            if(this.isAnchorLeft) {
                range.setEnd(this.selectionAnchorNode, this.selectionAnchorOffset);
                range.setStart(this.selectionFocusNode, this.selectionFocusOffset);
            } else {
                range.setStart(this.selectionAnchorNode, this.selectionAnchorOffset);
                range.setEnd(this.selectionFocusNode, this.selectionFocusOffset);
            }
            selection.removeAllRanges();
            selection.addRange(range);
            return true;
        }

        return false;
    },

    saveSelection: function(rootEl, insertedContent) {
        var selection = window.getSelection();

        if(this.withinUnedidableReferenceEl(selection.anchorNode)) {
            this.selectionIsUnedidable = true;
        } else if(!selection.isCollapsed && this.withinUnedidableReferenceEl(selection.focusNode)) {
            this.selectionIsUnedidable = true;
        } else {
            this.selectionIsUnedidable = false;
        }

        if(this.selectionIsUnedidable) {
            return { selectionIsUnedidable: true };
        }

        if(selection.anchorNode && selection.focusNode) {
            if(selection.anchorNode.nodeType === Node.TEXT_NODE) {
                this.rangeStart = this._getContentLengthOfDOMElement(rootEl, selection.anchorNode) + selection.anchorOffset;
            } else {
                this.rangeStart = this._getContentLengthOfDOMElement(rootEl, selection.anchorNode);
                for(let i=0; i<selection.anchorOffset; i++) {
                    this.rangeStart += this._getContentLengthOfDOMElement(selection.anchorNode.childNodes[i]);
                }
            }

            if(selection.isCollapsed) {
                this.rangeEnd = this.rangeStart;
            } else {
                if(selection.focusNode.nodeType === Node.TEXT_NODE) {
                    this.rangeEnd = this._getContentLengthOfDOMElement(rootEl, selection.focusNode) + selection.focusOffset;
                } else {
                    this.rangeEnd = this._getContentLengthOfDOMElement(rootEl, selection.focusNode);
                    for(let i=0; i<selection.focusOffset; i++) {
                        this.rangeEnd += this._getContentLengthOfDOMElement(selection.focusNode.childNodes[i]);
                    }
                }
            }

            this.rootEl = rootEl;
            this.selectionIsUnedidable = false;
            this.isAnchorLeft = this.rangeStart <= this.rangeEnd;
            this.rangeStartAtZeroOffset = selection.anchorOffset === 0;
            this.rangeEndAtZeroOffset = selection.focusOffset === 0;
            this.selectionAnchorNode = selection.anchorNode;
            this.selectionFocusNode = selection.focusNode;
            this.selectionAnchorOffset = selection.anchorOffset;
            this.selectionFocusOffset = selection.focusOffset;
            this.selectionIsCollapsed = selection.isCollapsed;

            this.followingSpaceTerminatesTextNode = selection.anchorNode === selection.focusNode &&
                                                    selection.focusNode.length &&
                                                    selection.anchorOffset === (selection.focusNode.length-1) &&
                                                    (selection.focusNode.nodeValue[selection.focusNode.length-1] === '\u00A0' ||
                                                     selection.focusNode.nodeValue[selection.focusNode.length-1] === ' ');

             if(insertedContent === ' ' && this.followingSpaceTerminatesTextNode) {
               this.carretPlacementCorrection = -1;
             } else {
               this.carretPlacementCorrection = 0;
             }

             return {
                rootEl: this.rootEl,
                rangeStart: this.rangeStart,
                rangeEnd: this.rangeEnd,
                isAnchorLeft: this.isAnchorLeft,
                rangeStartAtZeroOffset: this.rangeStartAtZeroOffset,
                rangeEndAtZeroOffset: this.rangeEndAtZeroOffset,
                selectionFocusNode: this.selectionFocusNode,
                selectionAnchorNode: this.selectionAnchorNode,
                selectionIsCollapsed: this.selectionIsCollapsed,
                selectionIsUnedidable: this.selectionIsUnedidable
             }
        }
    },

    clearSelection: function() {
        window.getSelection().removeAllRanges();
    },

    targetElement: function() {
        return window.getSelection().focusNode;
    },

    isCollapsed: function() {
        var sel = window.getSelection(),
            range;

        if(sel.rangeCount === 0) return;

        range = sel.getRangeAt(0);
        if(!range) return;
        return range.collapsed;
    },

    // If the selection is not collapsed and the start or end
    // is outsite the given element, this function will move the
    // corresponding selection end inside the given element.
    //
    // In the following Example the passed element is the p section
    // in the middle:
    // <p>text</p><p>w|ith</p><p>paragr|aphs</p>
    // =>
    // <p>text</p><p>w|ith|</p><p>paragraphs</p>
    //
    // This is actually not used on section level but to ensure
    // that the selection is within the editor iteself.
    ensureExpandedSelectionIsWithinElement: function(el) {
        var sel = window.getSelection(),
            n1 = sel.focusNode,
            o1 = sel.focusOffset,
            n2 = sel.anchorNode,
            o2 = sel.anchorOffset,
            tmp, n1IncludedInEl, n2IncludedInEl, n1Pos, n2Pos,
            n1AndN2AreFollowingEl, n1AndN2ArePrecedingEl, childEl,
            elWalker, newRange;

        if(!n1 || !n2 || sel.isCollapsed) { return }

        n1Pos = n1.compareDocumentPosition(el);
        n2Pos = n2.compareDocumentPosition(el);

        n1IncludedInEl = n1Pos & Node.DOCUMENT_POSITION_CONTAINS;
        n2IncludedInEl = n2Pos & Node.DOCUMENT_POSITION_CONTAINS;

        if(n1IncludedInEl && n2IncludedInEl) { return }

        n1AndN2AreFollowingEl = !!((n1Pos & Node.DOCUMENT_POSITION_FOLLOWING) && (n2Pos & Node.DOCUMENT_POSITION_FOLLOWING) && !n1IncludedInEl && !n2IncludedInEl);
        n1AndN2ArePrecedingEl = !!((n1Pos & Node.DOCUMENT_POSITION_PRECEDING) && (n2Pos & Node.DOCUMENT_POSITION_PRECEDING) && !n1IncludedInEl && !n2IncludedInEl);

        if(n1AndN2AreFollowingEl || n1AndN2ArePrecedingEl) { return }

        if(n1.compareDocumentPosition(n2) & Node.DOCUMENT_POSITION_PRECEDING) {
            tmp = n2; n2 = n1; n1 = tmp;
            tmp = o2; o2 = o1; o1 = tmp;
            tmp = n2IncludedInEl; n2IncludedInEl = n1IncludedInEl; n1IncludedInEl = tmp;
        }

        newRange = document.createRange();

        if(!n1IncludedInEl) {
            elWalker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            newRange.setStart(elWalker.firstChild(), 0);
        } else {
            newRange.setStart(n1, o1);
        }

        if(!n2IncludedInEl) {
            elWalker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            childEl = elWalker.lastChild();
            newRange.setEnd(childEl, childEl.length);
        } else {
            newRange.setEnd(n2, o2);
        }

        sel.removeAllRanges();
        sel.addRange(newRange);
    },

    getContentLengthTillSection: function(section) {
        var result = 0;
        section = section.previousSibling;

        while(section) {
            result += this._getContentLengthOfDOMElement(section);
            section = section.previousSibling;
        }

        return result;
    },
}

module.exports = Caret;


/***/ }),

/***/ "../structured-text-editor/src/editor.js":
/*!***********************************************!*\
  !*** ../structured-text-editor/src/editor.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var HTMLRazor = __webpack_require__(/*! ../lib/html_razor/html_razor */ "../structured-text-editor/lib/html_razor/html_razor.js"),
    TagTransformations = __webpack_require__(/*! ../lib/html_razor/tag_transformation */ "../structured-text-editor/lib/html_razor/tag_transformation.js"),
    Caret = __webpack_require__(/*! ./caret */ "../structured-text-editor/src/caret.js"),
    SectionTypeSelectorControl = __webpack_require__(/*! ./section_type_selector_control */ "../structured-text-editor/src/section_type_selector_control.js"),
    KeyPressHandler = __webpack_require__(/*! ./key_press_handler */ "../structured-text-editor/src/key_press_handler.js"),
    TextEnrichmentControl = __webpack_require__(/*! ./text_enrichment_control */ "../structured-text-editor/src/text_enrichment_control.js"),
    Documentupdater = __webpack_require__(/*! ../lib/documentupdater/documentupdater */ "../structured-text-editor/lib/documentupdater/documentupdater.js"),
    ModificationLogEntry = __webpack_require__(/*! ../lib/documentupdater/modification_log */ "../structured-text-editor/lib/documentupdater/modification_log.js"),
    ReferenceStore = __webpack_require__(/*! ./references/reference_store */ "../structured-text-editor/src/references/reference_store.js"),
    ReferenceController = __webpack_require__(/*! ./references/reference_controller */ "../structured-text-editor/src/references/reference_controller.js"),
    DeclarativForm = __webpack_require__(/*! ../lib/declarativ_forms/src/declarativ_form */ "../structured-text-editor/lib/declarativ_forms/src/declarativ_form.js"),
    Changeset = (__webpack_require__(/*! changesets */ "../structured-text-editor/node_modules/changesets/lib/index.js").Changeset),
    paragraphSectionType = __webpack_require__(/*! ./section_types/paragraph/paragraph_section_type */ "../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js"),
    tableSectionType = __webpack_require__(/*! ./section_types/table/table_section_type */ "../structured-text-editor/src/section_types/table/table_section_type.js"),
    unorderedListSectionType = __webpack_require__(/*! ./section_types/list/unordered_list_section_type */ "../structured-text-editor/src/section_types/list/unordered_list_section_type.js"),
    orderedListSectionType = __webpack_require__(/*! ./section_types/list/ordered_list_section_type */ "../structured-text-editor/src/section_types/list/ordered_list_section_type.js"),
    imageSectionType = __webpack_require__(/*! ./section_types/image/image_section_type */ "../structured-text-editor/src/section_types/image/image_section_type.js"),
    codeSectionType = __webpack_require__(/*! ./section_types/code/code_section_type */ "../structured-text-editor/src/section_types/code/code_section_type.js"),
    tocSectionType = __webpack_require__(/*! ./section_types/toc/toc_section_type */ "../structured-text-editor/src/section_types/toc/toc_section_type.js"),
    bibliographieSectionType = __webpack_require__(/*! ./section_types/bibliographie/bibliographie_section_type */ "../structured-text-editor/src/section_types/bibliographie/bibliographie_section_type.js"),
    footnotesSectionType = __webpack_require__(/*! ./section_types/footnotes/footnotes_section_type */ "../structured-text-editor/src/section_types/footnotes/footnotes_section_type.js"),
    formulaSectionType = __webpack_require__(/*! ./section_types/formula/formula_section_type */ "../structured-text-editor/src/section_types/formula/formula_section_type.js"),
    mermaidSectionType = __webpack_require__(/*! ./section_types/mermaid/mermaid_section_type */ "../structured-text-editor/src/section_types/mermaid/mermaid_section_type.js"),
    blockquoteSectionType = __webpack_require__(/*! ./section_types/blockquote/blockquote_section_type */ "../structured-text-editor/src/section_types/blockquote/blockquote_section_type.js"),
    heading1SectionType = __webpack_require__(/*! ./section_types/heading/heading1 */ "../structured-text-editor/src/section_types/heading/heading1.js"),
    heading2SectionType = __webpack_require__(/*! ./section_types/heading/heading2 */ "../structured-text-editor/src/section_types/heading/heading2.js"),
    heading3SectionType = __webpack_require__(/*! ./section_types/heading/heading3 */ "../structured-text-editor/src/section_types/heading/heading3.js"),
    heading4SectionType = __webpack_require__(/*! ./section_types/heading/heading4 */ "../structured-text-editor/src/section_types/heading/heading4.js"),
    heading5SectionType = __webpack_require__(/*! ./section_types/heading/heading5 */ "../structured-text-editor/src/section_types/heading/heading5.js"),
    utils = __webpack_require__(/*! ../lib/pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js"),
    // katex = require('katex'), // make sure to load <script src="./katex.js" defer></script> in your html
    uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js"),
    isMac = navigator.platform.indexOf("Mac") === 0;

window.Changeset = Changeset;

DOMTokenList.prototype.find = Array.prototype.find;
NodeList.prototype.indexOf = Array.prototype.indexOf;
NodeList.prototype.filter = Array.prototype.filter;
NodeList.prototype.forEach = Array.prototype.forEach;
NodeList.prototype.map = Array.prototype.map;
HTMLCollection.prototype.indexOf = Array.prototype.indexOf;
HTMLCollection.prototype.filter = Array.prototype.filter;
HTMLCollection.prototype.forEach = Array.prototype.forEach;
HTMLCollection.prototype.map = Array.prototype.map;
Array.prototype.contains = Array.prototype.includes;
Array.prototype.includesAll = function() { var self = this, args = Array.from(arguments); return args.every(function(r) {return self.includes(r) })}
Array.prototype.unique = function() { return this.filter(function (value, index, self) { return self.indexOf(value) === index }) }

var Editor = function(domId, options) {
    var self = this;
    options = options || {}

    this._initDone = false;
    this._isContentEditable = true;
    this.reference = new ReferenceController(new ReferenceStore(options.contentID, options.ReferencePersitencyDriver), this);
    this.tagTransformations = new TagTransformations();
    this.domId = domId;
    this.hintEl = document.createElement('ste-input-hint')
    this.containerElement = document.getElementById(domId);
    this.containerElement.innerHTML = '';
    this.contentElement = document.createElement('div');
    this.caret = new Caret(this);
    this.subscribers = [];
    this.referenceInsertedSubscribers = [];
    this.sectionFocusChangeSubscribers = [];
    this.sectionTypeSelector = new SectionTypeSelectorControl(this.changeFocusedSectionType, this, this);
    this.textEnrichmentControl = new TextEnrichmentControl(this);
    this.keyPressHandler = new KeyPressHandler(this);

    this.contentElement.setAttribute('spellcheck', options.spellcheck);
    this.contentElement.className = 'structured-text-editor';

    this.hintEl.innerHTML = `Write Here... Press <code>${isMac ? '⌘' : 'Ctrl'}</code> + <code>i</code> to insert a reference, footnote or equation.`;

    this.containerElement.className = 'structured-text-editor-container';
    this.containerElement.appendChild(this.buildAddSectionButton('top'));
    this.containerElement.appendChild(this.contentElement);
    this.containerElement.appendChild(this.buildAddSectionButton('bottom'));

    this.supportedSectionTypes = {};

    this.history = [];
    this.undoneModifications = [];
    this.caretPositions = [];

    this.markupTransformations = [
        { to: 'table',     praefix: '#table'  },
        { to: 'pre',       praefix: '#code'   },
        { to: 'h1',        praefix: '#title'  },
        { to: 'h2',        praefix: '#'       },
        { to: 'h2',        praefix: '#h1'     },
        { to: 'h3',        praefix: '##'      },
        { to: 'h3',        praefix: '#h2'     },
        { to: 'h4',        praefix: '###'     },
        { to: 'h4',        praefix: '#h3'     },
        { to: 'h5',        praefix: '####'    },
        { to: 'h5',        praefix: '#h4'     },
        { to: 'p',         praefix: '#p'      },
        { to: 'ul',        praefix: '#ul'     },
        { to: 'ul',        praefix: '\\*'     },
        { to: 'ol',        praefix: '#ol'     },
        { to: 'ol',        praefix: '1\\)'    },
        { to: 'figure',    praefix: '#img'    },
        { to: 'figure',    praefix: '#image'  },
        { to: 'nav',       praefix: '#toc'    },
        { to: 'h2(Abstract)',   praefix: '#abstract'  },
        { to: 'h2(Abstract)',   praefix: '#Abstract'  },
        { to: 'bibliographie',  praefix: '#bib'       },
        { to: 'footnotes',      praefix: '#footnotes' },
        { to: 'formula',        praefix: '#formula'   },
        { to: 'formula',        praefix: '#eq'        },
        { to: 'mermaid',        praefix: '#dia'       },
        { to: 'bquote',         praefix: '#quote'     },
        { to: 'bquote',         praefix: '#"'         },
        { to: 'bquote',         praefix: "#'"         },
        { to: 'bquote',         praefix: '#blockquote'},
    ];

    Object.assign(this.tagTransformations, {
        '/p': this.markupTransformations,
        '/h1': this.markupTransformations,
        '/h2': this.markupTransformations,
        '/h3': this.markupTransformations,
        '/h4': this.markupTransformations,
        '/h5': this.markupTransformations,
        '/div': 'p',
        '/b': 'p',
        '/i': 'p',
        '/inlinecode': 'p',
        '/p/br': '=',
        '/h1/br': '=p',
        '/h2/br': '=p',
        '/h3/br': '=p',
        '/h4/br': '=p',
        '/h5/br': '=p',

        '/p/b/br': '=',
        '/p/b/i/br': '=',
        '/p/b/u/br': '=',
        '/p/b/a/br': '=',

        '/p/u/br': '=',
        '/p/u/i/br': '=',
        '/p/u/b/br': '=',
        '/p/u/a/br': '=',

        '/p/i/br': '=',
        '/p/i/u/br': '=',
        '/p/i/b/br': '=',
        '/p/i/a/br': '=',

        '/p/code': 'inlinecode',
        '/p/inlinecode/br': '=',
        '/p/inlinecode/inlinecode': '#content',
        '/p/inlinecode/b': '#content',
        '/p/inlinecode/u': '#content',
        '/p/inlinecode/i': '#content',
        '/p/inlinecode/a': '#content',
        '/p/i/code': '-',
        '/p/b/code': '-',
        '/p/u/code': '-',
        '/p/a/code': 'inlinecode',
        '/p/i/inlinecode': '-',
        '/p/b/inlinecode': '-',
        '/p/u/inlinecode': '-',

        '/p/a/br': '=',
        '/p/a/i/br': '=',
        '/p/a/u/br': '=',
        '/p/a/b/br': '=',

        '/p/div': '-',
        '/h1/div': '-',
        '/h2/div': '-',
        '/h3/div': '-',
        '/h4/div': '-',
        '/h5/div': '-',
        '/p/p': '#content',
        '/p/font': '#content',
        '/p/var': '#content',
        '/p/a/span': '#content',
        '/figure/div': '#content',
    });

     this.tagTransformations.allowOnlyTextIn('/table/caption');
     this.tagTransformations.allowOnlyTextIn('/figure/figcaption');
     this.tagTransformations.allowOnlyTextIn('/table/tbody/tr/td', { allowEquations: true, allowRefs: true, allowLinks: true, allowBoldItalicUnderline: true });
     this.tagTransformations.allowOnlyTextIn('/ul/li', { allowEquations: true, allowRefs: true, allowLinks: true, allowBoldItalicUnderline: true });
     this.tagTransformations.allowOnlyTextIn('/ol/li', { allowEquations: true, allowRefs: true, allowLinks: true, allowBoldItalicUnderline: true });

     this.tagTransformations.allowOnlyTextIn('/ol/ol/li', { allowEquations: true, allowRefs: true, allowLinks: true, allowBoldItalicUnderline: true });
     this.tagTransformations.allowOnlyTextIn('/ol/ol/ol/li', { allowEquations: true, allowRefs: true, allowLinks: true, allowBoldItalicUnderline: true });

     this.tagTransformations.allowOnlyTextIn('/ul/ul/li', { allowEquations: true, allowRefs: true, allowLinks: true, allowBoldItalicUnderline: true });
     this.tagTransformations.allowOnlyTextIn('/ul/ul/ul/li', { allowEquations: true, allowRefs: true, allowLinks: true, allowBoldItalicUnderline: true });

     this.tagTransformations.allowOnlyTextIn('/h1', { allowEquations: true });
     this.tagTransformations.allowOnlyTextIn('/h2', { allowEquations: true });
     this.tagTransformations.allowOnlyTextIn('/h3', { allowEquations: true });
     this.tagTransformations.allowOnlyTextIn('/h4', { allowEquations: true });
     this.tagTransformations.allowOnlyTextIn('/h5', { allowEquations: true });

     this.tagTransformations.allowRefsIn('/p');
     this.tagTransformations.allowRefsIn('/p/b');
     this.tagTransformations.allowRefsIn('/p/i');
     this.tagTransformations.allowRefsIn('/p/u');
     this.tagTransformations.allowRefsIn('/pre/caption');
     this.tagTransformations.allowRefsIn('/table/caption');
     this.tagTransformations.allowRefsIn('/formula/caption');
     this.tagTransformations.allowRefsIn('/mermaid/caption');
     this.tagTransformations.allowRefsIn('/figure/figcaption');
     // this.tagTransformations.allowRefsIn('/bquote/citesrc'); // this is specified in the section type code file itself

     this.tagTransformations.allowInlineequationsIn('/p');
     this.tagTransformations.allowInlineequationsIn('/pre/caption');
     this.tagTransformations.allowInlineequationsIn('/table/caption');
     this.tagTransformations.allowInlineequationsIn('/formula/caption');
     this.tagTransformations.allowInlineequationsIn('/mermaid/caption');
     this.tagTransformations.allowInlineequationsIn('/figure/figcaption');
     this.tagTransformations.allowInlineequationsIn('/bquote/citesrc');

    this.contentRules = {
        'i': {
            tagName: 'i',
            allowedChildren: ['#text', 'link', 'b', 'u', 'footnote', 'reference'],
            pruneSpaces: true,
            deleteIfEmpty: true
        },
        'b': {
            tagName: 'b',
            allowedChildren: ['#text', 'link', 'i', 'u', 'footnote', 'reference'],
            pruneSpaces: true,
            deleteIfEmpty: true
        },
        'u': {
            tagName: 'u',
            allowedChildren: ['#text', 'link', 'b', 'i', 'footnote', 'reference'],
            pruneSpaces: true,
            deleteIfEmpty: true
        },
        'inlinecode': {
            tagName: 'inlinecode',
            allowedChildren: ['#text'],
            pruneSpaces: true,
            deleteIfEmpty: true,
        },
        'link': {
            tagName: 'a',
            allowedChildren: ['#text', 'b', 'i', 'u', 'inlinecode'],
            allowedAttributes: ['href'],
            pruneSpaces: true,
            deleteIfEmpty: true
        },
        'footnote': {
            tagName: 'span',
            className: 'footnote',
            allowedAttributes: ['class', 'contenteditable', 'data-note'],
            allowedClassNames: ['footnote'],
            allowedChildren: [],
            buildAttributes: [{name: 'contenteditable', build: function() { return false }}]
        },
        'inlineequation': {
            tagName: 'inlineequation',
            allowedAttributes: ['contenteditable', 'data-latexequation', 'id'],
            allowedChildren: [],
            buildAttributes: [
                {name: 'contenteditable', build: function() { return false }},
                {name: 'id', build: function() { return uuid() }}
            ]
        },
        'reference': {
            tagName: 'span',
            className: 'reference',
            allowedAttributes: ['class', 'contenteditable', 'data-ref', 'data-external'],
            allowedClassNames: ['reference'],
            allowedChildren: [],
            buildAttributes: [{name: 'contenteditable', build: function() { return false }}]
        }
    };

    // According to this config:
    //   when the editor updated a section which
    //     - contains a "h2" element or
    //     - contained a "h2" element or
    //     - is a "h2" element or
    //     - was a "h2" element
    // the modificationLogEntry will have a field "mightIncludeHeadingUpdates" set to true
    this.modLogFlags = {
        Heading: ['h1', 'h2', 'h3', 'h4', 'h5'],
        TableOfContent: ['nav'],
        Bibliographie: ['bibliographie'],
        Reference: ['.reference[data-external="true"]'],
        Footnote: ['.footnote'],
        Inlinequation: ['.inlineequation'],
        FootnotesSection: ['footnotes'],
    };

    this.addSectionType(paragraphSectionType);
    this.addSectionType(tableSectionType);
    this.addSectionType(unorderedListSectionType);
    this.addSectionType(orderedListSectionType);
    this.addSectionType(codeSectionType);
    this.addSectionType(tocSectionType);
    this.addSectionType(bibliographieSectionType.setEditor(this));
    this.addSectionType(footnotesSectionType.setEditor(this));
    this.addSectionType(heading1SectionType);
    this.addSectionType(heading2SectionType);
    this.addSectionType(heading3SectionType);
    this.addSectionType(heading4SectionType);
    this.addSectionType(heading5SectionType);
    this.addSectionType(imageSectionType.setEditor(this));
    this.addSectionType(formulaSectionType);
    this.addSectionType(mermaidSectionType);
    this.addSectionType(blockquoteSectionType);

    this.htmlRazor = new HTMLRazor(this.tagTransformations, this.contentRules);
    this.documentupdater = new Documentupdater(this.contentElement, this.htmlRazor);
    this.activateInputEventProcessing();

    this.subscribe(function(modLogEntry) {
        if(modLogEntry.tags !== 'undo') {
            self.history.push(modLogEntry);
            if(self.history.length > 30) {
                self.history.shift();
            }
        }

        if(modLogEntry.tags !== 'redo' && modLogEntry.tags !== 'undo') {
            self.undoneModifications = [];
        }
    });

    window.addEventListener('resize', function() {
        var section = self.focusedSection();

        if(section && section.onWindowResize) {
            section.onWindowResize(self);
        }
    })

    document.addEventListener('selectionchange', function(e) {
        if(self.isContentEditable() && self._mouseDown && !self.caret.isCollapsed()) {
            self.setContentEditable(false);
        }

        var section = self.focusedSection();

        if(section && section.onSelectionChange) {
            section.onSelectionChange(self);
        }
    });

    document.addEventListener('mousedown', function(e) {
        self._mouseDown = true;
        self.setContentEditable(true);
    });

    document.addEventListener('mouseup', function(e) {
        self._mouseDown = false;
        if(!self.areMultipleSectionsSelected()) {
            self.setContentEditable(true);
        }
    });

    window.addEventListener('scroll', function(e) {
        self.sectionTypeSelector.displayNextTo(self.focusedSection());
    });

    window.addEventListener('resize', function(e) {
        self.sectionTypeSelector.displayNextTo(self.focusedSection());
        self.textEnrichmentControl.updatePositionIfVisible();
    });

    this.caret.subscribeSelectionChange(function(selection) {
        var section = self.sectionAtCaretPostion(),
            previousFocusedSection = self.focusedSection();

        if(section && !self.isFocused(section)) {
            self.focusSection(section);

            if(previousFocusedSection && self.shouldSectionBeRemovedIfUnfocused(previousFocusedSection)) {
                // this will delete the previous focused Section in case it is empty
                self.replaceSectionWithHTML(previousFocusedSection, previousFocusedSection.outerHTML);
            }
        }

        self.scrollToFocusedSectionIfNotInViewport();
    });

    this.contentElement.addEventListener('input', function(e) {
        if(self.isInputEventProcessingActivated() && e.target.tagName !== 'INPUT') {
            self.replaceSectionWithHTML(e.target, e.target.outerHTML, {inputEvent: e})
        }
    });

    this._initDone = true;
}

Editor.prototype = {

    displayModal: function(fields, handler, notFocusFirstInput) {
        var self = this, form;

        this.freezeSelection({
            'unfreezeCallback': function() {
                self.textEnrichmentControl.preventEnrichmentControllToBeHidden = false;
                self.textEnrichmentControl.hide();
            },
        });

        try {
            form = new DeclarativForm({fields: fields}, handler, () => {
                self.unfreezeSelection();
                self.unfocusSection();
                self.caret.clearSelection();
            });
            form.openInModal();

            if(!notFocusFirstInput && fields[0] && fields[0].domElement && fields[0].domElement.tagName === 'DL-SELECT') {
                form.formElement.querySelector('input').focus();
            }

            if(!notFocusFirstInput && fields[0] && fields[0].domElement && fields[0].domElement.tagName === 'TEXTAREA') {
                form.formElement.querySelector('textarea').focus();
            }

            if(!notFocusFirstInput && fields[0] && fields[0].domElement && fields[0].domElement.tagName === 'INPUT') {
                form.formElement.querySelector('input').focus();
            }
        } catch(e) {
            self.unfreezeSelection();
            throw e;
        }
    },

    undo: function() {
        var logEntry = this.history.pop();

        if(logEntry) {
            this.setContent(logEntry.beforeState(), { caretPosition: logEntry.beforeStateCaretPosition, modificationLogTags: 'undo' });
            this.focusSection(this.sectionAtCaretPostion(), { force: true });
            this.undoneModifications.push(logEntry);
        }
    },

    redo: function() {
        var logEntry = this.undoneModifications.pop();

        if(logEntry) {
            this.setContent(logEntry.afterState(), { caretPosition: logEntry.afterStateCaretPosition, modificationLogTags: 'redo' });
            this.focusSection(this.sectionAtCaretPostion(), { force: true });
        }
    },

    emptyHistory: function() {
        this.history = [];
        this.undoneModifications = [];
    },

    selectEverything: function() {
        var lastSection = this.contentElement.children[this.contentElement.children.length-1],
            firstSection = this.contentElement.children[0],
            lastNonEmptySectionIndex = lastSection.innerText !== '' ? this.contentElement.children.length-1 : this.contentElement.children.length-2,
            firstNonEmptySectionIndex = firstSection.innerText !== '' ? 0 : 1,
            range = document.createRange(),
            sel = window.getSelection(),
            allTextNodesOfFirstSection = this.allTextNodesOfSection(firstNonEmptySectionIndex),
            allTextNodesOfLastSection = this.allTextNodesOfSection(lastNonEmptySectionIndex),
            lastTextNodeOfLastSection = allTextNodesOfLastSection[allTextNodesOfLastSection.length-1];

        range.setStart(allTextNodesOfFirstSection[0], 0);
        range.setEnd(lastTextNodeOfLastSection, lastTextNodeOfLastSection.length);
        sel.removeAllRanges();
        sel.addRange(range);

        if(firstNonEmptySectionIndex !== lastNonEmptySectionIndex) {
            for(let i=0; i<this.contentElement.children.length; i++) {
                this.contentElement.children[i].blur();
            }
            this.setContentEditable(false);
        }
    },

    allTextNodesOfSection: function(index) {
        return utils.getAllTextNodesOfElement(this.sectionAt(index))
    },

    isSpellcheckEnabled: function() {
        return this.contentElement.getAttribute('spellcheck') === 'true';
    },

    buildAddSectionButton: function(type) {
        var self = this,
            btn = document.createElement('div');

        if(type !== 'bottom' && type !== 'top') return false

        btn.className = type + 'SectionInsertButton'
        btn.innerHTML = '<span>Add Section</span>';
        btn.onclick = function() { self.addSection(type); btn.onmouseover()}
        btn.onmouseover = function() {
            var section = self.contentElement[type == 'bottom' ? 'lastChild' : 'firstChild'];
            if(self.shouldSectionBeRemovedIfUnfocused(section)) {
               btn.classList.add('deactivatedSectionInsertButton');
            } else {
               btn.classList.remove('deactivatedSectionInsertButton');
            }
        };
        return btn;
    },

    isContentEditable: function() {
        return this._isContentEditable;
    },

    setContentEditable: function(shouldBeEditable) {
        var self = this,
            indexOfFocusedSection = this.indexOfFocusedSection();

        if(this._isContentEditable === shouldBeEditable) return;

        var updateDom = function(el, shouldBeEditable) {
            if(el.setContenteditable) {
                el.setContenteditable(shouldBeEditable, el);
            } else {
                if(shouldBeEditable) {
                    el.setAttribute('contenteditable', true);
                } else {
                    el.removeAttribute('contenteditable');
                }
            }
        }

        this._isContentEditable = shouldBeEditable;
        for(let i=0; i<this.contentElement.children.length; i++) {

            if(Math.abs(indexOfFocusedSection - i) <= 3) {
                updateDom(self.contentElement.children[i], shouldBeEditable);
            } else {
                (function(el) {
                    window.setTimeout(function() {
                        updateDom(el, shouldBeEditable);
                    }, 0);
                })(self.contentElement.children[i]);
            }
        }

        if(shouldBeEditable) {
            this.refreshFocus();
        }
    },

    refreshFocus: function() {
        var range, sel = window.getSelection();
        if(sel.rangeCount > 0 && !this.isSelectionFreezed) {
            range = sel.getRangeAt(0);
            if(range) {
                sel.removeRange(range);
                sel.addRange(range);
            }
        }
    },

    sectionAt: function(index) {
        return this.contentElement.children[index];
    },

    indexOf: function(section) {
        return this.contentElement.children.indexOf(section);
    },

    indexOfFocusedSection: function() {
        return this.indexOf(this.focusedSection());
    },

    scrollToFocusedSectionIfNotInViewport: function() {
        var section;
        if(this.isFocusedSectionInViewport() === false) {
            section = this.focusedSection();
            if(section) {
                window.scrollTo(0, section.offsetTop-(window.innerHeight/2));
            }
        }
    },

    isFocusedSectionInViewport: function() {
        var section = this.focusedSection();
        if(!section) return;
        return window.innerHeight-20 > section.getBoundingClientRect().y;
    },

    addSection: function(position) {
        position = position || 'bottom';

        if(position === 'bottom') {
            return this.addNewSectionNextTo(this.contentElement.lastChild);
        } else if(position === 'top') {
            return this.addNewSectionNextTo(this.contentElement.firstChild, 'before');
        } else {
            return false;
        }
    },

    addNewSectionNextTo: function(section, position) {
        if(this.shouldSectionBeRemovedIfUnfocused(section)) {
            return false;
        }

        var emptySection = document.createElement('p');

        this.modificationLogEntry = new ModificationLogEntry();
        emptySection.innerHTML = '';
        emptySection.originalHTML = emptySection.outerHTML;
        emptySection.setAttribute('contenteditable', true);

        this.contentElement.insertBefore(emptySection, (position === 'before' ? section : section.nextSibling));
        this.modificationLogEntry.retainAllSectionsBefore(emptySection);
        this.modificationLogEntry.insertSection(emptySection);
        this.modificationLogEntry.retainAllSectionsAfter(emptySection);

        this.focusSection(emptySection);
        this.caret.positionAtTheBeginningOf(emptySection);
        this.notifySubscribers(this.modificationLogEntry);
        return true;
    },

    removeSection: function(section) {
        if(!this.isSection(section)) return;

        if(this.contentElement.children.length === 1) {
            this.replaceSectionWithHTML(section, '<p></p>');
            this.caret.positionAtTheBeginningOf(this.contentElement.children[0]);
        } else {
            this.modificationLogEntry = new ModificationLogEntry();
            this.modificationLogEntry.modLogFlags = this.modLogFlags;
            this.modificationLogEntry.retainAllSectionsBefore(section);
            this.modificationLogEntry.deleteSection(section);
            this.modificationLogEntry.retainAllSectionsAfter(section);

            this.caret.saveSelection(this.contentElement);
            this.contentElement.removeChild(section);
            this.modificationLogEntry.wordCount = this.getWordCount();
            this.updateFootnotesNumbering();
            this.updateReferenceNumbering();
            this.caret.restoreSelection(0);
            this.notifySubscribers(this.modificationLogEntry);
        }
    },

    addSectionType: function(sectionType) {
        Object.assign(this.tagTransformations, sectionType.tagTransformations || {});
        Object.assign(this.contentRules, sectionType.contentRules || {});
        this.textEnrichmentControl.addEnrichments(sectionType.enrichments || []);
        this.supportedSectionTypes[sectionType.name] = sectionType;

        if(sectionType.onEditorContentChanged) {
            this.subscribe(sectionType.onEditorContentChanged, true);
        }
    },

    subscribe: function(callback, notifyOnMetadataChange) {

        if(notifyOnMetadataChange) {
            callback.notifyOnMetadataChange = true;
        }

        this.subscribers.push(callback);
    },

    subscribeReferenceInsertion: function(callback) {
        this.referenceInsertedSubscribers.push(callback);
    },

    subscribeSectionFocusChange: function(callback) {
        this.sectionFocusChangeSubscribers.push(callback)
    },

    isInputEventProcessingActivated: function() {
        return this.cleanupContentOnInputEvent;
    },

    deactivateInputEventProcessing: function() {
        for(let i=0; i<this.contentElement.children.length; i++) {
            this.contentElement.children[i].HTMLbevoreInputProcessingDeactivation = this.contentElement.children[i].outerHTML;
        }

        this.sectionCountBeforeInputProcessing = this.contentElement.children.length;
        this.cleanupContentOnInputEvent = false;
    },

    activateInputEventProcessing: function() {
        this.cleanupContentOnInputEvent = true;
        var changesMade = false;

        if(this.sectionCountBeforeInputProcessing === this.contentElement.children.length) {
            for(let i=0; i<this.contentElement.children.length; i++) {
                if(this.contentElement.children[i].forceUpdateOnInputProcesssingEnablement ||
                    this.contentElement.children[i].HTMLbevoreInputProcessingDeactivation !== this.contentElement.children[i].outerHTML) {
                    this.replaceSectionWithHTML(this.contentElement.children[i], this.contentElement.children[i].outerHTML);
                    changesMade = true;
                }

                delete this.contentElement.children[i].HTMLbevoreInputProcessingDeactivation;
                delete this.contentElement.children[i].forceUpdateOnInputProcesssingEnablement;
            }

            if(changesMade) {
                this.updateFootnotesNumbering();
                this.updateReferenceNumbering();
            }
        } else {
            this.content(this.contentElement.innerHTML);
        }

        delete this.sectionCountBeforeInputProcessing;
    },

    freezeSelection: function(args) {
        var args = args || {},
            clickableElement = args['unfreezeOnClicksOutsiteOf'],
            self = this,
            f;

        this.unfreezeCallback = args['unfreezeCallback'];

        if(clickableElement) {
            document.body.addEventListener('click', f = function(e) {
                var tmp = e.target,
                    path = [];

                while(tmp.parentElement) {
                    path.push(tmp.parentElement);
                    tmp = tmp.parentElement;
                }

                if(path.indexOf(clickableElement) === -1) {
                    self.unfreezeSelection(false);
                    document.body.removeEventListener('click', f);
                }
            });
        }

        if(!this.isSelectionFreezed) {
            this.deactivateInputEventProcessing();
            document.execCommand('backColor', false, '#b2d7fd');
            this.caret.saveSelection(this.contentElement);
            window.getSelection().removeAllRanges();
            this.isSelectionFreezed = true;
        }
    },

    unfreezeSelection: function(restoreSelection) {
        if(this.isSelectionFreezed) {
            restoreSelection = restoreSelection === undefined ? true : restoreSelection;

            if(restoreSelection) {
                if(this.caret.selectionIsCollapsed && this.caret.selectionFocusNode.tagName === 'TD') {
                    this.caret.restoreSelection(false, 'TryDOMStrategyFirst');
                } else {
                    this.caret.restoreSelection();
                }
            }

            this.activateInputEventProcessing();

            if(this.unfreezeCallback) {
                this.unfreezeCallback();
                this.unfreezeCallback = null;
            }
            this.isSelectionFreezed = false;
        }
    },

    notifySubscribers: function(modificationLogEntry) {
        this._cleanupModificationLogFromEditorSpecificMarkup(modificationLogEntry);

        const noNoOp = modificationLogEntry.log.find(l => {
            if(l.type === 'retain') {
                return false;
            }

            if(l.type === 'replace' && l.newSectionHTML === l.oldSectionHTML) {
                return false;
            }

            return true;
        })

        if(!noNoOp) {
            this.subscribers.filter(cb => cb.notifyOnMetadataChange).forEach(function(f) {f(modificationLogEntry)});
        } else {
            this.subscribers.forEach(function(f) {f(modificationLogEntry)});
        }
    },

    sectionByChildNode: function(child) {
        while(child) {
            if(this.isSection(child)) {
                return child;
            }
            child = child.parentNode;
        }
    },

    sectionAtCaretPostion: function() {
        return this.sectionByChildNode(this.caret.targetElement());
    },

    areMultipleSectionsSelected: function() {
        var sel = window.getSelection(), s1, s2;

        if(!sel || sel.isCollapsed) { return false }

        s1 = this.sectionByChildNode(sel.anchorNode);
        s2 = this.sectionByChildNode(sel.focusNode);

        return s1 && s2 && s1 !== s2;
    },

    placeCaretIntoSection: function(section, position, doNotFocusSection) {
        if(!section) return;
        position = position || 'end';

        if(position === 'preferredOrBeginning') {
            position = section.sectionType && section.sectionType.preferredCaretPositioning || 'beginning';
        }

        var targetEl = section,
            tmpTargetEl;

        if(section.sectionType && section.sectionType.editableElementSelector) {
            tmpTargetEl = section.querySelector(section.sectionType.editableElementSelector);
            targetEl = tmpTargetEl || section;
        }

        var range = document.createRange(),
            sel = window.getSelection(),
            textNodes = utils.getAllTextNodesOfElement(targetEl),
            textNode = position === 'end' ? textNodes[textNodes.length-1] : textNodes[0];

        // The focus/anchor node should be the deepest node possible.
        // Otherwise the text enrichment controlls will be placed at the wrong
        // position.

        if(position === 'end' && textNode) {
            this.caret.positionAfter(textNode);
        } else {
            range.selectNodeContents(textNode || targetEl);
            range.collapse(position !== 'end');
            sel.removeAllRanges();
            sel.addRange(range);
        }

        if(!doNotFocusSection) {
            this.focusSection(targetEl, {action: 'placeCaretIntoSection'});
        }
    },

    isSection: function(element) {
        return element &&
               element.parentElement === this.contentElement &&
               element.nodeType !== Node.TEXT_NODE;
    },

    focusSection: function(element, args) {
        args = args || {};
        if(!element || !this.isSection(element)) return;
        if(this.focusedElement === element && !args.force) return;
        var isAlreadyHighlighted = element.classList.contains('focused');

        this.unfocusSection();
        this.focusedElement = element;
        this.focusedElement.classList.add('focused');

        this.sectionFocusChangeSubscribers.forEach(function(cb) {cb()});
        this.sectionTypeSelector.displayNextTo(this.focusedElement);

        if(!isAlreadyHighlighted) {
            if(element && element.sectionType && element.sectionType.onFocus) {
                if(!this.areMultipleSectionsSelected()) {
                    element.sectionType.onFocus(element, this, args);
                }
            }
        }
    },

    unfocusSection: function() {
        var self = this,
            focusedSections = this.contentElement.querySelectorAll('.focused');

        focusedSections.forEach(function(sec) {
            if(sec.classList.contains('focused')) {
                sec.classList.remove('focused');

                if(sec.onUnfocus) {
                    sec.onUnfocus(self);
                }
            }
        });

        self.sectionTypeSelector.hide();
        this.focusedElement = null;
    },

    focusedSection: function() {
        return this.focusedElement;
    },

    isFocused: function(section) {
        return section === this.focusedElement;
    },

    moveCaretOneSectionUp: function(position) {
        position = position || 'end';
        var s = this.focusedSection();
        this.placeCaretIntoSection(s && s.previousSibling, position, true);
    },

    moveCaretOneSectionDown: function(position) {
        position = position || 'end';
        var s = this.focusedSection();
        this.placeCaretIntoSection(s && s.nextSibling, position, true);
    },

    moveFocusedSectionUp: function() {
        var focusedSection = this.focusedSection();
        if(focusedSection && focusedSection.previousSibling) {
            this.caret.saveSelection(this.contentElement);

            this.modificationLogEntry = new ModificationLogEntry();
            this.modificationLogEntry.modLogFlags = this.modLogFlags;
            this.modificationLogEntry.retainAllSectionsBefore(focusedSection.previousSibling);
            this.modificationLogEntry.replaceSection(focusedSection.previousSibling, focusedSection);
            this.modificationLogEntry.replaceSection(focusedSection, focusedSection.previousSibling);
            this.modificationLogEntry.retainAllSectionsAfter(focusedSection);

            this.contentElement.insertBefore(focusedSection, focusedSection.previousSibling);
            this.caret.restoreSelection(0, 'DOMStrategy');
            this.notifySubscribers(this.modificationLogEntry);
            this.sectionTypeSelector.displayNextTo(this.focusedSection());
            this.updateFootnotesNumbering();
            this.updateReferenceNumbering();
        }
    },

    moveFocusedSectionDown: function() {
        var focusedSection = this.focusedSection();
        if(focusedSection && focusedSection.nextSibling) {
            this.caret.saveSelection(this.contentElement);

            this.modificationLogEntry = new ModificationLogEntry();
            this.modificationLogEntry.modLogFlags = this.modLogFlags;
            this.modificationLogEntry.retainAllSectionsBefore(focusedSection);
            this.modificationLogEntry.replaceSection(focusedSection, focusedSection.nextSibling);
            this.modificationLogEntry.replaceSection(focusedSection.nextSibling, focusedSection);
            this.modificationLogEntry.retainAllSectionsAfter(focusedSection.nextSibling);

            if(focusedSection.nextSibling.nextSibling) {
                this.contentElement.insertBefore(focusedSection, focusedSection.nextSibling.nextSibling);
            } else  {
                this.contentElement.appendChild(focusedSection);
            }

            this.caret.restoreSelection(0, 'DOMStrategy');
            this.notifySubscribers(this.modificationLogEntry);
            this.sectionTypeSelector.displayNextTo(this.focusedSection());
            this.updateFootnotesNumbering();
            this.updateReferenceNumbering();
        }
    },

    changeFocusedSectionType: function(sectionTypeName, annotation) {
        var focusedSection = this.focusedSection(),
            st = this.supportedSectionTypes[sectionTypeName],
            newEl, sectionCreator, sectionIndex, changedSection,
            self = this, newContent, oldContent, rule;

        if(annotation) {
            annotation = [annotation]
        }

        sectionCreator = (st && st.getSectionElement) || function(existingSectionContent) {
            newContent = self.htmlRazor.cleanupHTML('<' + sectionTypeName + '>' +  existingSectionContent +  '<' + sectionTypeName + '>');
            newContent = newContent.next() || '';
            newContent = newContent.value || '';
            return newContent;
        }

        if(focusedSection) {
            rule = st && Object.values(st.contentRules).find(function(r) { return r.allowedToBeRoot });
            oldContent = focusedSection.innerHTML

            if(focusedSection.tagName === 'PRE' && focusedSection.querySelector('code')) {
                oldContent = focusedSection.querySelector('code').innerText
            }

            newEl = sectionCreator(oldContent, annotation, rule) || document.createElement(sectionTypeName);
            sectionIndex = this.indexOf(focusedSection);
            this.replaceSectionWithHTML(focusedSection, newEl.outerHTML, {action: 'changeFocusedSectionType'});
            utils.copyEventListenersRecursively(newEl, this.contentElement.children[sectionIndex]);
            this.focusSection(newEl, {action: 'changeFocusedSectionType'});
            changedSection = this.contentElement.children[sectionIndex];
        }
    },

    mergeParagraphIntoListIfSectionTypeMatch: function(s1, s2) {
        var liItem, newElement;

        if(s1.tagName !== 'UL' && s1.tagName !== 'OL') {
            return false;
        }

        if(s2.tagName !== 'P') {
            return false;
        }

        newElement = s1.cloneNode(false);
        newElement.innerHTML = s1.innerHTML + '<li>' +  s2.innerHTML + '</li>'
        return newElement;
    },

    mergeSimpleTextSectionsIfSectionTypeMatch: function(s1, s2) {
        if(!s1 || !s2) { return false }

        var s2IsEmpty = s2.innerHTML.trim() === '',
            mergeable = ['P', 'H1', 'H2', 'H3', 'H4', 'H5'],
            newElement;

        if(s2IsEmpty) {
            return s1;
        }

        if(mergeable.includesAll(s1.tagName, s2.tagName)) {
            newElement = s1.cloneNode(false);
            newElement.innerHTML = s1.innerHTML + s2.innerHTML;
            return newElement;
        }
    },

    mergeSections: function(s1, s2) {
        var sectionIndex = this.indexOf(s1),
            s2IsEmpty = s2.innerText.trim() === '',
            newElement;

        newElement = this.mergeParagraphIntoListIfSectionTypeMatch(s1, s2);

        if(!newElement) {
            newElement = this.mergeSimpleTextSectionsIfSectionTypeMatch(s1, s2);
        }

        if(newElement) {
            this.setContent(newElement.outerHTML, { startSection: s1, endSection: s2 });

            if(s2IsEmpty) {
                this.placeCaretIntoSection(this.contentElement.children[sectionIndex]);
            }
        }
    },

    replaceSectionWithHTML: function(oldSection, outerHTML, args) {
        args = args || {};
        args.section = oldSection;
        this.setContent(outerHTML, args);
    },

    content: function(content, args) {
        if(typeof content === 'undefined') {
            return this.getContent();
        } else {
            return this.setContent(content, args);
        }
    },

    getContent: function() {
        return this.getRenderedContent();
    },

    getRenderedContent: function() {
        var result = '',
        section = this.contentElement.children[0];

        while(section) {
            result += this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(section.outerHTML);
            section = section.nextSibling;
        }

        return result;
    },

    getOriginalContent: function() {
        var result = '',
            section = this.contentElement.children[0];

        while(section) {
            result += this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(section.originalHTML);
            section = section.nextSibling;
        }

        return result;
    },

    applyChangeset: function(changeset, attr) {
        var i = 0;
        var totalOldContentLength = 0;
        var changesetCursorOldVersion = 0;
        var changesetCursorNewVersion = 0;
        var lengthOfUnchangedSection = 0;
        var lengthOfRemainingContent = 0;
        var changesStartAfter = 0;
        var changesEndAfterInOldVersion = 0;
        var updateStartSection = this.contentElement.children[0];

        for(; i<changeset.length; i++) {
            if(changeset[i].constructor.name !== 'Retain') {
                break;
            }

            changesStartAfter += changeset[i].length;
            changesetCursorOldVersion += changeset[i].length;
        }

        while((lengthOfUnchangedSection + this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(updateStartSection.originalHTML).length) <= changesStartAfter) {
            if(!updateStartSection.nextSibling) {
                break;
            }

            lengthOfUnchangedSection += this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(updateStartSection.originalHTML).length;

            updateStartSection = updateStartSection.nextSibling;
        }

        changesetCursorNewVersion = changesetCursorOldVersion;

        for(; i<changeset.length; i++) {
            changesetCursorOldVersion += changeset[i].input;
            changesetCursorNewVersion += changeset[i].output;

            if(changeset[i].constructor.name === 'Skip') {
                changesEndAfterInOldVersion = changesetCursorOldVersion;
            }
        }

        var updateEndSection = updateStartSection;
        var tmpChangesEndPosition = lengthOfUnchangedSection;

        while((tmpChangesEndPosition + this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(updateEndSection.originalHTML).length) < changesEndAfterInOldVersion) {
            tmpChangesEndPosition += this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(updateEndSection.originalHTML).length;
            updateEndSection = updateEndSection.nextSibling;
        }

        var oldContent = '';
        var tmpSection = updateStartSection;

        while(tmpSection !== updateEndSection) {
            oldContent += this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(tmpSection.originalHTML);
            tmpSection = tmpSection.nextSibling;
        }

        oldContent += this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(updateEndSection.originalHTML);

        tmpSection = tmpSection.nextSibling;

        while(tmpSection) {
            lengthOfRemainingContent += this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(tmpSection.originalHTML).length;
            tmpSection = tmpSection.nextSibling;
        }

        totalOldContentLength = lengthOfUnchangedSection + oldContent.length + lengthOfRemainingContent;

        if(totalOldContentLength !== changeset.inputLength) {
            throw 'applyChangeset: the given changeset does not match the content length!!';
        }

        const slice = (cangeset, start, end) => {
            let processed = 0;
            let result = Changeset.create();

            for(let op of changeset) {
                let currentOpStart = processed;
                let currentOpEnd = processed + op.input;

                if(currentOpStart < start && currentOpEnd > start) {
                    if(op.constructor.name !== 'Retain') {
                        throw 'Retain operation expected when extracting the changes local to a section'
                    }

                    result.retain(op.input - (start - currentOpStart));
                } else if(currentOpStart >= start && currentOpEnd <= end) {
                    result.ops.push(op);
                } else if(currentOpStart >= start && currentOpStart < end && end < currentOpEnd) {
                    if(op.constructor.name !== 'Retain') {
                        throw 'Retain operation expected when extracting the changes local to a section';
                    }

                    result.retain(op.input - (currentOpEnd-end));

                } else if(currentOpStart > end) {
                   break;
                }

                processed += op.input;
            }

            return result.end();
        }

        var localChangeset = slice(changeset, lengthOfUnchangedSection, lengthOfUnchangedSection+oldContent.length);
        localChangeset.addendum = changeset.addendum;
        localChangeset.removendum = changeset.removendum;

        var newContent = localChangeset.apply(oldContent);

        this.setContent(newContent, {
            ...attr,
            startSection: updateStartSection,
            endSection: updateEndSection
        });
    },

    setContent: function(content, args) {
        args = args || {};

        var insertedContent = args.inputEvent && args.inputEvent.data,
            modificationLogEntry,
            currentCaretPosition,
            beforeStateCaretPosition,
            scrollPosition = this.saveScrollPosition(args.section);

        if(this.caret.isWithinElement(this.contentElement) && args.positionCaretAtTheEndOfSectionWithIndex === undefined) {
            currentCaretPosition = this.caret.saveSelection(this.contentElement, insertedContent),
            beforeStateCaretPosition = this.caretPositions[this.caretPositions.length-1];
        }

        args.modificationLogEntry = args.modificationLogEntry || new ModificationLogEntry();
        args.modificationLogEntry.modLogFlags = this.modLogFlags;

        args.modificationLogEntry.actor = args.actor

        this.caretPositions.push(args.caretPosition || currentCaretPosition);

        modificationLogEntry = this.documentupdater.updateHTML(content, this.focusedSection(), { ...args, caret: this.caret });

        if(modificationLogEntry.focusedSectionHasBeenModified && args.positionCaretAtTheEndOfSectionWithIndex === undefined) {
            if(modificationLogEntry.changeSectionType) {
                args.action = 'changeFocusedSectionType';
            }

            if(!args.caretPosition) {
                if(!modificationLogEntry.focusedSectionDOMWasNotModified || !(currentCaretPosition &&  currentCaretPosition.selectionIsCollapsed)) {

                    if(modificationLogEntry.insertedBeforeSelectionRangeStart) {
                        this.caret.rangeStart += modificationLogEntry.insertedBeforeSelectionRangeStart;
                    }

                    if(modificationLogEntry.insertedBeforeSelectionRangeEnd) {
                        this.caret.rangeEnd += modificationLogEntry.insertedBeforeSelectionRangeEnd;
                    }

                    this.caret.restoreSelection(modificationLogEntry.deletedCharsByMarkupTransformations, 'TryDOMStrategyFirst');
                }

                if(modificationLogEntry.focusedSectionReplacement) {
                    this.focusSection(modificationLogEntry.focusedSectionReplacement, args);
                }
            }
        } else if(args.positionCaretAtTheEndOfSectionWithIndex !== undefined) {
            this.caret.positionAtTheBeginningOf(this.sectionAt(args.positionCaretAtTheEndOfSectionWithIndex));
        }

        if(args.caretPosition) {
            this.caret.restoreSelectionViaOffsetStrategy(0, args.caretPosition);
        }

        this.restoreScrollPostion(modificationLogEntry.focusedSectionReplacement, scrollPosition);

        this.updateFootnotesNumbering();
        this.updateReferenceNumbering();
        this.updateInlineEquationNumbering(modificationLogEntry);

        modificationLogEntry.beforeStateCaretPosition = beforeStateCaretPosition;
        modificationLogEntry.afterStateCaretPosition = args.caretPosition || currentCaretPosition;
        modificationLogEntry.tags = args.modificationLogTags;

        modificationLogEntry.wordCount = this.getWordCount();

        this.showInputTooltipIfContentIsEmpty();

        this.focusSection(this.sectionAtCaretPostion(), args);
        this._removeEmptySectionsExceptOfFocusedSection(modificationLogEntry);
        this.notifySubscribers(modificationLogEntry);

        return modificationLogEntry;
    },

    showInputTooltipIfContentIsEmpty: function() {
        if(this._initDone && this.contentElement.children.length === 1 && this.contentElement.innerText.trim() === '' && this.contentElement.children[0].tagName === 'P') {
            this.containerElement.insertBefore(this.hintEl, this.contentElement);
        } else {
            this.hintEl.remove();
        }
    },

    getWordCount: function() {
        var result = 0;

        for(let i=0; i<this.contentElement.children.length; i++) {
            result += this.contentElement.children[i].wordCount;
        }

        return result;
    },

    saveScrollPosition: function(section) {
        var nestedCodeEl,
            isDiaSection = section && section.classList && section.classList.contains('m2dia'),
            isCodeSection = section && section.tagName === 'PRE';

        if(isDiaSection || isCodeSection) {
            nestedCodeEl = section.querySelector('code');

            return {
                x: window.scrollX,
                y: window.scrollY,
                codeScrollX: nestedCodeEl && nestedCodeEl.scrollLeft
            }
        }
    },

    restoreScrollPostion: function(section, scrollPosition) {
        var nestedCodeEl;
        if(scrollPosition) {
            window.scrollTo(scrollPosition.x, scrollPosition.y);
            if(scrollPosition.codeScrollX && section) {
                nestedCodeEl = section.querySelector('code')
                nestedCodeEl.scrollTo(scrollPosition.codeScrollX, nestedCodeEl.scrollY)
            }
        }
    },

    updateFootnotesNumbering: function() {
        var allFootnotes = this.contentElement.querySelectorAll('.footnote');
        for(var i=0; i<allFootnotes.length; i++) {
            if(allFootnotes[i].innerText !== (i+1).toString()) {
                allFootnotes[i].innerText = (i+1);
            }
        }
    },

    updateReferenceNumbering: function() {
        var refs = this.contentElement.querySelectorAll('.reference');

        for(var i=0; i<refs.length; i++) {
            this.reference.updateRefElement(refs[i]);
        }
    },

    updateInlineEquationNumbering: function(modificationLogEntry) {
        var eqs = this.contentElement.querySelectorAll('inlineequation'),
            latex, self = this;

        for(var i=0; i<eqs.length; i++) {
            let eq = eqs[i]
            eq.innerHTML = '';
            latex = utils.attributeSaveStringToString(eq.dataset.latexequation)

            eq.onclick = eq.onclick || function(e) {
                self.caret.positionAfter(utils.getFirstParentWithTagName(e.target));
            }

            try {
                katex.render(latex, eq, {
                    throwOnError: true,
                    displayMode: false
                });
            } catch (ex) {
                eq.innerHTML = '<span class="error">invalid LaTeX equation</span>';
            }
        }
    },

    shouldSectionBeRemovedIfUnfocused: function(section) {
        return section.innerText.trim() === '' &&
               !section.classList.find(c => c.startsWith('focused-by-api-actor')) &&
               !(this.htmlRazor.getRuleByElement(section).deleteIfEmpty === false);
    },

    deleteNonCollapsedSelectionContent: function(sel) {
        sel = sel || window.getSelection();

        if(!sel) return;

        var s1 = this.sectionByChildNode(sel.anchorNode),
            s2 = this.sectionByChildNode(sel.focusNode),
            i1 = this.indexOf(s1),
            i2 = this.indexOf(s2),
            tmp, newElement;

        if(i1 === undefined || i2 === undefined) return;

        if(i1 > i2) {
            tmp = s1; s1 = s2; s2 = tmp;
        }

        // We have to keep the sections in between the selection in order
        // to caclulate the modificationLogEntry. They will be removed by
        // the setContent function which also calculates the LogEntry.
        this._deleteSelectedTextButKeepAllSelectedSections(s1, s2, sel);

        newElement = s1.cloneNode(false);
        newElement.innerHTML = s1.innerHTML + s2.innerHTML;

        this.setContent(newElement.outerHTML, {startSection: s1, endSection: s2});

        if(!this.sectionAtCaretPostion()) {
            this.placeCaretIntoSection(this.contentElement.lastChild);
        }

        this.setContentEditable(true);
    },

    setFilePersistHandler: function(handler) {
        Object.values(this.supportedSectionTypes)
            .filter(section => section.persistFile)
            .forEach(section => {
                section.persistFile = handler;
        })
    },

    addReferenceData: function(data) {
        this.reference.addReferenceData(data);
        this.updateReferenceNumbering();

        if(this.contentElement.children[0]) {
            this.modificationLogEntry = new ModificationLogEntry();
            this.modificationLogEntry.retainSection(this.contentElement.children[0]);
            this.modificationLogEntry.retainAllSectionsAfter(this.contentElement.children[0]);
            this.modificationLogEntry.mightIncludeReferenceUpdates = true;
            this.notifySubscribers(this.modificationLogEntry);
        }
    },

    _removeEmptySectionsExceptOfFocusedSection: function(finalizedModificationLogEntry) {
        var sections = this.contentElement.children,
            toBeDeleted = [], indexCorrection = 0, oldModLog, deletedSection;

        if(sections.length === 1) return;

        for(let i=0; i<sections.length; i++) {
            if(this.shouldSectionBeRemovedIfUnfocused(sections[i]) &&
               sections[i] !== this.focusedSection()) {
                 toBeDeleted.push({section: sections[i], index: i});
            }
        }

        for(let i=0; i<toBeDeleted.length; i++) {
            deletedSection = this.contentElement.removeChild(toBeDeleted[i].section);
            oldModLog = finalizedModificationLogEntry.deleteSectionAt(toBeDeleted[i+indexCorrection].index, deletedSection);
            if(oldModLog.type === 'insert') {
                indexCorrection--;
            }
        }

        this.sectionTypeSelector.displayNextTo(this.focusedSection());
    },

    // Example: the pipes ("|") show where the selection starts/ends
    // content before execution: <p>section |one</p><p>section two</p><p>section three</p><p>section |four</p>
    // content after execution: <p>section ||</p><p></p><p></p><p>four</p>
    _deleteSelectedTextButKeepAllSelectedSections: function(s1, s2, sel) {
        var inBetweenSections = [],
            i1 = this.indexOf(s1),
            i2 = this.indexOf(s2),
            cec = this.contentElement.children,
            tmp, i, range, selection, lastInsertedDummySection, clonedRange;

        if(i1 > i2) {
            tmp = s1; s1 = s2; s2 = tmp;
            tmp = i1; i1 = i2; i2 = tmp;
        }

        s1.summarizedContentLength = undefined;
        s2.summarizedContentLength = undefined;

        for(i=i1+1 ; i<i2; i++) {
            tmp = cec[i].cloneNode(false);
            tmp.originalHTML = cec[i].originalHTML;
            tmp.summarizedContentLength = undefined;

            Object.keys(this.modLogFlags).forEach(function(flag) {
                tmp['originalHTMLContains' + flag] = cec[i]['originalHTMLContains' + flag];
            });

            inBetweenSections.push(tmp);
        }

        range = sel.getRangeAt(0);
        clonedRange = range.cloneRange();
        range.deleteContents();
        // clonedRange.collapse; ?? why not clonedRange.collapse()
        selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(clonedRange);

        lastInsertedDummySection = s2;
        while(inBetweenSections.length > 0) {
            tmp = inBetweenSections.pop();
            this.contentElement.insertBefore(tmp, lastInsertedDummySection);
            lastInsertedDummySection = tmp;
        }
    },

    _cleanupHTMLFromEditorSpecificMarkupForSectionHTML: function(HTML) {
        return HTML.replace(/^<([a-zA-Z0-9\-]+?)\s(.*?)>/, (match, tagName, attributes) => {
            attributes = attributes
                .match(/([a-zA-Z0-9\-]+=".*?")|[a-zA-Z0-9\-]*/g)
                .map(x => x.trim())
                .filter(x => x !== '')
                .map(attr => {
                    attr = attr.split('=')

                    if(attr[1]) {
                        attr[1] = attr[1].replace(/^("|')/g, '').replace(/("|')$/g, '')
                    }

                    if(attr[0] === 'class') {
                        attr[1] = attr[1]
                            .split(' ')
                            .map(c => c.trim())
                            .filter(c => c !== 'focused' && !c.startsWith('focused-by-api-actor'))
                            .join(' ')
                    }

                    if(attr[1]) {
                        attr[1] = `"${attr[1].trim()}"`
                    }

                    return attr.join('=')
                })
                .filter(attr => !attr.match(/contenteditable="true"/))
                .filter(attr => attr !== 'class=')
                .join(' ')


            return attributes !== '' ?
                `<${tagName} ${attributes}>` :
                `<${tagName}>`
        }).replaceAll('&nbsp;', ' ');
    },

    _cleanupModificationLogFromEditorSpecificMarkup: function(modificationLogEntry) {
        modificationLogEntry.log.forEach(log => {
            if(log.oldSectionHTML) {
                log.oldSectionHTML = this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(log.oldSectionHTML);
            }
            if(log.newSectionHTML) {
                log.newSectionHTML = this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(log.newSectionHTML);
            }
            if(log.sectionHTML) {
                log.sectionHTML = this._cleanupHTMLFromEditorSpecificMarkupForSectionHTML(log.sectionHTML);
            }
        });
    }
}

module.exports = Editor;


/***/ }),

/***/ "../structured-text-editor/src/key_press_handler.js":
/*!**********************************************************!*\
  !*** ../structured-text-editor/src/key_press_handler.js ***!
  \**********************************************************/
/***/ ((module) => {

function KeyPressHandler(editor) {
    var self = this;
    this.editor = editor;

    document.addEventListener("paste", function (e) {
        var pasteData;
        editor.caret.ensureExpandedSelectionIsWithinElement(editor.contentElement);

        if(self.editor.areMultipleSectionsSelected()) {
            self.editor.deleteNonCollapsedSelectionContent();
        }

        if((editor.caret.getContextElement('code') && editor.caret.getContextElement('pre'))
           || editor.caret.getContextElement('caption')
           || editor.caret.getContextElement('citesrc'))
            {
            pasteData = e.clipboardData.getData('text/plain').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            e.preventDefault();
            document.execCommand('inserthtml', false, pasteData);
        }
    });

    document.addEventListener("keydown", function (e) {
        var section, handleEnterKey;

        if(!e.metaKey && !e.ctrlKey) {
            if(e.key === ' ')              { !editor.isContentEditable() && e.preventDefault(); }

            if(e.key === 'Backspace') {
                section = editor.sectionByChildNode(e.target);
                editor.caret.ensureExpandedSelectionIsWithinElement(editor.contentElement);
                if(section && section.onKeyBackspace) {
                    section.onKeyBackspace(e, editor);
                } else {
                    self.handleBackspace(e);
                }
            }

            if(e.key === 'ArrowUp') {
                section = editor.sectionByChildNode(e.target);
                if(section && section.onKeyUp) {
                    section.onKeyUp(e, editor);
                } else {
                    editor.moveCaretOneSectionUp();
                    e.preventDefault();
                }
            }

            if(e.key === 'ArrowDown') {
                section = editor.sectionByChildNode(e.target);
                if(section && section.onKeyDown) {
                    section.onKeyDown(e, editor);
                } else {
                    editor.moveCaretOneSectionDown();
                    e.preventDefault();
                }
            }

            if(e.key === 'Enter') {
                section = editor.sectionByChildNode(e.target);
                handleEnterKey = function() {
                    if(e.shiftKey) {
                        self.handleShiftEnter(e);
                    } else if(section && section.onKeyEnter) {
                        section.onKeyEnter(e, editor);
                    } else if(section) {
                        editor.caret.insertLineBreak();
                        e.preventDefault();
                    }
                }

                if(e.isComposing) {
                    // e.target.dispatchEvent(new CompositionEvent('compositionend'));
                    // window.setTimeout(function() { handleEnterKey() }, 100);
                } else {
                    handleEnterKey();
                }
            }

            if(e.key === 'Tab') {
                section = editor.sectionByChildNode(e.target);
                if(section && section.onKeyTab) {
                    section.onKeyTab(e, editor);
                } else if(section && section.nextSibling && !e.shiftKey) {
                    editor.placeCaretIntoSection(section.nextSibling)
                    e.preventDefault();
                } else if(section && section.previousSibling && e.shiftKey) {
                    editor.placeCaretIntoSection(section.previousSibling)
                    e.preventDefault();
                }
            }

            if(e.key === ' ' && !(e.isComposing || e.keyCode === 229)) {
                section = editor.sectionByChildNode(e.target);
                if(section && !self.editor.caret.isPrecedingCharacterWhitespace(section)) {
                    document.execCommand('insertText', false, self.editor.htmlRazor.temproaryPruneProtectedWhitespace);
                    e.preventDefault();
                }
            }

            //do not handle the keys below if CMD or Control
            //is not pressed at the same time
            return;
        }

        if(e.key === 'Enter')             { self.handleShiftEnter(e); }
        else if(e.key === 'ArrowUp')      { editor.moveFocusedSectionUp(); e.preventDefault(); }
        else if(e.key === 'ArrowDown')    { editor.moveFocusedSectionDown(); e.preventDefault(); }
        else if(e.key === 'i')            { editor.textEnrichmentControl.show(true); e.preventDefault(); }
        else if(e.key === 'a')            { self.handleCmdA(e); }
        else if(e.key === 'z')            { editor.undo(); e.preventDefault(); }
        else if(e.key === 'y')            { editor.redo(); e.preventDefault(); }
        else {
            section = editor.sectionByChildNode(e.target);
            if(section && section.onKeyCombination) {
                section.onKeyCombination(e, editor);
            }
        }

        return true;
    });
}

KeyPressHandler.prototype = {

    handleShiftEnter: function(event) {
        var section = this.editor.sectionByChildNode(event.target);
        this.editor.addNewSectionNextTo(section);
        event.preventDefault();
    },

    handleBackspace: function(event) {
        var sel = window.getSelection(), s1, s2;

        if(!sel) return; //no caret positioned, no deletion required

        if(this.editor.caret.isCollapsedAndPositionedAtTheBeginningOf(this.editor.focusedSection())) {
            s2 = this.editor.sectionByChildNode(sel.anchorNode);
            s1 = s2.previousSibling;
            this.editor.mergeSections(s1, s2);
            event.preventDefault();
        }

        if(this.editor.areMultipleSectionsSelected()) {
            this.editor.deleteNonCollapsedSelectionContent(sel);
            event.preventDefault();
        }

        // for some reason there is a edge case in which the backspace doesn't
        // trigger a selection change and so the controlls will not been hidden
        // by the handler inteded to do this.
        this.editor.textEnrichmentControl.hide();
    },

    handleCmdA: function(event) {
        var elTag = event.target && event.target.tagName;
        var nativeEventHandlingTag = ['TEXTAREA', 'INPUT']

        if(!nativeEventHandlingTag.includes(elTag)) {
            this.editor.selectEverything();
            event.preventDefault();
        }
    }
}

module.exports = KeyPressHandler;


/***/ }),

/***/ "../structured-text-editor/src/references/reference_controller.js":
/*!************************************************************************!*\
  !*** ../structured-text-editor/src/references/reference_controller.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js");
var lookupRefs = __webpack_require__(/*! ../../lib/lookup_refs */ "../structured-text-editor/lib/lookup_refs/index.js");
var lookupURL = __webpack_require__(/*! ../../lib/lookup_refs/lookup_by_url */ "../structured-text-editor/lib/lookup_refs/lookup_by_url.js");
var throttle = __webpack_require__(/*! ../../lib/throttle/throttle */ "../structured-text-editor/lib/throttle/throttle.js");

var Reference = function(store, editor) {
    this.store = store;
    this.editor = editor;
}

Reference.prototype = {

    addReferenceData: function(data) {
        this.store.addReferenceData(data);
    },

    storeExternalRefData: function(id, attr) {
        this.store.set(id, attr);
        this.editor.referenceInsertedSubscribers.forEach((cb) => {
            cb(id, attr);
        })
    },

    getExternalRefData: function(id) {
        return this.store.get(id);
    },

    getAllExternalRefs: function() {
        return this.store.all(true);
    },

    updateRefElement: function(ref) {
        if(ref.getAttribute('data-external') !== 'true') {
            this.updateInternalRefElement(ref);
        } else {
            this.updateExternalRefElement(ref);
        }
    },

    // Argument: A DOM Element which is a clild element of the editor's content
    // element. The element should have the "data-ref" attribute representing the id
    // of an external reference (external references are books, papers).
    // The function will update the innerHTML of the passed reference element.
    updateExternalRefElement: function(ref) {
        var self = this, tmpContent, refkey, referencee = this.getExternalRefData(ref.getAttribute('data-ref'));

        if(!referencee) {
            ref.classList.add('warning');
            ref.innerHTML = '[<i>not found</i>]';
            return;
        }

        refkey = referencee.author.split(' ').reduce(function(a, e) {return a + (e[0] || '')}, '');
        refkey += '-';
        refkey += referencee.title.split(' ').reduce(function(a, e) {return a + (e[0] || '')}, '');
        refkey += '-';
        refkey += referencee.year;

        tmpContent = '[<i>' + refkey + '</i>]';

        ref.onclick = function() {self.showEditExternalRefDialog(this)};

        if(referencee.author.trim() === '' ||
           referencee.title.trim() === '') {
            ref.classList.add('warning');
        }

        if(ref.innerHTML !== tmpContent) {
            ref.innerHTML = tmpContent;
        }
    },

    // According to updateExternalRefElement but for internal refs, like tables,
    // figures, sections
    updateInternalRefElement: function(ref) {
        var referencee = document.getElementById(ref.getAttribute('data-ref')),
            tmpContent, indexPrefix = '', allSelector;

        if(referencee) {
            allSelector = referencee.tagName;

            if(referencee.tagName === 'FIGURE' || referencee.tagName === 'MERMAID') {
                allSelector = 'FIGURE, MERMAID';
            }

            if(referencee.tagName == 'PRE') {
                allSelector = 'pre.code';
            }

            referenceeIndex = this.editor.contentElement.querySelectorAll(allSelector).indexOf(referencee);

            if(referencee.tagName === 'FIGURE') {
                indexPrefix = 'fig-' + (referenceeIndex+1);
            } else if(referencee.tagName === 'TABLE') {
                indexPrefix = 'table-' + (referenceeIndex+1);
            } else if(referencee.tagName === 'PRE') {
                indexPrefix = 'listing-' + (referenceeIndex+1);
            } else if(referencee.classList.contains('formula')) {
                indexPrefix = 'eq-' + (referenceeIndex+1);
            } else if(referencee.classList.contains('mermaid')) {
                indexPrefix = 'fig-' + (referenceeIndex+1);
            }
            else if(referencee.tagName === 'H2' || referencee.tagName === 'H3' || referencee.tagName === 'H4' || referencee.tagName === 'H5') {
                indexPrefix = 'section: ' + referencee.innerHTML;
            }

            tmpContent = '[<i><a href="#' + referencee.id + '">' + indexPrefix + '</a></i>]';

            if(ref.innerHTML !== tmpContent) {
                ref.innerHTML = tmpContent;
            }

            ref.classList.remove('warning');
        } else {
            ref.innerHTML = '[ref not found]';
            ref.classList.add('warning');
        }
    },

    getRefCaptionHTML: function(referenceEl) {
        var refId = referenceEl.getAttribute('data-ref');
        if(referenceEl.getAttribute('data-external') === 'true') {
            return this.getExternalRefCaptionHTML(refId);
        } else {
            return this.getInternalRefCaptionHTML(document.getElementById(refId));
        }
    },

    getValuesForCrossReferenceSelectBox: function() {
        var result = [],
            internals = this.editor.contentElement.querySelectorAll('figure, table, h2, h3, h4, h5, pre.code, .formula, .mermaid');

        internals = internals.filter(function(int) {
            if(int.tagName === 'FIGURE' && !int.querySelector('figcaption')) {
                return false;
            }

            if(int.tagName === 'TABLE' && !int.querySelector('caption')) {
                return false;
            }

            if(int.tagName === 'PRE' && !int.querySelector('caption')) {
                return false;
            }

            if(int.classList.contains('formula') && !int.querySelector('caption')) {
                return false;
            }

            if(int.classList.contains('mermaid') && !int.querySelector('caption')) {
                return false;
            }

            return true;
        });

        for(var i=0; i<internals.length; i++) {
            result.push([internals[i].id, this.getInternalRefCaptionHTML(internals[i])]);
        }

        return result;
    },

    getValuesForExistingReferenceSelectBox: async function() {
        var result = [],
            allRefs = await this.store.allAsync(true),
            externals = Object.keys(allRefs);

        for(var j=0; j<externals.length; j++) {
            result.push([externals[j], this.getExternalRefCaptionHTML(externals[j], allRefs)]);
        }

        return result;
    },

    areExistingReferencesAvailable: function() {
        var allRefs = this.getAllExternalRefs();

        return allRefs && Object.keys(allRefs).length;
    },

    // returns the caption to display in the reference select box.
    getInternalRefCaptionHTML: function(refereeEl) {
        if(!refereeEl) {
            return '[ref not found]';
        }

        var tmpCaption,
            allSelector = refereeEl.tagName;

        if(refereeEl.tagName === 'FIGURE' || refereeEl.tagName ===  'MERMAID') {
            allSelector = 'FIGURE, MERMAID';
        }

        if(refereeEl.tagName === 'PRE') {
            allSelector = 'pre.code';
        }

        referenceeIndex = this.editor.contentElement.querySelectorAll(allSelector).indexOf(refereeEl);

        if(refereeEl.tagName === 'FIGURE') {
            tmpCaption = refereeEl.querySelector('figcaption').innerHTML;
            return '<b>Image</b> ' + (referenceeIndex+1) + ': ' + tmpCaption;
        } else if(refereeEl.tagName === 'TABLE') {
            tmpCaption = refereeEl.querySelector('caption').innerHTML;
            return '<b>Table</b> ' + (referenceeIndex+1) + ': ' + tmpCaption;
        } else if(refereeEl.tagName === 'H2' || refereeEl.tagName === 'H3' || refereeEl.tagName === 'H4' || refereeEl.tagName === 'H5') {
            return '<b>Section</b>: ' + refereeEl.innerHTML;
        } else if(refereeEl.tagName === 'PRE') {
            tmpCaption = refereeEl.querySelector('caption').innerHTML;
            return '<b>Listing</b> ' + (referenceeIndex+1) + ': ' + tmpCaption;
        } else if(refereeEl.classList.contains('formula')) {
            tmpCaption = refereeEl.querySelector('caption').innerHTML;
            return '<b>Equation</b> ' + (referenceeIndex+1) + ': ' + tmpCaption;
        } else if(refereeEl.classList.contains('mermaid')) {
            tmpCaption = refereeEl.querySelector('caption').innerHTML;
            return '<b>Image</b> ' + (referenceeIndex+1) + ': ' + tmpCaption;
        }
    },

    // returns the caption to display in the reference select box.
    getExternalRefCaptionHTML: function(refereeId, allRefs) {
        var ref = (allRefs || this.getAllExternalRefs())[refereeId];
        if(!ref) { return '' }
        return [ref.author, ref.title, (ref.publisher || ref.journal), ref.year].filter(function (f) { return f !== '' && f }).join(' - ');
    },

    insertInternalReference: function(formData) {
        var node = document.createElement('span');
        node.classList.add('reference');
        node.setAttribute('data-ref', formData.ref);

        if(this.getExternalRefData(formData.ref)) {
            node.setAttribute('data-external', 'true');
        }

        node.setAttribute('contenteditable', false);
        this.editor.caret.insertNode(node);
    },

    insertExternalReference: function(formData) {
        var node = document.createElement('span'),
            refId = uuid(),
            self = this;

        node.classList.add('reference');
        node.setAttribute('contenteditable', false);
        node.setAttribute('data-external', 'true');
        node.setAttribute('data-ref', refId);
        node.onclick = function() {self.showEditExternalRefDialog(this)};
        this.storeExternalRefData(refId, formData);
        this.editor.caret.insertNode(node);
    },

    showEditExternalRefDialog: function(refNode) {
        var refId = refNode.getAttribute('data-ref'),
            ref = this.getExternalRefData(refId),
            self = this;

        if(!ref) { return }

        self.editor.unfocusSection();

        self.editor.displayModal(self.getExternalRefDialogAttributes(ref, refId), function(formData) {
            var section = self.editor.sectionByChildNode(refNode);
            if(section) {
                section.forceUpdateOnInputProcesssingEnablement = true;
            }

            self.storeExternalRefData(refId, formData);
            self.editor.unfreezeSelection();
            self.editor.textEnrichmentControl.hide();

            self.editor.reference.updateRefElement(refNode);
            self.editor.unfocusSection();
            self.editor.caret.clearSelection();
            window.setTimeout(function() {
                self.editor.sectionTypeSelector.hide();
            }, 50)
        });
    },

    getExternalRefDialogAttributes: function(dataRecord, refId) {
        dataRecord = dataRecord || {};

        var self = this;

        var referenceTypes = {
            'Article': {
                required: ['author', 'title', 'journal', 'year'],
                optional: ['volume', 'number', 'pages', 'month', 'subtitle']
            },
            'Book': {
                required: ['author', 'title', 'publisher', 'year'],
                optional: ['editor', 'volume', 'number', 'series', 'edition', 'month', 'subtitle']
            },
            'Conference/Inproceedings': {
                required: ['author', 'title', 'booktitle', 'year'],
                optional: ['editor', 'volume', 'number', 'series', 'pages', 'month', 'organization']
            },
            'Inbook': {
                required: ['title', 'publisher', 'year'],
                optional: ['author', 'editor', 'chapter', 'pages', 'subtitle']
            },
            'Manual': {
                required: ['title'],
                optional: ['author', 'organization', 'edition', 'month', 'year', 'subtitle']
            },
            'Mastersthesis': {
                required: ['author', 'title', 'school', 'year'],
                optional: ['month', 'subtitle']
            },
            'Phdthesis': {
                required: ['author', 'title', 'school', 'year'],
                optional: ['month', 'subtitle']
            },
            'Proceedings': {
                required: ['title', 'year'],
                optional: ['editor', 'volume', 'number', 'series', 'month', 'organization', 'subtitle']
            },
            'Techreport': {
                required: ['author', 'title', 'institution', 'year'],
                optional: ['type', 'number', 'month', 'subtitle']
            },
            'Website': {
                required: ['url'],
                optional: ['author', 'date', 'month', 'year', 'title']
            }
        }

        var allowedTypeValues = Object.keys(referenceTypes)
            .map(rt => [
                rt,
                rt,
                'Type: ' + rt
            ])

        var handleUrlFieldChange = async function (formData, dFrom, triggerElement, allExistingRefs, url) {

            var url = url || formData.url;
            var fields = ['url', 'author', 'title', 'year', 'month']

            if(lookupURL.isValidID(url)) {
                fields.forEach(field => dFrom.setTooltip(field, 'Wait for it ...', '', 'tooltip-loading'))

                try {
                    var urlMeta = await lookupURL.fetchJSON(url);

                    Object.keys(urlMeta).forEach(key => {
                        let field = dFrom.fields.find(f => f.name == key);
                        if(field && field.domElement && field.domElement.setValue && formData[field.name] !== urlMeta[key]) {
                            field.domElement.setValue(urlMeta[key]);
                        }
                    })
                } finally {
                    fields.forEach(field => dFrom.resetTooltip(field));
                    dFrom.resetTooltip('lookupId');
                }
            }
        }

        var handleLookupIdFieldChange = function(formData, dFrom, triggerElement, allExistingRefs) {
            dFrom.setTooltip('lookupId', 'Wait for it ...', '', 'tooltip-loading')

            const similarRef = allExistingRefs.find(ref => (ref.lookupId && ref.lookupId.trim().toLowerCase() === formData.lookupId.trim().toLowerCase()))

            if(formData.lookupId
                && similarRef
                && (!refId || refId !== similarRef.id)) {
                dFrom.setTooltipError('lookupId', 'You already referenced this document before. You can find it in the "Find Reference" tab of this dialog.');
                return;
            }

            var errorText = 'Something went wrong. Maybe the provided DOI / ISBN / Website URL / arXiv ID does not exists?';

            lookupRefs.fetchJSON(formData.lookupId)
                .catch(err => {
                    console.log('error when fetching ref data', err)
                    if(err instanceof lookupRefs.errors.InvalidID) {
                        dFrom.setTooltipWarning('lookupId', 'It needs to be a valid DOI or ISBN');
                    } else if(err instanceof lookupRefs.errors.EmptyID) {
                        dFrom.resetTooltip('lookupId');
                    } else if(err instanceof lookupRefs.errors.NotFound) {
                        dFrom.setTooltipError('lookupId', 'No data found for the given DOI / ISBN');
                    } else {
                        dFrom.setTooltipError('lookupId', errorText);
                    }
                })
                .then(data => {
                    if(data) {
                        dFrom.setTooltip('lookupId', 'MonsterWriter filled out all the information it could find. You can still complete or change the data below.', '&#10003;', 'tooltip-success');

                        Object.keys(data)
                            .map(fieldName => dFrom.fields.find(f => f.name == fieldName))
                            .filter(field => field && field.domElement && field.domElement.setValue)
                            .forEach(field => {
                                if(formData[field.name] !== data[field.name]) {
                                    field.domElement.setValue(data[field.name]);
                                }
                            })
                    }
                }).catch(ex => {
                    dFrom.setTooltipError('lookupId', errorText);
                })
        }

        var handleTitleFieldChange = function (formData, dFrom, triggerElement, allExistingRefs) {
            const similarRef = allExistingRefs.find(ref => (ref.title && ref.title.trim().toLowerCase() === formData.title.trim().toLowerCase()))

            if(formData.title
                && similarRef
                && (!refId || refId !== similarRef.id)) {
                dFrom.setTooltipWarning('title', 'You already referenced a document with the same title. Consider to choose it in the "Find Reference" tab of this dialog.');
                return;
            } else {
                dFrom.resetTooltip('title');
            }
        }

        var onFormChange = throttle(100, function (formData, dFrom, triggerElement) {
            if(!triggerElement) {
                return;
            }

            var allExistingRefs = Object.values(self.getAllExternalRefs());

            if(triggerElement.name === 'lookupId') {
                handleLookupIdFieldChange(formData, dFrom, triggerElement, allExistingRefs);
            } else if(triggerElement.name === 'title') {
                handleTitleFieldChange(formData, dFrom, triggerElement, allExistingRefs);
            } else if(triggerElement.name === 'url') {
                handleUrlFieldChange(formData, dFrom, triggerElement, allExistingRefs);
            }
        });

        return [
            {name: 'lookupId', displayName: 'Automatically Fetch and Fill Out Information By:', tooltip: { text: 'Insert a valid DOI, ISBN, arXiv ID or the URL of a website you want to cite. MonsterWriter will try to find all the information on the internet for you.', inInput: true }, autocomplete: 'off', placeholder: 'ISBN / DOI / arXiv ID / Website URL', onFormChange: onFormChange },
            {name: 'type', displayName: 'Manually Specify Information:', defaultValue: 'Article', allowedValues: allowedTypeValues },
            {name: 'url', placeholder: 'Website URL', tooltip: 'The address of the website.'},
            {name: 'date', placeholder: 'Lookup Date', tooltip: 'The date when you accessed the website. This is usally todays date.', defaultValue: () => (new Date()).getFullYear() + '-' + ((new Date()).getMonth() + 1).toString().padStart(2, '0') + '-' + ((new Date()).getDate()).toString().padStart(2, '0') },
            {name: 'author', placeholder: 'Author(s)', tooltip: 'All authors separated by the word "and". Comma is used to distinguish first and last name. e.g "Wolf, Oliver and Barnett, Phillip".'},
            {name: 'title', placeholder: 'Title', tooltip: 'The title of the reference.'},
            {name: 'subtitle', placeholder: 'Subtitle', tooltip: 'The sub title of the reference.'},
            {name: 'booktitle', placeholder: 'Book Title', tooltip: 'The title of the book.'},
            {name: 'organization', placeholder: 'Organization', tooltip: 'The organization that organizes the conference or publishes the work.'},
            {name: 'journal', placeholder: 'Journal', tooltip: 'The journal that published the article.'},
            {name: 'publisher', placeholder: 'Publisher', tooltip: 'The publisher of the work.'},
            {name: 'school', placeholder: 'School', tooltip: 'The institution in which the author is enrolled.'},
            {name: 'institution', placeholder: 'Institution', tooltip: 'The institution that sponsors the research work.'},
            {name: 'editor', placeholder: 'Editor(s)', tooltip: 'All editors separated by the word "and". Comma is used to distinguish first and last name. e.g "Wolf, Oliver and Barnett, Phillip'},
            {name: 'series', placeholder: 'Series', tooltip: 'The series name of the book/work'},
            {name: 'year', placeholder: 'Year', tooltip: 'The year of the publication consisting of four digits (e.g. "2020").'},
            {name: 'month', placeholder: 'Month', tooltip: 'The month of the publication. Use the three letter abbreviation: Jan. Feb. Mar. Apr. May. Jun. Jul. Aug. Sep. Oct. Nov. Dec.'},
            {name: 'edition', placeholder: 'Edition', tooltip: 'The edition of the publication (e.g. "Second"). The first letter should be capitalized.'},
            {name: 'volume', placeholder: 'Volume', tooltip: 'The volume of the publication.'},
            {name: 'number', placeholder: 'Number', tooltip: 'The work\'s number within a series.'},
            {name: 'chapter', placeholder: 'Chapter', tooltip: 'A chapter if you reference to a particular part of the work.'},
            {name: 'pages', placeholder: 'Pages', tooltip: 'The page number(s) if you reference to a particular part of the work (e.g. "23-50" or "417,423,590-601" or 50+).'},
        ].map(field =>
            Object.assign(field, {
                defaultValue: (dataRecord[field.name] || field.defaultValue || ''),
                isActive: function(formData) {
                    if(field.name === 'type' || field.name === 'lookupId') {
                        return true;
                    }

                    if(!referenceTypes[formData.type]) {
                        return false;
                    }

                    if(referenceTypes[formData.type].required.includes(field.name)) {
                        return true;
                    }

                    if(referenceTypes[formData.type].optional.includes(field.name)) {
                        return true
                    }
                }
            })
        )
    },
}

module.exports = Reference;


/***/ }),

/***/ "../structured-text-editor/src/references/reference_sources/index.js":
/*!***************************************************************************!*\
  !*** ../structured-text-editor/src/references/reference_sources/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const referenceSourcesConfig = [
    { id, displayName, isValidRecord, renderEntry, fields, sync } = __webpack_require__(/*! ./zotero_online */ "../structured-text-editor/src/references/reference_sources/zotero_online.js"),
    { id, displayName, isValidRecord, renderEntry, fields, sync } = __webpack_require__(/*! ./zotero_desktop */ "../structured-text-editor/src/references/reference_sources/zotero_desktop.js")
]

async function saveReferenceSources(formData, ReferenceStore) {
    await ReferenceStore.deleteAllSources()
    await Promise.all(formData['reference-sources'].map(async rs => {
        await ReferenceStore.addSource(rs)
    }))

    await ReferenceStore.cleanupReferencesFromSources()
}

const syncAllSources = async function(ReferenceStore) {
    const referenceSources = await ReferenceStore.getAllSources()

    referenceSources.forEach(rcFormData => {
        const rsc = referenceSourcesConfig.find(rs => rs.id === rcFormData.type)

        if(rsc && rsc.sync) {
            rsc.sync(rcFormData, ReferenceStore)
        } else {
            console.log('No reference source implementation for ' + rcFormData.type + ' found')
        }
    })
}

const getReferenceSourcesFields = async function(ReferenceStore) {
    const referenceSources = await ReferenceStore.getAllSources()

    return [
        {
            tab: 'Reference Sources',
            isActive: formData => !formData['reference-sources'] || !formData['reference-sources'].length,
            render: (el, formData) => {
                el.classList.add('integration-info');
                el.innerHTML = 'No integration(s) configured. Click the "Configure New Integration" button below to do so.'
            }
        },
        {
            name: 'reference-sources',
            newButtonLabel: 'Configure New Reference Source',
            tab: 'Reference Sources',
            isValidRecord: (formData, dForm) => {
                const rsc = referenceSourcesConfig.find(rs => rs.id === formData.type)
                return rsc && rsc.isValidRecord(formData, dForm, ReferenceStore)
            },
            renderEntry: (formData, dForm) => {
                const rsc = referenceSourcesConfig.find(rs => rs.id === formData.type)
                return rsc && rsc.renderEntry(formData, dForm)
            },
            defaultValue: referenceSources,
            onChange: formData => saveReferenceSources(formData, ReferenceStore),
            arrayOf: [
                {
                    name: 'type',
                    displayName: 'Source:',
                    allowedValues: referenceSourcesConfig.map(i => [i.id, i.displayName]),
                },
                ...referenceSourcesConfig.flatMap(i => i.fields)
            ]
        }
    ]
}

module.exports = {
    getReferenceSourcesFields,
    syncAllSources
}

/***/ }),

/***/ "../structured-text-editor/src/references/reference_sources/zotero_desktop.js":
/*!************************************************************************************!*\
  !*** ../structured-text-editor/src/references/reference_sources/zotero_desktop.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const throttle = __webpack_require__(/*! ../../../lib/throttle/throttle */ "../structured-text-editor/lib/throttle/throttle.js")

const transformResponseItem = function(item, libraryID, CollectionID) {
    const typeMap = {
        'article-journal': 'Article',
        'article': 'Article',
        'article-magazine': 'Article',
        'article-newspaper': 'Article',
        'bill': 'Article',
        'book': 'Book',
        'broadcast': 'Article',
        'chapter': 'Inbook',
        'classic': 'Article',
        'collection': 'Article',
        'dataset': 'Article',
        'document': 'Article',
        'entry': 'Article',
        'entry-dictionary': 'Article',
        'entry-encyclopedia': 'Website',
        'event': 'Article',
        'figure': 'Article',
        'graphic': 'Article',
        'hearing': 'Article',
        'interview': 'Article',
        'legal_case': 'Article',
        'legislation': 'Article',
        'manuscript': 'Article',
        'map': 'Article',
        'motion_picture': 'Article',
        'musical_score': 'Article',
        'pamphlet': 'Article',
        'paper-conference': 'Conference/Inproceedings',
        'patent': 'Article',
        'performance': 'Article',
        'periodical': 'Article',
        'personal_communication': 'Article',
        'post': 'Website',
        'post-weblog': 'Website',
        'regulation': 'Article',
        'report': 'Article',
        'review': 'Article',
        'review-book': 'Article',
        'software': 'Article',
        'song': 'Article',
        'speech': 'Article',
        'standard': 'Article',
        'thesis': 'Mastersthesis',
        'treaty': 'Article',
        'webpage': 'Website'
    }

    const convertNameValue = nameEntry => {
        return [nameEntry.family, nameEntry.given]
            .filter(f => f && f.trim)
            .map(f => f.trim())
            .filter(f => f !== '')
            .join(', ')
    }

    const tryToParseDate = dateParts => {
        if(dateParts && dateParts['date-parts'] && dateParts['date-parts'][0]) {
            return dateParts['date-parts'][0].join('-')
        }
    }

    const tryToParseYear = dateParts => {
        if(dateParts && dateParts['date-parts'] && dateParts['date-parts'][0] && dateParts['date-parts'][0][0]) {
            return dateParts['date-parts'][0][0].toString()
        }
    }

    const tryToParseMonth = dateParts => {
        if(dateParts && dateParts['date-parts'] && dateParts['date-parts'][0] && dateParts['date-parts'][0][1]) {
            return dateParts['date-parts'][0][1].toString()
        }
    }

    return {
        lookupId: item.ISBN || item.DOI,
        id: item.id,
        type: typeMap[item.type] || 'Article',
        referenceSource: `zotero-desktop-${libraryID}-${CollectionID}`,
        title: item.title,
        author: item.author && item.author.map(convertNameValue).join(' and '),
        pages: item['number-of-pages'],
        volume: item.valume,
        url: item.URL,
        publisher: item.publisher,
        edition: item.edition,
        date: tryToParseDate(item.accessed),
        year: tryToParseYear(item.issued),
        month: tryToParseMonth(item.issued),
        editor: item.editor && item.editor.map(convertNameValue).join(' and '),
    }
}

const renderEntry = function(entry) {
    if(entry.type === 'zotero-desktop') {
        return `Zotero Destkop`
    }
}

const isValidRecord = throttle(100, async function(formData, dFrom, ReferenceStore) {
    window.store = ReferenceStore
    if(formData.type === 'zotero-desktop' && formData['zotero-desktop-libraryID']) {
        var itemResponse;
        try {
            dFrom.setTooltip('zotero-desktop-libraryID', 'Wait for it ...', '', 'tooltip-loading')
            dFrom.setTooltip('zotero-desktop-collectionID', 'Wait for it ...', '', 'tooltip-loading')

            if(formData['zotero-desktop-collectionID'] === 'no-collection') {
                itemResponse = await fetch(`http://127.0.0.1:23119/better-bibtex/export/library?/${formData['zotero-desktop-libraryID']}/library.csljson`)
            } else {
                itemResponse = await fetch(`http://127.0.0.1:23119/better-bibtex/collection?/${formData['zotero-desktop-libraryID']}/${formData['zotero-desktop-collectionID']}.csljson`)
            }

            const items = await itemResponse.json();

            items.forEach(item => {
                ReferenceStore.set(`zotero-desktop-item-${formData['zotero-desktop-libraryID']}-${formData['zotero-desktop-collectionID']}-${item.id}`, transformResponseItem(item, formData['zotero-desktop-libraryID'], formData['zotero-desktop-collectionID']))
            })

            dFrom.resetTooltips(['zotero-desktop-libraryID', 'zotero-desktop-collectionID'])

            const hintField = formData['zotero-desktop-collectionID'] === 'no-collection' ? 'zotero-desktop-libraryID' : 'zotero-desktop-collectionID'
            const hintFieldType = formData['zotero-desktop-collectionID'] === 'no-collection' ? 'library' : 'collection'

            if(!items.length) {
                dFrom.setTooltipWarning(hintField, `No items found in this ${hintFieldType}!`)
            } else {
                dFrom.setTooltipSuccess(hintField, `${items.length} items found.`)
            }

            return true;
        } catch(ex) {
            dFrom.setTooltipError('zotero-desktop-libraryID', `Something went wrong fetching items from Zotero.`)
            dFrom.setTooltipError('zotero-desktop-collectionID', `Something went wrong fetching items from Zotero.`)
            return false
        }
    }
})

const sync = async function(formData, ReferenceStore) {
    if(formData.type === 'zotero-desktop' && formData['zotero-desktop-libraryID']) {
        var itemResponse;
        try {
            if(formData['zotero-desktop-collectionID'] === 'no-collection') {
                itemResponse = await fetch(`http://127.0.0.1:23119/better-bibtex/export/library?/${formData['zotero-desktop-libraryID']}/library.csljson`)
            } else {
                itemResponse = await fetch(`http://127.0.0.1:23119/better-bibtex/collection?/${formData['zotero-desktop-libraryID']}/${formData['zotero-desktop-collectionID']}.csljson`)
            }

            const items = await itemResponse.json();

            items.forEach(item => {
                ReferenceStore.set(`zotero-desktop-item-${formData['zotero-desktop-libraryID']}-${formData['zotero-desktop-collectionID']}-${item.id}`, transformResponseItem(item, formData['zotero-desktop-libraryID'], formData['zotero-desktop-collectionID']))
            })

            return true;
        } catch(ex) {
            return false
        }
    }
}

const fetchLibraries = throttle(100, async function() {
    var response;

    try {
        response = await fetch(`http://localhost:23119/better-bibtex/json-rpc`, {
            method: 'POST',
            body: JSON.stringify({ jsonrpc: "2.0", method: "user.groups", params: [true] }),
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
        })
    } catch(ex) {
        throw { message: 'Make sure you have startet the Zotero desktop app' }
    }

    if(response.status === 404) {
        throw { message: 'Make sure you have the "Better BibTeX for Zotero" add-on installed in Zotero. You can download it here: https://retorque.re/zotero-better-bibtex/installation/' }
    } else if(response.status === 500) {
        throw { message: 'Make sure you have at least version <b>6.7.1</b> of "Better BibTeX for Zotero" installed. You can download it here: https://retorque.re/zotero-better-bibtex/installation/' }
    }

    if(response.status !== 200) {
        throw { message: 'Something went wrong fetching items from Zotero' }
    }

    var jsonResponse = (await response.json())

    if(!jsonResponse.result) {
        throw { message: 'Something went wrong fetching items from Zotero. Please send the following error test to info@monsterwriter.app: ' + JSON.stringify(jsonResponse.error) }
    }

    if(jsonResponse.result.length === 0) {
        throw { message: 'No libraries available!' }
    }

    return jsonResponse.result
})

const onValuesCalculationFailedMessage = function(fromData, err) {
    return {
        level: err.level || 'error',
        text: err.message || 'Something went wrong fetching items from Zotero.'
    }
}

const fields = [
    {
        name: 'zotero-desktop-libraryID',
        displayName: 'Library',
        tooltip: 'Choose a library from your local Zotero installation',
        isActive: formData => formData['type'] === 'zotero-desktop',
        onValuesCalculationFailedMessage,
        allowedValues: async () => (await fetchLibraries()).map(lib => [lib.id, lib.name]),
    },
    {
        name: 'zotero-desktop-collectionID',
        displayName: 'Collection',
        reloadOnChangeOf: ['zotero-desktop-libraryID'],
        tooltip: 'Choose a collection from your local Zotero installation',
        isActive: formData => formData['type'] === 'zotero-desktop',
        defaultValue: 'no-collection',
        onValuesCalculationFailedMessage,
        allowedValues: async formData => {
            if(!formData['zotero-desktop-libraryID']) {
                throw { message: 'Choose a library first!' }
            }

            var libraries = await fetchLibraries()
            var library = libraries.find(lib => lib.id.toString() === formData['zotero-desktop-libraryID'])

            if(!library.collections || !library.collections.length) {
                throw { message: 'No collections available in the choosen library!' }
            }

            return [
                ['no-collection', 'Entire Library'],
                ...library.collections.map(col => [ col.key, col.name ])
            ]
        },
    }
]

module.exports = {
    id: 'zotero-desktop',
    displayName: 'Zotero (Desktop via Better BibTeX Add-On)',
    isValidRecord,
    renderEntry,
    fields,
    sync
}

/***/ }),

/***/ "../structured-text-editor/src/references/reference_sources/zotero_online.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/src/references/reference_sources/zotero_online.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const throttle = __webpack_require__(/*! ./../../../lib/throttle/throttle */ "../structured-text-editor/lib/throttle/throttle.js")
const { ZoteroOnline } = __webpack_require__(/*! ./../../../lib/zotero-client */ "../structured-text-editor/lib/zotero-client/index.js")
var latestLoadedGroups = [], clientsWithoutStore = {}

const isValidRecord = throttle(100, async function(formData, dFrom, ReferenceStore) {
    if(formData.type === 'zotero-online') {
        const isGroup = formData['zotero-online-userOrGroup'] === 'group'

        if(formData['zotero-online-apiKey'].trim() === '') {
            dFrom.setTooltipWarning('zotero-online-apiKey', 'An Zotero API key is needed. You can create an API key here: https://www.zotero.org/settings/keys')
            return false
        }

        if(isGroup && formData['zotero-online-groupID'] === '') {
            dFrom.setTooltipWarning('zotero-online-groupID', 'Choose a group from which you want to retrieve references from. If you do not want to retrieve references from a Zotero group choose "User" in "User or Group Scoped Integration"')
            return false
        }

        try {
            dFrom.setTooltip('zotero-online-apiKey', 'Wait for it ...', '', 'tooltip-loading')

            const zoteroOnlineClient = new ZoteroOnline(formData['zotero-online-apiKey'], ReferenceStore)
            await zoteroOnlineClient.loadUserInfo()

            const itemCount = (isGroup ?
                await zoteroOnlineClient.itemsByGroupID(formData['zotero-online-groupID']) :
                await zoteroOnlineClient.items()).length

            dFrom.resetTooltips(['zotero-online-groupID', 'zotero-online-apiKey'])

            if(itemCount) {
                dFrom.setTooltipSuccess('zotero-online-apiKey', `${itemCount} items have been fetched from Zotero`)
            } else {
                dFrom.setTooltipWarning('zotero-online-apiKey', 'It seems like this user or group does not has any items saved')
            }

            return true
        } catch(err) {
            console.log(err)
            const errorText = `There was an error connecting to Zotero. Make sure ${isGroup ? 'Group' : 'User'} ID and API Key are correct!`
            dFrom.setTooltipError('zotero-online-apiKey', errorText)
            return false
        }
    }
})

const sync = async function(formData, ReferenceStore) {
    if(formData.type === 'zotero-online') {
        const isGroup = formData['zotero-online-userOrGroup'] === 'group'

        if(formData['zotero-online-apiKey'].trim() === '') {
            return false
        }

        if(isGroup && formData['zotero-online-groupID'] === '') {
            return false
        }

        try {
            const zoteroOnlineClient = new ZoteroOnline(formData['zotero-online-apiKey'], ReferenceStore)
            await zoteroOnlineClient.loadUserInfo()

            if(isGroup) {
                await zoteroOnlineClient.itemsByGroupID(formData['zotero-online-groupID'])
            } else {
                await zoteroOnlineClient.items()
            }

            return true
        } catch(err) {
            console.log(err)
            return false
        }
    }
}

const getClientWithoutStore = async function(apiKey) {
    if(!clientsWithoutStore[apiKey]) {
        clientsWithoutStore[apiKey] = []
        clientsWithoutStore[apiKey][0] = new ZoteroOnline(apiKey)
        clientsWithoutStore[apiKey][1] = clientsWithoutStore[apiKey][0].loadUserInfo()
    }

    await clientsWithoutStore[apiKey][1]

    return clientsWithoutStore[apiKey][0]
}

const renderEntry = function(entry) {
    if(entry.type === 'zotero-online') {
        const isGroup = entry['zotero-online-userOrGroup'] === 'group'
        const userOrGroup = entry['zotero-online-userOrGroup'].charAt(0).toUpperCase() + entry['zotero-online-userOrGroup'].slice(1)
        var displayName = ''

        if(!isGroup) {
            displayName = entry['zotero-online-userName']
        } else if(isGroup) {
            displayName = entry['zotero-online-groupName']
        }

        return `Zotero.org (Online) - ${userOrGroup}: ${displayName}`
    }
}

const fields = [
    {
        name: 'zotero-online-userOrGroup',
        displayName: 'Zotero Library Type:',
        isActive: formData => formData['type'] === 'zotero-online',
        allowedValues: [['user', 'User'], ['group', 'Group']],
        defaultValue: 'user',
    },
    {
        name: 'zotero-online-apiKey',
        isActive: formData => formData['type'] === 'zotero-online',
        displayName: 'API Key:',
        inputType: 'password',
        tooltip: 'You can create an API key here: https://www.zotero.org/settings/keys',
    },
    {
        name: 'zotero-online-userID',
        reloadOnChangeOf: ['zotero-online-apiKey'],
        calculate: async formData => {
            if(!formData || !formData['zotero-online-apiKey'] || formData['zotero-online-apiKey'] === '') {
                return;
            }

            const client = await getClientWithoutStore(formData['zotero-online-apiKey'])
            return client.userID
        }
    },
    {
        name: 'zotero-online-userName',
        reloadOnChangeOf: ['zotero-online-apiKey'],
        calculate: async formData => {
            if(!formData || !formData['zotero-online-apiKey'] || formData['zotero-online-apiKey'] === '') {
                return;
            }

            const client = await getClientWithoutStore(formData['zotero-online-apiKey'])
            return client.userName
        }
    },
    {
        name: 'zotero-online-groupName',
        reloadOnChangeOf: ['zotero-online-apiKey', 'zotero-online-userOrGroup', 'zotero-online-groupID'],
        calculate: formData => {
            if(!latestLoadedGroups
                || !latestLoadedGroups.find
                || !formData
                || !formData['zotero-online-groupID']
                || formData['zotero-online-userOrGroup'] === 'user') {
                return;
            }

            const group = latestLoadedGroups.find(gr => gr.id.toString() === formData['zotero-online-groupID'].toString())

            if(group) {
                return group.name
            }
        }
    },
    {
        name: 'zotero-online-groupID',
        displayName: 'Group',
        tooltip: 'If you want to cite references which are managed in a Zotero group, select the group here. If not, select "User" in "User or Group Scoped Integration"',
        isActive: formData => formData['type'] === 'zotero-online' && formData['zotero-online-userOrGroup'] === 'group',
        reloadOnChangeOf: ['zotero-online-apiKey', 'zotero-online-userOrGroup'],
        allowedValues: async formData => {
            if(!formData
                || !formData['zotero-online-apiKey']
                || formData['zotero-online-apiKey'].trim() === ''
                || formData['zotero-online-userOrGroup'] !== 'group') {
                return []
            }

            const client = await getClientWithoutStore(formData['zotero-online-apiKey'])
            latestLoadedGroups = await client.groups()

            return latestLoadedGroups.map(r => [r.id, r.name])
        },
    }
]

module.exports = {
    id: 'zotero-online',
    displayName: 'Zotero.org (Cloud Version)',
    isValidRecord,
    renderEntry,
    fields,
    sync
}

/***/ }),

/***/ "../structured-text-editor/src/references/reference_store.js":
/*!*******************************************************************!*\
  !*** ../structured-text-editor/src/references/reference_store.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const throttle = __webpack_require__(/*! ../../lib/throttle/throttle */ "../structured-text-editor/lib/throttle/throttle.js");
const escapeID = id => id.replace(/[^a-zA-Z0-9\-]/g, "x");

class SimplePersitencyDriver {
    constructor() {
        this.data = {}
    }

    async set(id, attr) {
        this.data[id] = { id, ...attr }
        return this.data[id]
    }

    async all() {
        return Object.values(this.data)
    }

    async get(id) {
        return this.data[id]
    }

    async deleteAll() {
        this.data = {}
    }
}

class ReferenceStore {

    static citedInCurrentDocument() {
        if(document && document.querySelectorAll) {
            return document
                .querySelectorAll('.reference[data-external="true"]')
                .map(el => el.dataset.ref)
        }

        return []
    }

    static isCitedInCurrentDocument(id) {
        return ReferenceStore.citedInCurrentDocument().includes(id)
    }

    //FIXME: make this calculated attribute of formData
    static getSourceID(formData) {
        if(formData['type'] === 'zotero-online') {
            if(formData['zotero-online-userOrGroup'] === 'user') {
                return `zotero-online-user-${formData['zotero-online-userID']}`
            } else if(formData['zotero-online-userOrGroup'] === 'group') {
                return `zotero-online-group-${formData['zotero-online-groupID']}`
            }
        } else if(formData['type'] === 'zotero-desktop') {
            return `zotero-desktop-${formData['zotero-desktop-libraryID']}-${formData['zotero-desktop-collectionID']}`
        }
    }

    constructor(contentId, PersitencyDriver = SimplePersitencyDriver) {
        this.contentId = contentId
        this.data = {}
        this.persistentReferenceStore = new PersitencyDriver('reference')
        this.persistentReferenceSourceStore = new PersitencyDriver('reference_sources')
    }

    initCache = throttle(100, async () => {
        const allRefsFromStore = await this.persistentReferenceStore.all({ updatedSince: this.lastCacheUpdate })
        this.lastCacheUpdate = Date.now()

        allRefsFromStore
            .filter(r => (r.contentId === this.contentId || r.referenceSource !== 'intern'))
            .forEach(r => { this.data[r.id] = r })
    })

    set(id, attr) {
        id = escapeID(id)

        var filteredAttr = {
            ...attr,
            contentId: this.contentId,
            lookupId: (attr.lookupId || '').trim(),
            url: (attr.url || '').trim(),
            date: (attr.date || '').trim(),
            type: (attr.type || '').trim(),
            author: (attr.author || '').trim(),
            title: (attr.title || '').trim(),
            subtitle: (attr.subtitle || '').trim(),
            booktitle: (attr.booktitle || '').trim(),
            organization: (attr.organization || '').trim(),
            journal: (attr.journal || '').trim(),
            publisher: (attr.publisher || '').trim(),
            school: (attr.school || '').trim(),
            institution: (attr.institution || '').trim(),
            editor: (attr.editor || '').trim(),
            series: (attr.series || '').trim(),
            year: (attr.year || '').trim(),
            month: (attr.month || '').trim(),
            edition: (attr.edition || '').trim(),
            volume: (attr.volume || '').trim(),
            number: (attr.number || '').trim(),
            chapter: (attr.chapter || '').trim(),
            pages: (attr.pages || '').trim(),
            _deleted: false,
            id: id
        }

        this.data[id] = filteredAttr

        return this.persistentReferenceStore.set(id, filteredAttr)
    }

    get(id) {
        id = escapeID(id)

        return this.data[id]
    }

    delete(id) {
        id = escapeID(id)

        this.data[id]._deleted = true

        this.persistentReferenceStore.get(id).then(item => {
            this.persistentReferenceStore.set(id, {
                ...item,
                _deleted: true
            })
        })
    }

    all(withID) {
        var result = {}

        Object.keys(this.data).forEach(refId => {
            if(!this.isRefEmpty(refId) && (!this.data[refId]._deleted || ReferenceStore.isCitedInCurrentDocument(refId))) {
                result[refId] = this.data[refId]

                if(withID) {
                    result[refId].id = refId;
                }
            }
        })

        return result;
    }

    addReferenceData(data) {
        Object.entries(data).forEach(refRecord => {
            this.set(refRecord[0], refRecord[1]);
        })
    }

    async allAsync(withID) {
        var result = {}

        Object.keys(this.data).forEach(refId => {
            if(!this.isRefEmpty(refId) && (!this.data[refId]._deleted || ReferenceStore.isCitedInCurrentDocument(refId))) {
                result[refId] = this.data[refId]

                if(withID) {
                    result[refId].id = refId;
                }
            }
        })

        return result;
    }

    isRefEmpty(id) {
        id = escapeID(id)

        var record = this.data[id];

        return record.author === ''
            && record.title === ''
            && record.url === '';
    }

    async deleteAllSources() {
        await this.persistentReferenceSourceStore.deleteAll()
    }

    async addSource(attr) {
        const id = ReferenceStore.getSourceID(attr)

        if(!id) {
            throw "unable to save reference source"
        }

        await this.persistentReferenceSourceStore.set(id, attr)

        const allrefs = (await this.persistentReferenceStore.all())
            .filter(r => r.id && r.id.startsWith(`zotero-online-item-${id.split('-')[3]}`) && r._deleted)

        await Promise.all(allrefs.map(item => this.set(item.id, item)))
    }

    async cleanupReferencesFromSources() {
        const allSourceIds = (await this.getAllSources()).map(src => src.id)
        const allRefs = this.all(true)

        const refsToBeDeleted = Object.values(allRefs)
            .filter(ref => {
                if(!ref.referenceSource || ref.referenceSource === 'intern') {
                    return false
                }

                return !allSourceIds.find(srcId => srcId === ref.referenceSource)
            })

        refsToBeDeleted.forEach(ref => {
            this.delete(ref.id)
        })
    }

    async getAllSources() {
        return await this.persistentReferenceSourceStore.all()
    }
}

module.exports = ReferenceStore;

/***/ }),

/***/ "../structured-text-editor/src/section_type_selector_control.js":
/*!**********************************************************************!*\
  !*** ../structured-text-editor/src/section_type_selector_control.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var utils = __webpack_require__(/*! ../lib/pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js"),
    DeclarativForm = __webpack_require__(/*! ../lib/declarativ_forms/src/declarativ_form */ "../structured-text-editor/lib/declarativ_forms/src/declarativ_form.js");

function SectionTypeSelectorControl(onChangeCallback, onChangeCallbackContext, editor) {
    var self = this;

    this.editor = editor;
    this.sectionTypeSelector = document.createElement('div');
    this.sectionTypeSelector.id = 'sectionTypeSelector';

    this.sectionTypeSelector.innerHTML = '<span class="option-btn delete-option-btn" data-option-for="img"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn delete-option-btn" data-option-for="table"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn delete-option-btn" data-option-for="code"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn delete-option-btn" data-option-for="toc"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn delete-option-btn" data-option-for="bquote"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn delete-option-btn" data-option-for="bibliographie"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn delete-option-btn" data-option-for="footnotes"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn delete-option-btn" data-option-for="formula"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn delete-option-btn" data-option-for="mermaid"><i class="fas fa-trash"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="code"><i class="fas fa-cog"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="table"><i class="fas fa-cog"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="img"><i class="fas fa-cog"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="bquote"><i class="fas fa-cog"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="bibliographie"><i class="fas fa-cog"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="footnotes"><i class="fas fa-cog"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="formula"><i class="fas fa-cog"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="mermaid"><i class="fas fa-cog"></i></span>' +
                                         '<span class="option-btn config-option-btn" data-option-for="h2"><i class="fas fa-cog"></i></span>' +
                                         '<span class="sectionTypeBtn" data-type="h1">title</span>' +
                                         '<span class="sectionTypeBtn" data-type="h2" unannotated-caption="h1" unactive-caption="heading-1">heading-1</span>' +
                                         '<span class="sectionTypeBtn" data-type="h3" unannotated-caption="h2" unactive-caption="heading-2">heading-2</span>' +
                                         '<span class="sectionTypeBtn" data-type="h4" unannotated-caption="h3" unactive-caption="heading-3">heading-3</span>' +
                                         '<span class="sectionTypeBtn" data-type="h5" unannotated-caption="h4" unactive-caption="heading-4">heading-4</span>' +
                                         '<span class="sectionTypeBtn" data-type="p">paragraph</span>'+
                                         '<span class="sectionTypeBtn notChangeable" data-type="bquote" unannotated-caption="quote" unactive-caption="blockquote">blockquote</span>'+
                                         '<span class="sectionTypeBtn notChangeable" data-type="table">table</span>' +
                                         '<span class="sectionTypeBtn" data-type="code" data-section-tag="pre" unannotated-caption="code">code</span>' +
                                         '<span class="sectionTypeBtn notChangeable" data-type="ul" unannotated-caption="list" unactive-caption="unordered-list">unordered-list</span>' +
                                         '<span class="sectionTypeBtn notChangeable" data-type="ol" unannotated-caption="list" unactive-caption="ordered-list">ordered-list</span>' +
                                         '<span class="sectionTypeBtn notChangeable" data-type="img" data-section-tag="figure">image</span>' +
                                         '<span class="sectionTypeBtn notChangeable" data-type="formula">formula</span>' +
                                         '<span class="sectionTypeBtn notChangeable" data-type="mermaid">mermaid</span>' +
                                         '<span class="sectionTypeBtn notChangeable" data-type="toc" data-section-tag="nav">toc</span>' +
                                         '<span class="sectionTypeBtn notChangeable" data-type="bibliographie" unannotated-caption="bib" unactive-caption="bibliographie">bibliographie</span>' +
                                         '<span class="sectionTypeBtn" data-type="h2(abstract)">abstract</span>' +
                                         '<span class="sectionTypeBtn" data-type="h2(declaration)">declaration</span>' +
                                         '<span class="sectionTypeBtn" data-type="h2(appendix)">appendix</span>' +
                                         '<span class="sectionTypeBtn" data-type="h2(acknowledgement)">acknowledgement</span>' +
                                         '<span class="sectionTypeBtn notChangeable" data-type="footnotes">footnotes</span>';

    this.buttons = Array.prototype.slice.call(this.sectionTypeSelector.children);

    this.sectionTypeSelector.onmouseover = function(e) {
        var isTypeBtn = e.target.classList.contains('sectionTypeBtn');

        if(e.target.id === 'sectionTypeSelector') { return }

        self.buttons.forEach(function(b) {
            isTypeBtn ? b.classList.add('hover') : b.classList.remove('hover');
        });
    }

    this.sectionTypeSelector.onmouseleave = function(e) {
        self.buttons.forEach(function(b) { b.classList.remove('hover') });
    }

    this.buttons.filter(function(btn) {
        return btn.classList.contains('delete-option-btn');
    }).forEach(function(btn) {
        btn.onclick = function() {
            if(self.editor) {
                if(self.sectionElement.onUnfocus) {
                    self.sectionElement.onUnfocus(self.editor)
                }

                self.editor.removeSection(self.sectionElement);
            } else {
                self.sectionElement.parentElement.removeChild(self.sectionElement);
            }

            self.hide();
        }
    });

    this.buttons.filter(function(btn) {
        return btn.classList.contains('config-option-btn');
    }).forEach(function(btn) {
        btn.addEventListener("click", function(){
            if(self.sectionElement.sectionType && self.sectionElement.sectionType.getOptions) {
                var form = new DeclarativForm({fields: self.sectionElement.sectionType.getOptions(self.sectionElement)}, function(formData) {
                    self.sectionElement.sectionType.onOptionsChange(formData, self.editor)
                    self.update();
                });

                form.openInModal();
            }
        });
    });

    this.sectionTypeSelector.addEventListener('click', function(e) {
        var clickedButton = e.target,
            currentSectionBtn = clickedButton.parentNode.querySelector('.sectionTypeBtn.active'),
            currentSectionIsChangeable = currentSectionBtn && !currentSectionBtn.classList.contains('notChangeable'),
            annotation, sectionTypeName;

        if(clickedButton.dataset.type && currentSectionIsChangeable) {
            sectionTypeName = clickedButton.dataset.type.split(/\(|\)/)[0];
            annotation = clickedButton.dataset.type.split(/\(|\)/)[1];
            onChangeCallback.apply(onChangeCallbackContext, [sectionTypeName, annotation]);
            self.setActiveSelection(clickedButton.dataset.sectionTag || clickedButton.dataset.type);
        }
    });

    document.body.appendChild(this.sectionTypeSelector);
}

SectionTypeSelectorControl.prototype = {
    getSectionTypeBySectionTag: function(sectionTag) {
        var btn = this.buttons.find(function (btn) {
            return btn.dataset.sectionTag === sectionTag || btn.dataset.type === sectionTag;
        });

        return btn && btn.dataset && btn.dataset.type;
    },

    setActiveSelection: function(sectionTag) {
        var self = this,
            unannotatedCaption,
            unactiveCaption,
            captionAnnotation,
            activeBtn;

        this.buttons.forEach(function(btn) {
            btn.classList.remove('active');
            btn.classList.remove('unusable');
            var tagName = btn.dataset.sectionTag || btn.dataset.type;

            unannotatedCaption = btn.getAttribute('unannotated-caption');
            unactiveCaption = btn.getAttribute('unactive-caption');

            if(unannotatedCaption) {
                btn.innerHTML = unannotatedCaption;
            }

            if(tagName === sectionTag || btn.dataset.optionFor === self.getSectionTypeBySectionTag(sectionTag)) {
                btn.classList.add('active');
                activeBtn = btn;
                if(unannotatedCaption &&
                   self.sectionElement &&
                   self.sectionElement.sectionType &&
                   self.sectionElement.sectionType.getSectionTypeCaptionAnnotation) {
                    captionAnnotation = self.sectionElement.sectionType.getSectionTypeCaptionAnnotation(self.sectionElement);
                }
            } else if (unactiveCaption) {
                btn.innerHTML = unactiveCaption;
            }

            if(captionAnnotation) {
                btn.innerHTML = unannotatedCaption + '<span class="annotation">(' + captionAnnotation + ')<span>';
            }

            captionAnnotation = undefined;
            unactiveCaption = undefined;
        });

        if(activeBtn.classList.contains('notChangeable')) {
            this.buttons.forEach(function(btn) {
                if(btn !== activeBtn) {
                    btn.classList.add('unusable');
                }
            });
        }
    },

    hide: function() {
        var sectionTypeSelectorElement = document.getElementById('sectionTypeSelector');
        sectionTypeSelectorElement.style.left = -1000 + 'px';
        sectionTypeSelectorElement.style.top = -1000 + 'px';
    },

    update: function() {
        var sectionElement = self.editor.focusedSection();
        if(sectionElement && sectionElement.tagName) {
            this.setActiveSelection(sectionElement.tagName.toLowerCase());
        }
    },

    displayNextTo: function(sectionElement, skipAnimation) {
        if(!sectionElement) return false;

        var self = this,
            sectionPosition = utils.getElementPosition(sectionElement),
            sectionTypeSelectorElement = document.getElementById('sectionTypeSelector'),
            sectionElementTopMargin = parseInt(window.getComputedStyle(sectionElement).getPropertyValue('margin-top').replace('px', '')),
            posX = sectionPosition.x,
            posY = sectionPosition.y,
            minY = window.scrollY + sectionElementTopMargin + 5, //add 5px so that there is a small room between the end of the browser screen and the selector button
            maxY = sectionElement.offsetHeight + sectionElement.offsetTop - sectionTypeSelectorElement.children[0].offsetHeight - 30,
            executeUpdate;

        posY = posY < minY ? minY : posY;
        posY = posY > maxY ? maxY : posY;

        this.sectionElement = sectionElement;
        this.setActiveSelection(sectionElement.tagName.toLowerCase());

        if(this.displaySectionTypeSelectorTimeout)
            clearTimeout(this.displaySectionTypeSelectorTimeout);

        executeUpdate = function() {
            sectionTypeSelectorElement.style.left = posX + 'px';
            sectionTypeSelectorElement.style.top = posY + 'px';
            if(utils.getDistanceToRightWindowBorder(self.editor.containerElement) < 150) {
                sectionTypeSelectorElement.classList.add('lessSpace');
            } else {
                sectionTypeSelectorElement.classList.remove('lessSpace');
            }
        }

        if(skipAnimation) {
            executeUpdate()
        } else {
            this.displaySectionTypeSelectorTimeout = setTimeout(executeUpdate, 10);
        }

    }
}

module.exports = SectionTypeSelectorControl;


/***/ }),

/***/ "../structured-text-editor/src/section_types/bibliographie/bibliographie_section_type.js":
/*!***********************************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/bibliographie/bibliographie_section_type.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js");

function getSectionElement() {
    var  el = document.createElement('bibliographie'),
         heading = document.createElement('h2'),
         content = document.createElement('div');
    el.classList.add('bibliographie');
    heading.classList.add('bibliographie-heading');
    content.classList.add('bibliographie-content');

    el.setAttribute('contenteditable', 'false');
    heading.setAttribute('contenteditable', 'true');
    content.setAttribute('contenteditable', 'false');

    heading.innerHTML = 'Bibliography';

    el.sectionType = module.exports;
    el.onFocus = module.exports.onFocus;
    el.onKeyBackspace = module.exports.onKeyBackspace;

    el.appendChild(heading);
    el.appendChild(content);

    return el;
}

Object.assign(module.exports, {

    name: 'bibliographie',

    preferredCaretPositioning: 'end',

    editableElementSelector: 'h2',

    contentRules: {
        'bibliographie': {
            tagName: 'bibliographie',
            allowedAttributes: ['class', 'contenteditable'],
            allowedClassNames: ['focused'],
            allowedChildren: ['bibliographie-heading', 'bibliographie-content'],
            allowedToBeRoot: true,
            deleteIfEmpty: false,
            doNotBreakOutRootElements: true,
            buildEmptyElement: getSectionElement
        },

        'bibliographie-heading': {
            tagName: 'h2',
            className: 'bibliographie-heading',
            allowedAttributes: ['id', 'class', 'contenteditable', 'unnumbered-heading'],
            allowedClassNames: ['bibliographie-heading'],
            allowedChildren: ['#text'],
            pruneSpaces: true,
            buildAttributes: [
                {name: 'id', build: function() {return uuid()}},
                {name: 'unnumbered-heading', build: function() {return 'Yes'}}
            ]
        },

        'bibliographie-content': {
            tagName: 'div',
            className: 'bibliographie-content',
            allowedAttributes: ['class', 'contenteditable'],
            allowedClassNames: ['bibliographie-content'],
            allowedChildren: ['bibliographie-entry'],
        },

        'bibliographie-entry': {
            tagName: 'div',
            className: 'entry',
            allowedAttributes: ['class'],
            allowedClassNames: ['entry', 'note'],
            allowedChildren: ['#text'],
        }
    },

    enrichments: [],

    getSectionElement: getSectionElement,

    getOptions: function(sectionElement) {
        return [
            {
                name: 'numberedHeading',
                displayName: 'Should the heading be numbered',
                allowedValues: ['Yes', 'No'],
                defaultValue: sectionElement.querySelector('h2').getAttribute('unnumbered-heading') === 'Yes' ? 'No' : 'Yes'
            }
        ]
    },

    onOptionsChange: function(opt, editor) {
        var section = editor.focusedSection();
        if(opt.numberedHeading === 'Yes' || opt.numberedHeading === 'No') {
            section.querySelector('h2').setAttribute('unnumbered-heading', opt.numberedHeading === 'Yes' ? 'No' : 'Yes');
            self.editor.replaceSectionWithHTML(section, section.outerHTML);
        }
    },

    onEditorContentChanged: function(modificationLog) {
        if(!modificationLog.mightIncludeReferenceUpdates && !modificationLog.mightIncludeBibliographieUpdates) {
            return;
        }

        var bibs = document.querySelectorAll('bibliographie .bibliographie-content'),
            refs = document.querySelectorAll('.reference[data-external]').map(function(r) { return r.getAttribute('data-ref')}).unique(),
            allRefs = module.exports.editor.reference.getAllExternalRefs(), refData;

        bibs.forEach(function(bib) {
            bib.innerHTML = '';
            if(refs.length === 0) {
                bib.innerHTML += '<div class="entry note">Insert references to see them here.</div>';
            }

            refs.forEach(function(refId) {
                refData = allRefs[refId];

                if(refData) {
                    let tmp = document.createElement('div');
                    tmp.classList.add('entry')
                    tmp.setAttribute('data-ref', refId);
                    tmp.innerHTML = [refData.url, refData.author, refData.title, refData.year, (refData.publisher || refData.journal)].filter(function(x) {return x}).join(' - ');
                    tmp.onclick = function() { module.exports.editor.reference.showEditExternalRefDialog(tmp) };
                    bib.appendChild(tmp);
                }
            });
        });
    },

    onKeyBackspace: function(e, editor) {
        var heading = editor.caret.getContextElement('h2', window.getSelection(), []),
            sectionIndex = editor.indexOf(editor.focusedSection());

        if(!heading || editor.caret.isCollapsedAndPositionedAtTheBeginningOf(heading, false)) {
            e.preventDefault();
        } else if(heading.innerText.length === 1) {
            document.execCommand('delete');
            editor.caret.positionIn(editor.sectionAt(sectionIndex).querySelector('h2'));
            e.preventDefault();
        } else if(heading.innerText.length === 0) {
            e.preventDefault();
        }
    },

    onFocus: function(el, editor, args) {
        var heading = el.querySelector('h2'),
            isCaretInsideSection = (editor.sectionAtCaretPostion() === el && editor.caret.getContextElement('h2')),
            hasBeenFocusedAfterSectionTypeChange = args.action === 'changeFocusedSectionType';

        if(hasBeenFocusedAfterSectionTypeChange || !isCaretInsideSection) {
            heading && editor.caret.positionIn(heading);
        }
    },

    setEditor: function(editor) {
        this.editor = editor;
        return this;
    }
});


/***/ }),

/***/ "../structured-text-editor/src/section_types/blockquote/blockquote_section_type.js":
/*!*****************************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/blockquote/blockquote_section_type.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js");

var getSectionElement = function(existingSectionContent) {
    var el = document.createElement('bquote'),
        blockquoteEl = document.createElement('blockquote'),
        captionEl = document.createElement('citesrc');

    el.setAttribute('contenteditable', 'false')
    el.setAttribute('display-citesrc', 'Yes');
    el.id = uuid();
    el.setContenteditable = module.exports.setContenteditable;
    el.sectionType = module.exports;

    blockquoteEl.innerHTML = existingSectionContent;
    blockquoteEl.setAttribute('contenteditable', 'true');

    captionEl.innerHTML = 'citation source';

    el.appendChild(blockquoteEl);
    el.appendChild(captionEl);

    return el;
}

Object.assign(module.exports, {

    name: 'bquote',

    tagTransformations: {
      '/bquote/blockquote/div': '#content',
      '/bquote/blockquote/span': '#content',
      '/bquote/blockquote': '#text-content',
    },

    contentRules: {
        'bquote': {
            tagName: 'bquote',
            allowedAttributes: ['class', 'contenteditable', 'display-caption', 'id', 'reference'],
            allowedClassNames: ['focused'],
            allowedChildren: ['blockquote', 'citesrc'],
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement,
            deleteIfEmpty: false,
            buildAttributes: [
              {name: 'id', build: function() {return uuid()}},
              {name: 'display-caption', build: function() {return 'Yes'}}
            ]
        },
        'blockquote': {
            tagName: 'blockquote',
            allowedSuccessors: ['citesrc'],
            allowedAttributes: ['contenteditable'],
            allowedChildren: ['#text'],
        },
        'citesrc': {
            tagName: 'citesrc',
            allowedChildren: ['#text', 'reference',  'inlineequation'],
            deleteIfEmpty: false,
            pruneSpaces: true,
        }
    },

    enrichments: [],

    getOptions: function(sectionElement) {
        return [
            {
              name: 'displayCaption',
              displayName: 'Display Source',
              allowedValues: ['Yes', 'No'],
              defaultValue: sectionElement.getAttribute('display-caption') || 'Yes'
            }
        ]
    },

    onOptionsChange: function(opt, editor) {
        var section = editor.focusedSection();

        if(section) {
            if(opt.displayCaption === 'Yes' || opt.displayCaption === 'No') {
                section.setAttribute('display-caption', opt.displayCaption);
            }

            editor.replaceSectionWithHTML(section, section.outerHTML);
        }
    },

    getSectionElement: getSectionElement,
})


/***/ }),

/***/ "../structured-text-editor/src/section_types/code/code_section_type.js":
/*!*****************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/code/code_section_type.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var HTMLRazor = __webpack_require__(/*! ../../../lib/html_razor/html_razor */ "../structured-text-editor/lib/html_razor/html_razor.js"),
    utils = __webpack_require__(/*! ../../../lib/pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js"),
    shared = __webpack_require__(/*! ../shared/shared */ "../structured-text-editor/src/section_types/shared/shared.js"),
    primsjs = __webpack_require__(/*! prismjs */ "../structured-text-editor/node_modules/prismjs/prism.js"),
    progLanguages = ["XML", "HTML", "MathML", "SVG", "CSS", "clike", "JavaScript"],
    progLanguagesShort = {'JavaScript': 'JS'},
    defaultLanguage = 'JavaScript',
    uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js");

var getSectionElement = function(existingSectionContent, params) {
    var el = document.createElement('pre'),
        codeEl = document.createElement('code'),
        captionEl = document.createElement('caption'),
        capitalizedLangauge;

    el.classList.add('code');
    el.setAttribute('contenteditable', 'false')
    el.setAttribute('display-caption', 'Yes');
    el.id = uuid();
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    el.onKeyEnter = module.exports.onKeyEnter;
    el.onKeyTab = module.exports.onKeyTab;
    el.onKeyBackspace = module.exports.onKeyBackspace;
    el.onMarkupCleaningFinshed = module.exports.onMarkupCleaningFinshed;
    el.setContenteditable = module.exports.setContenteditable;
    el.sectionType = module.exports;

    codeEl.innerHTML = existingSectionContent;
    codeEl.setAttribute('contenteditable', 'true');

    captionEl.innerHTML = 'listing title';

    el.appendChild(codeEl);
    el.appendChild(captionEl);

    if(params && params[0]) {
        params[0] = params[0].toLowerCase();
        capitalizedLangauge = progLanguages.find(function(lan) {
            return lan.toLowerCase() === params[0];
        });
    }

    capitalizedLangauge = capitalizedLangauge || defaultLanguage;
    el.setAttribute('language', capitalizedLangauge);

    return el;
}

Object.assign(module.exports, {

    name: 'code',

    tagTransformations: {
      '/pre/code/div': '#content',
      '/pre/code/span': '#content',
      '/pre/code': '#text-content',
    },

    contentRules: {
        'pre': {
            tagName: 'pre',
            allowedAttributes: ['class', 'language', 'contenteditable', 'display-caption', 'id'],
            allowedClassNames: ['focused', 'code'],
            allowedChildren: ['code', 'caption'],
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement,
            deleteIfEmpty: false,
            buildAttributes: [
              {name: 'id', build: function() {return uuid()}},
              {name: 'language', build: function() {return defaultLanguage}},
              {name: 'display-caption', build: function() {return 'Yes'}}
            ]
        },
        'code': {
            tagName: 'code',
            allowedSuccessors: ['caption'],
            allowedAttributes: ['contenteditable'],
            allowedChildren: ['#text'],
        }
    },

    enrichments: [],

    getOptions: function(sectionElement) {
        return [
            {
              name: 'language',
              displayName: 'Syntax Highlighting for',
              allowedValues: progLanguages,
              defaultValue: sectionElement.getAttribute('language')
            },
            {
              name: 'displayCaption',
              displayName: 'Display Listing Caption',
              allowedValues: ['Yes', 'No'],
              defaultValue: sectionElement.getAttribute('display-caption') || 'Yes'
            }
        ]
    },

    onOptionsChange: function(opt, editor) {
        var section = editor.focusedSection();

        if(section) {
            if(opt['language']) {
                section.setAttribute('language', opt['language']);
            }

            if(opt.displayCaption === 'Yes' || opt.displayCaption === 'No') {
                section.setAttribute('display-caption', opt.displayCaption);
            }

            editor.replaceSectionWithHTML(section, section.outerHTML);
        }
    },

    getSectionElement: getSectionElement,

    onMarkupCleaningFinshed: function(sectionElement) {
        var codeEl = sectionElement.querySelector('code'), content, lan;

        if(!codeEl) { return }

        content = codeEl.innerHTML;
        lan = sectionElement.getAttribute('language');

        if(!lan || lan === 'true') {
            lan = defaultLanguage;
        }

        lan = lan.toLowerCase();
        content = HTMLRazor.prototype.strip(content);
        content = primsjs.highlight(content, primsjs.languages[lan], lan);
        sectionElement.querySelector('code').innerHTML = content;
    },

    getSectionTypeCaptionAnnotation: function(sectionElement) {
        var lan = sectionElement.getAttribute('language');

        if(progLanguagesShort[lan]) {
            return progLanguagesShort[lan];
        }

        return lan;
    },

    onKeyTab: function(e) {
        document.execCommand('insertText', false, '  ');
        e.preventDefault();
    },

    setContenteditable: function(shouldBeEditable, section) {
        var el = section.querySelector('code')
        if(el) {
            if(shouldBeEditable) {
                el.setAttribute('contenteditable', true);
            } else {
                el.removeAttribute('contenteditable');
            }
        }
    },

    onKeyUp: shared.onKeyUpForFreestyleSections,
    onKeyDown: shared.onKeyDownForFreestyleSections,
    onKeyBackspace: function(e, editor) {
        var caption = editor.caret.getContextElement('caption', window.getSelection(), []),
            sectionEl, sectionIndex;

        if(caption) {
            if(caption.innerText.length === 1) {
                sectionEl = caption.parentElement;
                sectionIndex = editor.indexOf(sectionEl);

                if(sectionIndex) {
                    document.execCommand('delete');

                    sectionEl = editor.sectionAt(sectionIndex);
                    caption = sectionEl && sectionEl.querySelector('caption');

                    if(caption) {
                        editor.caret.positionIn(caption);
                    }

                    e.preventDefault();
                }
            } else if(!caption.innerText || caption.innerText.length === 0 || editor.caret.isCollapsedAndPositionedAtTheBeginningOf(caption, false)) {
                e.preventDefault();
            }
        } else {
            shared.onKeyBackspaceForBackspaceDeletableSections(e, editor)
        }
    },
    onKeyEnter: shared.onKeyEnterForFreestyleSections
})


/***/ }),

/***/ "../structured-text-editor/src/section_types/footnotes/footnotes_section_type.js":
/*!***************************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/footnotes/footnotes_section_type.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js"),
utils = __webpack_require__(/*! ../../../lib/pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js");

function getSectionElement() {
    var  el = document.createElement('footnotes'),
         heading = document.createElement('h2'),
         content = document.createElement('div');
    el.classList.add('footnotes');

    heading.classList.add('footnotes-heading');
    content.classList.add('footnotes-content');

    el.setAttribute('contenteditable', 'false');
    heading.setAttribute('contenteditable', 'true');
    content.setAttribute('contenteditable', 'false');

    heading.innerHTML = 'Footnotes';

    el.onKeyBackspace = module.exports.onKeyBackspace;
    el.sectionType = module.exports;

    el.appendChild(heading);
    el.appendChild(content);

    return el;
}

Object.assign(module.exports, {

    name: 'footnotes',

    editableElementSelector: 'h2',

    preferredCaretPositioning: 'end',

    contentRules: {
        'footnotes': {
            tagName: 'footnotes',
            allowedAttributes: ['class', 'contenteditable'],
            allowedClassNames: ['focused'],
            allowedChildren: ['footnotes-heading', 'footnotes-content'],
            allowedToBeRoot: true,
            deleteIfEmpty: false,
            doNotBreakOutRootElements: true,
            buildEmptyElement: getSectionElement
        },

        'footnotes-heading': {
            tagName: 'h2',
            className: 'footnotes-heading',
            allowedAttributes: ['id', 'class', 'contenteditable', 'unnumbered-heading'],
            allowedClassNames: ['footnotes-heading'],
            allowedChildren: ['#text'],
            pruneSpaces: true,
            buildAttributes: [
                {name: 'id', build: function() {return uuid()}},
                {name: 'unnumbered-heading', build: function() {return 'Yes'}}
            ]
        },

        'footnotes-content': {
            tagName: 'div',
            className: 'footnotes-content',
            allowedAttributes: ['class', 'contenteditable'],
            allowedClassNames: ['footnotes-content'],
            allowedChildren: ['footnotes-entry'],
        },

        'footnotes-entry': {
            tagName: 'div',
            className: 'entry',
            allowedAttributes: ['class'],
            allowedClassNames: ['entry', 'note'],
            allowedChildren: ['#text'],
        }
    },

    enrichments: [],

    getSectionElement: getSectionElement,

    getOptions: function(sectionElement) {
        return [
            {
                name: 'numberedHeading',
                displayName: 'Should the heading be numbered',
                allowedValues: ['Yes', 'No'],
                defaultValue: sectionElement.querySelector('h2').getAttribute('unnumbered-heading') === 'Yes' ? 'No' : 'Yes'
            }
        ]
    },

    onOptionsChange: function(opt, editor) {
        var section = editor.focusedSection();
        if(opt.numberedHeading === 'Yes' || opt.numberedHeading === 'No') {
            section.querySelector('h2').setAttribute('unnumbered-heading', opt.numberedHeading === 'Yes' ? 'No' : 'Yes');
            self.editor.replaceSectionWithHTML(section, section.outerHTML);
        }
    },

    onEditorContentChanged: function(modificationLog) {
        if(!modificationLog.mightIncludeFootnoteUpdates && !modificationLog.mightIncludeFootnotesSectionUpdates) {
            return;
        }

        var notesSections = document.querySelectorAll('footnotes .footnotes-content'),
            notes = document.querySelectorAll('.footnote'),
            noteIndex, tmp;

        notesSections.forEach(function(notesSection) {
            notesSection.innerHTML = '';

            if(notes.length === 0) {
                notesSection.innerHTML += '<div class="entry note">Insert footnotes to see them here.</div>';
            }

            noteIndex = 0;

            notes.forEach(function(note) {
                noteIndex++;
                tmp = document.createElement('div');
                tmp.classList.add('entry')
                tmp.innerHTML = noteIndex + ') ' + utils.attributeSaveStringToHTMLEncoded(note.getAttribute('data-note'));
                tmp.onclick = function() {
                    module.exports.showFootnoteEditDialog(note);

                };
                notesSection.appendChild(tmp);
            });
        });
    },

    showFootnoteEditDialog: function(note) {
        var self = this,
            section = self.editor.sectionByChildNode(note),
            noteIndex,
            args = [{
            name: 'note',
            placeholder: 'footnote',
            displayName: 'Footnote',
            largetext: true,
            defaultValue: utils.attributeSaveStringToString(note.dataset.note)
        }];

        if(!section) {
            return;
        }

        self.editor.displayModal(args, function(formData) {
            noteIndex = document.querySelectorAll('.footnote').indexOf(note),
            self.editor.unfreezeSelection(false);
            note = document.querySelectorAll('.footnote')[noteIndex];
            section = self.editor.sectionByChildNode(note);

            if(!formData.note) return;
            if(typeof formData.note !== 'string') return;
            if(formData.note.trim() === '') return;
            note.setAttribute('data-note', utils.stringToAttributeSaveString(formData.note));

            self.editor.replaceSectionWithHTML(section, section.outerHTML);
        });
    },

    onKeyBackspace: function(e, editor) {
        var heading = editor.caret.getContextElement('h2', window.getSelection(), []),
            sectionIndex = editor.indexOf(editor.focusedSection());

        if(!heading || editor.caret.isCollapsedAndPositionedAtTheBeginningOf(heading, false)) {
            e.preventDefault();
        } else if(heading.innerText.length === 1) {
            document.execCommand('delete');
            editor.caret.positionIn(editor.sectionAt(sectionIndex).querySelector('h2'));
            e.preventDefault();
        } else if(heading.innerText.length === 0) {
            e.preventDefault();
        }
    },

    onFocus: function(el, editor, args) {
        var toCHeading = el.querySelector('h2'),
            isCaretInsideSection = (editor.sectionAtCaretPostion() === el && editor.caret.getContextElement('h2')),
            hasBeenFocusedAfterSectionTypeChange = args.action === 'changeFocusedSectionType';

        if(hasBeenFocusedAfterSectionTypeChange || !isCaretInsideSection) {
            toCHeading && editor.caret.positionIn(toCHeading);
        }
    },

    setEditor: function(editor) {
        this.editor = editor;
        return this;
    }
});


/***/ }),

/***/ "../structured-text-editor/src/section_types/formula/formula_section_type.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/formula/formula_section_type.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var code2dia = __webpack_require__(/*! ../shared/code2dia_section_type */ "../structured-text-editor/src/section_types/shared/code2dia_section_type.js"),
    // katex = require('katex'), // make sure to load <script src="./katex.js" defer></script> in your html
    latex = __webpack_require__(/*! prismjs/components/prism-latex */ "../structured-text-editor/node_modules/prismjs/components/prism-latex.js"),
    render;

render = function(renderEl, content) {
    if(content.trim().length === 0) {
        renderEl.innerHTML = 'Write a LaTeX formula into the input field above <span class="arrow">&#10548;</span>';
    } else {
        renderEl.innerHTML = '';
        katex.render(content, renderEl, {
            throwOnError: false,
            displayMode: true
        });
    }
}

module.exports = code2dia(render, 'formula', 'latex', 'equation caption')


/***/ }),

/***/ "../structured-text-editor/src/section_types/heading/heading1.js":
/*!***********************************************************************!*\
  !*** ../structured-text-editor/src/section_types/heading/heading1.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js"),
    paragraphSectionType = __webpack_require__(/*! ../paragraph/paragraph_section_type */ "../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js");

var getSectionElement = function(existingSectionContent) {
    var el = document.createElement('h1');
    el.innerHTML = existingSectionContent || '';
    el.id = uuid();
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    el.onKeyEnter = module.exports.onKeyEnter;
    return el;
}

module.exports = {

    name: 'h1',

    contentRules: {
        'h1': {
            tagName: 'h1',
            allowedAttributes: ['class', 'id'],
            allowedChildren: ['#text', 'inlineequation'],
            allowedClassNames: ['focused'],
            pruneSpaces: true,
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement,
            buildAttributes: [{name: 'id', build: function() {return uuid()}}]
        }
    },

    enrichments: [],

    onKeyUp: paragraphSectionType.onKeyUp,
    onKeyDown: paragraphSectionType.onKeyDown,
    onKeyEnter: function(e, editor) {
        if(editor.caret.isCollapsedAndPositionedAtTheBeginningOf(editor.focusedSection())) {
            if(editor.focusedSection()) {
                editor.addNewSectionNextTo(editor.focusedSection(), 'before')
            }
        } else {
            editor.caret.insertLineBreak();
        }

        e.preventDefault();
    },

    getSectionElement: getSectionElement,
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/heading/heading2.js":
/*!***********************************************************************!*\
  !*** ../structured-text-editor/src/section_types/heading/heading2.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js"),
    paragraphSectionType = __webpack_require__(/*! ../paragraph/paragraph_section_type */ "../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js"),
    h1SectionType = __webpack_require__(/*! ./heading1.js */ "../structured-text-editor/src/section_types/heading/heading1.js");

var getSectionElement = function(existingSectionContent, params) {
    var el = document.createElement('h2');

    if(params && (params.includes('abstract') || params.includes('Abstract'))) {
        el.setAttribute('role', 'Abstract')
    } else if(params && (params.includes('declaration') || params.includes('Declaration'))) {
        el.setAttribute('role', 'Declaration')
    } else if(params && (params.includes('appendix') || params.includes('Appendix'))) {
        el.setAttribute('role', 'Appendix')
    } else if(params && (params.includes('acknowledgement') || params.includes('Acknowledgement'))) {
        el.setAttribute('role', 'Acknowledgement')
    }

    el.innerHTML = existingSectionContent || '';
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    el.onKeyEnter = module.exports.onKeyEnter;
    el.id = uuid();
    el.sectionType = module.exports;
    return el;
}

module.exports = {

    name: 'h2',

    contentRules: {
        'h2': {
            tagName: 'h2',
            allowedAttributes: ['class', 'id', 'role'],
            allowedChildren: ['#text', 'inlineequation'],
            allowedClassNames: ['focused'],
            pruneSpaces: true,
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement,
            buildAttributes: [{name: 'id', build: function() {return uuid()}}]
        }
    },

    enrichments: [],

    getOptions: function(sectionElement) {
        return [
            {
              name: 'role',
              displayName: 'Assign a special role to the heading',
              allowedValues: ['None', 'Abstract', 'Declaration', 'Appendix', 'Acknowledgement'],
              defaultValue: sectionElement.getAttribute('role') || 'None'
            }
        ]
    },

    onOptionsChange: function(opt, editor) {
        var section = editor.focusedSection();

        if(section) {
            if(opt['role']) {
                section.setAttribute('role', opt['role']);
            }

            editor.replaceSectionWithHTML(section, section.outerHTML);
        }
    },

    getSectionTypeCaptionAnnotation: function(sectionElement) {
        var role = sectionElement.getAttribute('role');
        if(role === 'None') {
            role = null;
        }

        if(role === 'Acknowledgement') {
            return 'Ack.'
        }

        if(role === 'Declaration') {
            return 'Decl.'
        }

        return role;
    },

    onKeyUp: paragraphSectionType.onKeyUp,
    onKeyDown: paragraphSectionType.onKeyDown,
    onKeyEnter: h1SectionType.onKeyEnter,

    getSectionElement: getSectionElement,
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/heading/heading3.js":
/*!***********************************************************************!*\
  !*** ../structured-text-editor/src/section_types/heading/heading3.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js"),
    paragraphSectionType = __webpack_require__(/*! ../paragraph/paragraph_section_type */ "../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js"),
    h1SectionType = __webpack_require__(/*! ./heading1.js */ "../structured-text-editor/src/section_types/heading/heading1.js");

var getSectionElement = function(existingSectionContent) {
    var el = document.createElement('h3');
    el.innerHTML = existingSectionContent || '';
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    el.onKeyEnter = module.exports.onKeyEnter;
    el.id = uuid();
    return el;
}

module.exports = {

    name: 'h3',

    contentRules: {
        'h3': {
            tagName: 'h3',
            allowedAttributes: ['class', 'id'],
            allowedChildren: ['#text', 'inlineequation'],
            allowedClassNames: ['focused'],
            pruneSpaces: true,
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement,
            buildAttributes: [{name: 'id', build: function() {return uuid()}}]
        }
    },

    enrichments: [],

    onKeyUp: paragraphSectionType.onKeyUp,
    onKeyDown: paragraphSectionType.onKeyDown,
    onKeyEnter: h1SectionType.onKeyEnter,

    getSectionElement: getSectionElement,
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/heading/heading4.js":
/*!***********************************************************************!*\
  !*** ../structured-text-editor/src/section_types/heading/heading4.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js"),
    paragraphSectionType = __webpack_require__(/*! ../paragraph/paragraph_section_type */ "../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js"),
    h1SectionType = __webpack_require__(/*! ./heading1.js */ "../structured-text-editor/src/section_types/heading/heading1.js");

var getSectionElement = function(existingSectionContent) {
    var el = document.createElement('h4');
    el.innerHTML = existingSectionContent || '';
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    el.onKeyEnter = module.exports.onKeyEnter;
    el.id = uuid();
    return el;
}

module.exports = {

    name: 'h4',

    contentRules: {
        'h4': {
            tagName: 'h4',
            allowedAttributes: ['class', 'id'],
            allowedChildren: ['#text', 'inlineequation'],
            allowedClassNames: ['focused'],
            pruneSpaces: true,
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement,
            buildAttributes: [{name: 'id', build: function() {return uuid()}}]
        }
    },

    enrichments: [],

    onKeyUp: paragraphSectionType.onKeyUp,
    onKeyDown: paragraphSectionType.onKeyDown,
    onKeyEnter: h1SectionType.onKeyEnter,

    getSectionElement: getSectionElement,
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/heading/heading5.js":
/*!***********************************************************************!*\
  !*** ../structured-text-editor/src/section_types/heading/heading5.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js"),
    paragraphSectionType = __webpack_require__(/*! ../paragraph/paragraph_section_type */ "../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js"),
    h1SectionType = __webpack_require__(/*! ./heading1.js */ "../structured-text-editor/src/section_types/heading/heading1.js");

var getSectionElement = function(existingSectionContent) {
    var el = document.createElement('h5');
    el.innerHTML = existingSectionContent || '';
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    el.onKeyEnter = module.exports.onKeyEnter;
    el.id = uuid();
    return el;
}

module.exports = {

    name: 'h5',

    contentRules: {
        'h5': {
            tagName: 'h5',
            allowedAttributes: ['class', 'id'],
            allowedChildren: ['#text', 'inlineequation'],
            allowedClassNames: ['focused'],
            pruneSpaces: true,
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement,
            buildAttributes: [{name: 'id', build: function() {return uuid()}}]
        }
    },

    enrichments: [],

    onKeyUp: paragraphSectionType.onKeyUp,
    onKeyDown: paragraphSectionType.onKeyDown,
    onKeyEnter: h1SectionType.onKeyEnter,

    getSectionElement: getSectionElement,
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/image/image_section_type.js":
/*!*******************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/image/image_section_type.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var chooseFileBtnCounter = 0,
    imageSectionType,
    uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js");

var buildEmptyImgPlacehoder = function() {
    var imgPlaceholder = document.createElement('span'),
        emptyImage = document.createElement('i'),
        chooseFileLabel = document.createElement('label'),
        chooseFileBtn = document.createElement('input'),
        chooseFileBtnId = 'chooseFileBtn' + chooseFileBtnCounter++;

    emptyImage.classList.add('empty-image');
    chooseFileBtn.classList.add('choose-img-btn');
    chooseFileBtn.setAttribute('type', 'file');
    chooseFileBtn.setAttribute('id', chooseFileBtnId);

    chooseFileLabel.classList.add('choose-img-btn-label');
    chooseFileLabel.innerHTML = 'Click to Import Image (or drag and drop it)';

    imgPlaceholder.setAttribute('contenteditable', false);
    imgPlaceholder.classList.add('image-img-placeholder');
    imgPlaceholder.appendChild(chooseFileLabel);
    imgPlaceholder.appendChild(chooseFileBtn);
    imgPlaceholder.appendChild(emptyImage);

    var getImageOrPlaceholderByAChild = function(child) {
        if(!child) {
            return;
        }

        if(child.classList.contains('image-img-placeholder') || child.tagName === 'IMG') {
           return child;
        }

        return getImageOrPlaceholderByAChild(child.parentElement);
    }

    imgPlaceholder.onclick = function(e) {
        if(imageSectionType) {
            imageSectionType.editor.focusSection(e.target.parentElement)
        }

        chooseFileBtn.click()
    }

    imgPlaceholder.ondrop = chooseFileBtn.onchange = function(e) {
        e.preventDefault();

        var currentImg = getImageOrPlaceholderByAChild(e.target),
            sectionElement = currentImg.parentNode;

        if(!sectionElement || !document.body.contains(sectionElement)) {
            sectionElement = imageSectionType.editor.focusedSection();
            currentImg = sectionElement.querySelector('img') || sectionElement.querySelector('.image-img-placeholder')
        }

        currentImg.classList.remove('dragover');

        var files = e.target.files || e.dataTransfer.files;

        var img = document.createElement('img');
        var persistResult = imageSectionType.persistFile(files[0]);

        if(persistResult.then) {
            persistResult.then(url => img.src = url);
        } else {
            img.src = persistResult;
        }

        currentImg.parentElement.replaceChild(img, currentImg);
        img.ondrop = currentImg.ondrop;
        img.ondragover = currentImg.ondragover;
        img.ondragleave = currentImg.ondragleave;
        img.onclick = imgPlaceholder.onclick

        sectionElement.dispatchEvent(new CustomEvent('image-upload', {bubbles: true, detail: {url: img.src}}));
        sectionElement.dispatchEvent(new Event('input', {bubbles: true}));
    }

    imgPlaceholder.ondragover = function(e) { getImageOrPlaceholderByAChild(e.target).classList.add('dragover'); e.preventDefault(); }
    imgPlaceholder.ondragleave = function(e) { getImageOrPlaceholderByAChild(e.target).classList.remove('dragover'); e.preventDefault(); }

    return imgPlaceholder;
}

var getSectionElement = function(existingSectionContent) {
    var el = document.createElement('figure'),
        caption = document.createElement('figcaption');

    el.id = uuid();
    el.sectionType = imageSectionType;
    el.setAttribute('display-caption', 'Yes');
    caption.innerHTML = 'image title';
    el.appendChild(buildEmptyImgPlacehoder());
    el.appendChild(caption);
    el.onKeyBackspace = imageSectionType.onKeyBackspace;
    el.onKeyEnter = imageSectionType.onKeyEnter;

    return el;
}

imageSectionType = {

    name: 'img',

    contentRules: {
        'image': {
            tagName: 'figure',
            allowedAttributes: ['class', 'display-caption', 'id'],
            allowedClassNames: ['focused'],
            allowedChildren: ['image-img', 'image-caption', 'image-img-placeholder'],
            childrenCardinality: {'image-caption': {max: 1}, 'image-img-placeholder': {max: 1}},
            allowedToBeRoot: true,
            deleteIfEmpty: false,
            buildEmptyElement: getSectionElement,
            buildAttributes: [
                {name: 'id', build: function() {return uuid()}},
                {name: 'display-caption', build: function() {return 'Yes'}}
            ]
        },
        'image-img': {
            tagName: 'img',
            allowedAttributes: ['src'],
            allowedSuccessors: ['image-caption'],
            allowedChildren: []
        },
        'image-img-placeholder': {
            tagName: 'span',
            className: 'image-img-placeholder',
            allowedAttributes: ['class', 'contenteditable'],
            allowedClassNames: ['image-img-placeholder'],
            allowedSuccessors: ['image-caption'],
            allowedChildren: ['empty-image', 'choose-img-btn', 'choose-img-btn-label'],
            deleteIfEmpty: false,
            buildEmptyElement: buildEmptyImgPlacehoder
        },
        'empty-image': {
            tagName: 'i',
            className: 'empty-image',
            allowedAttributes: ['class'],
            allowedClassNames: ['empty-image'],
            allowedChildren: [],
            deleteIfEmpty: false,
        },
        'choose-img-btn': {
            tagName: 'input',
            className: 'choose-img-btn',
            allowedAttributes: ['class', 'type', 'id'],
            allowedClassNames: ['choose-img-btn'],
            deleteIfEmpty: false
        },
        'choose-img-btn-label': {
            tagName: 'label',
            className: 'choose-img-btn-label',
            allowedClassNames: ['choose-img-btn-label'],
            allowedAttributes: ['class'],
            allowedChildren: ['#text']
        },
        'image-caption': {
            tagName: 'figcaption',
            allowedChildren: ['#text', 'reference', 'inlineequation'],
            allowedPredecessors: ['image-img-placeholder', 'image-img'],
            deleteIfEmpty: false,
            pruneSpaces: true
        }
    },

    enrichments: [],

    getOptions: function(sectionElement) {
        return [
            {
              name: 'displayCaption',
              displayName: 'Display Image Caption',
              allowedValues: ['Yes', 'No'],
              defaultValue: sectionElement.getAttribute('display-caption')
            }
        ]
    },

    onOptionsChange: function(opt, editor) {
        var section = editor.focusedSection();
        if(opt.displayCaption === 'Yes' || opt.displayCaption === 'No') {
            section.setAttribute('display-caption', opt.displayCaption);
        }
    },

    setEditor: function(editor) {
        this.editor = editor;
        return this;
    },

    persistFile: function(blob) {
        return URL.createObjectURL(blob);
    },

    onKeyBackspace: function(e, editor) {
        var caption = editor.caret.getContextElement('figcaption');
        if(caption.innerText === '') {
            e.preventDefault();
        }
    },

    onKeyEnter: function(e) {
        e.preventDefault();
    },

    onFocus: function(el, editor, args) {
        var caption = el.querySelector('figcaption'),
            isCaretInsideSection = (editor.sectionAtCaretPostion() === el && editor.caret.getContextElement('figcaption')),
            hasBeenFocusedAfterSectionTypeChange = args.action === 'changeFocusedSectionType';

        if(hasBeenFocusedAfterSectionTypeChange || !isCaretInsideSection) {
            caption && editor.caret.positionIn(caption);
        }
    },

    getSectionElement: getSectionElement
}

module.exports = imageSectionType;


/***/ }),

/***/ "../structured-text-editor/src/section_types/list/ordered_list_section_type.js":
/*!*************************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/list/ordered_list_section_type.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(/*! ../shared/shared */ "../structured-text-editor/src/section_types/shared/shared.js");
var unorderedListSectionType = __webpack_require__(/*! ./unordered_list_section_type */ "../structured-text-editor/src/section_types/list/unordered_list_section_type.js");

var getSectionElement = function(existingSectionContent) {
    var el = document.createElement('ol');
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    el.onKeyEnter = module.exports.onKeyEnter;
    el.onKeyTab = module.exports.onKeyTab;
    el.onKeyBackspace = module.exports.onKeyBackspace;
    el.innerHTML = '<li>' + existingSectionContent + '</li>';
    return el;
}

module.exports = {

    name: 'ol',

    contentRules: {
        'ol': {
            tagName: 'ol',
            allowedAttributes: ['class'],
            allowedClassNames: ['focused'],
            allowedChildren: ['li', 'ol'],
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement
        },
        'li': {
            tagName: 'li',
            pruneSpaces: true,
            doNotBreakOutRootElements: true,
            allowedChildren: ['#text', 'link', 'b', 'i', 'u', 'reference', 'footnote', 'inlinecode', 'inlineequation'],
        }
    },

    enrichments: [],

    getSectionElement: getSectionElement,
    indentFocusedListItem: unorderedListSectionType.indentFocusedListItem,
    onKeyUp: unorderedListSectionType.onKeyUp,
    onKeyDown: unorderedListSectionType.onKeyDown,
    onKeyBackspace: unorderedListSectionType.onKeyBackspace,
    onKeyEnter: function(e) {},
    onKeyTab: unorderedListSectionType.onKeyTab
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/list/unordered_list_section_type.js":
/*!***************************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/list/unordered_list_section_type.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(/*! ../shared/shared */ "../structured-text-editor/src/section_types/shared/shared.js"),
    paragraphSectionType = __webpack_require__(/*! ../paragraph/paragraph_section_type */ "../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js");

var getSectionElement = function(existingSectionContent) {
    var el = document.createElement('ul');
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    el.onKeyEnter = module.exports.onKeyEnter;
    el.onKeyTab = module.exports.onKeyTab;
    el.onKeyBackspace = module.exports.onKeyBackspace;
    el.innerHTML = '<li>' + existingSectionContent + '</li>';
    return el;
}

module.exports = {

    name: 'ul',

    contentRules: {
        'ul': {
            tagName: 'ul',
            allowedAttributes: ['class'],
            allowedClassNames: ['focused'],
            allowedChildren: ['li', 'ul'],
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement
        },
        // The li content rules are defined in the ordered list section type
        // 'li': {}
    },

    enrichments: [],

    getSectionElement: getSectionElement,

    onKeyUp: paragraphSectionType.onKeyUp,
    onKeyDown: paragraphSectionType.onKeyDown,

    onKeyBackspace: function(e, editor) {
        var focusedSection = editor.focusedSection(),
            upperSection,
            allListItems,
            targetListItem = editor.caret.getContextElement('li'),
            targetListItemIndex,
            upperListItem;

        if(targetListItem && targetListItem.innerText.trim() === '') {
            upperSection = focusedSection.previousSibling,
            allListItems = focusedSection.querySelectorAll('li'),
            targetListItemIndex = allListItems.indexOf(targetListItem),
            upperListItem = allListItems[targetListItemIndex-1];

            if(upperListItem) {
                editor.caret.positionIn(upperListItem);
                targetListItem.remove();
                editor.replaceSectionWithHTML(focusedSection, focusedSection.outerHTML);
                e.preventDefault();
            } else if(upperSection) {
                targetListItem.remove();
                editor.replaceSectionWithHTML(focusedSection, focusedSection.outerHTML);
                editor.caret.positionIn(upperSection);
                e.preventDefault();
            } else {
                e.preventDefault();
            }
        }
    },

    onKeyEnter: function(e) {},
    onKeyTab: function(e, editor)  {
        if(!e.shiftKey) {
            module.exports.indentFocusedListItem(editor)
        } else {
            document.execCommand('outdent');
        }

        e.preventDefault();
    },

    indentFocusedListItem: function (editor) {
        var targetListItem = editor.caret.getContextElement('li'),
            previousListItem, nextListItem, parentElement,
            isTargetListItemEmpty = targetListItem.innerText === '';

        if(targetListItem) {
            previousListItem = targetListItem.previousSibling;
            nextListItem = targetListItem.nextSibling;
            parentElement = targetListItem.parentElement;
        }

        document.execCommand('indent');

        if(isTargetListItemEmpty) {
            if(previousListItem && previousListItem.nextSibling) {
                editor.caret.positionIn(previousListItem.nextSibling);
            } else if(nextListItem && nextListItem.previousSibling) {
                editor.caret.positionIn(nextListItem.previousSibling);
            } else if(!previousListItem && !nextListItem && parentElement && parentElement.firstChild) {
                editor.caret.positionIn(parentElement.firstChild);
            }
        }
    }
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/mermaid/mermaid_section_type.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/mermaid/mermaid_section_type.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var code2dia = __webpack_require__(/*! ../shared/code2dia_section_type */ "../structured-text-editor/src/section_types/shared/code2dia_section_type.js"),
    // mermaid = require('mermaid'), // make sure to load <script src="./mermaid.js" defer></script> in your html
    render;

function docReady(fn) {
    if (document.readyState === "complete" || document.readyState === "interactive") {
        setTimeout(fn, 1);
    } else {
        document.addEventListener("DOMContentLoaded", fn);
    }
}

docReady(function() {
    mermaid.initialize({ startOnLoad: false, 'font-size': '10px' })
})

render = function(renderEl, content) {
    var tmpContainer, id;

    if(content.trim().length === 0) {
        renderEl.innerHTML = 'Write some mermaid here <span class="arrow">&#10548;</span>';
    } else {
        renderEl.id = renderEl.id || 'test2';
        id = 'r' + renderEl.parentElement.id;
        renderEl.innerHTML = '';
        renderEl.classList.add('mermaid');

        try {
            mermaid.render(id, content, (re) => {
                renderEl.innerHTML = re;
            });
        } catch (ex) {
            renderEl.innerHTML = ex.message.replace(/\n/g, '<br/>');
        }

        tmpContainer = document.getElementById('d' + id);
        if(tmpContainer) {
            tmpContainer.remove();
        }
    }
}

module.exports = code2dia(render, 'mermaid', 'latex', 'image title')


/***/ }),

/***/ "../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js":
/*!***************************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/paragraph/paragraph_section_type.js ***!
  \***************************************************************************************/
/***/ ((module) => {

var getSectionElement = function(existingSectionContent) {
    existingSectionContent = existingSectionContent || '';
    existingSectionContent = existingSectionContent.replace(/<caption>.*?<\/caption>/, '');

    var el = document.createElement('p');
    el.innerHTML = existingSectionContent;
    el.onKeyUp = module.exports.onKeyUp;
    el.onKeyDown = module.exports.onKeyDown;
    return el;
}

module.exports = {

    name: 'p',

    contentRules: {
        'p': {
            tagName: 'p',
            allowedAttributes: ['class'],
            allowedClassNames: ['focused'],
            allowedChildren: ['#text', 'b', 'i', 'u', 'link', 'footnote', 'reference', 'inlinecode', 'inlineequation'],
            pruneSpaces: true,
            allowedToBeRoot: true,
            buildEmptyElement: getSectionElement
        }
    },

    enrichments: [],

    onKeyUp: function(e, editor) {
        if(editor.caret.isCollapsedAndPositionedAtTheFirstLineOf(editor.focusedSection())) {
            editor.moveCaretOneSectionUp('end');
            e.preventDefault();
        }
    },

    onKeyDown: function(e, editor) {
        if(editor.caret.isCollapsedAndPositionedAtTheLastLineOf(editor.focusedSection())) {
            editor.moveCaretOneSectionDown('preferredOrBeginning');
            e.preventDefault();
        }
    },

    getSectionElement: getSectionElement,
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/shared/code2dia_section_type.js":
/*!***********************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/shared/code2dia_section_type.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var HTMLRazor = __webpack_require__(/*! ../../../lib/html_razor/html_razor */ "../structured-text-editor/lib/html_razor/html_razor.js"),
    throttle = __webpack_require__(/*! ../../../lib/throttle/throttle */ "../structured-text-editor/lib/throttle/throttle.js"),
    codeSectionType = __webpack_require__(/*! ../code/code_section_type */ "../structured-text-editor/src/section_types/code/code_section_type.js"),
    primsjs = __webpack_require__(/*! prismjs */ "../structured-text-editor/node_modules/prismjs/prism.js"),
    uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js");

module.exports = function(render, tagName, syntaxHighlighting, defaultCaption) {
    var sectionType = {};

    var getSectionElement = function(existingSectionContent, directives, rule) {
        var el = document.createElement(rule.tagName),
            pre = document.createElement('pre')
            caption = document.createElement('caption'),
            inputEl = document.createElement('code');

        caption.classList.add('m2dia-caption');
        inputEl.classList.add('m2dia-code');
        pre.classList.add('m2dia-pre');

        caption.innerHTML = rule.defaultCaption || 'caption';

        pre.appendChild(inputEl);
        el.appendChild(pre);
        el.appendChild(caption);
        el.setAttribute('display-caption', 'Yes');
        el.classList.add(rule.tagName);
        el.classList.add('m2dia');
        el.id = uuid();

        el.onFocus = sectionType.onFocus;
        el.onKeyUp = sectionType.onKeyUp;
        el.onKeyDown = sectionType.onKeyDown;
        el.onKeyEnter = sectionType.onKeyEnter;
        el.onKeyTab = sectionType.onKeyTab;
        el.onKeyBackspace = sectionType.onKeyBackspace;
        el.onMarkupCleaningFinshed = sectionType.onMarkupCleaningFinshed;
        el.setContenteditable = sectionType.setContenteditable;
        el.sectionType = sectionType;

        return el;
    };

    Object.assign(sectionType, {
        name: tagName,

        contentRules: {
            'm2dia-pre': {
                tagName: 'pre',
                className: 'm2dia-pre',
                allowedAttributes: ['class'],
                allowedClassNames: ['m2dia-pre'],
                allowedChildren: ['m2dia-code'],
            },
            'm2dia-code': {
                tagName: 'code',
                className: 'm2dia-code',
                allowedClassNames: ['m2dia-code'],
                allowedAttributes: ['class'],
                allowedChildren: ['#text'],
            },
            'm2dia-caption': {
                tagName: 'caption',
                allowedAttributes: ['class'],
                className: 'm2dia-caption',
                allowedClassNames: ['m2dia-caption'],
                allowedChildren: ['#text', 'reference', 'inlineequation'],
                deleteIfEmpty: false,
                pruneSpaces: true,
            }
        },

        enrichments: [],

        onMarkupCleaningFinshed: function(sectionElement) {
            var codeEl = sectionElement.querySelector('code'),
                preEl = sectionElement.querySelector('pre'),
                renderEl = sectionElement.querySelector('.render'),
                lan = syntaxHighlighting,
                content;

            if(!codeEl) { return }

            if(!renderEl) {
                renderEl = document.createElement('div');
                renderEl.classList.add('render');
                renderEl.setAttribute('contenteditable', false);
                sectionElement.insertBefore(renderEl, preEl.nextSibling);
            }

            content = codeEl.innerHTML;
            content = HTMLRazor.prototype.strip(content);

            throttle(700, _ => render(renderEl, content))()

            if(lan && primsjs.languages[lan]) {
                content = primsjs.highlight(content, primsjs.languages[lan], lan);
                sectionElement.querySelector('code').innerHTML = content; 
            }
        },

        onFocus: function(el, editor, args) {
            var isCaretInsideCaption = (editor.sectionAtCaretPostion() === el && editor.caret.getContextElement(['caption'])),
                code = el.querySelector('code');

            if(!isCaretInsideCaption && code) {
                editor.caret.positionIn(code);
            }
        },

        getOptions: function(sectionElement) {
            return [
                {
                  name: 'displayCaption',
                  displayName: 'Display Caption',
                  allowedValues: ['Yes', 'No'],
                  defaultValue: sectionElement.getAttribute('display-caption')
                }
            ]
        },

        onOptionsChange: function(opt, editor) {
            var section = editor.focusedSection();
            if(opt.displayCaption === 'Yes' || opt.displayCaption === 'No') {
                section.setAttribute('display-caption', opt.displayCaption);
            }
        },

        onKeyTab: codeSectionType.onKeyTab,
        onKeyUp: codeSectionType.onKeyUp,
        onKeyDown: codeSectionType.onKeyDown,
        onKeyBackspace: codeSectionType.onKeyBackspace,
        onKeyEnter: codeSectionType.onKeyEnter,
        getSectionElement: getSectionElement,
    });

    sectionType.contentRules[tagName] = {
        tagName: tagName,
        className: tagName,
        allowedAttributes: ['class', 'display-caption', 'id'],
        allowedClassNames: ['focused', tagName, 'm2dia'],
        allowedChildren: ['m2dia-caption', 'm2dia-pre'],
        pruneSpaces: true,
        allowedToBeRoot: true,
        deleteIfEmpty: false,
        buildEmptyElement: sectionType.getSectionElement,
        defaultCaption: defaultCaption,
        buildAttributes: [
            {name: 'display-caption', build: function() {return 'Yes'}},
            {name: 'id', build: function() {return uuid()}}
        ]
    };

    sectionType.tagTransformations = {};
    sectionType.tagTransformations['/'+tagName+'/div.render'] = '#no-content';
    sectionType.tagTransformations['/'+tagName+'/pre/code'] = '#text-content';

    return sectionType;
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/shared/shared.js":
/*!********************************************************************!*\
  !*** ../structured-text-editor/src/section_types/shared/shared.js ***!
  \********************************************************************/
/***/ ((module) => {

module.exports = {
    onKeyUpForFreestyleSections: function(e, editor) {
        var focusedSection = editor.focusedSection(),
            upperSection = focusedSection.previousSibling;

        if(!upperSection) { return true; }

        if(editor.caret.isCollapsedAndPositionedAtTheBeginningOf(focusedSection)) {
            editor.placeCaretIntoSection(upperSection);

            // trigger the removal of empty sections
            editor.replaceSectionWithHTML(focusedSection, focusedSection.outerHTML);
            e.preventDefault();
        }
    },

    onKeyDownForFreestyleSections: function(e, editor) {
        var focusedSection = editor.focusedSection(),
            lowerSection = focusedSection.nextSibling;

        if(!lowerSection) { return true; }

        if(editor.caret.isCollapsedAndPositionedAtTheEndOf(focusedSection)) {
            editor.placeCaretIntoSection(lowerSection);

            // trigger the removal of empty sections
            editor.replaceSectionWithHTML(focusedSection, focusedSection.outerHTML);
            e.preventDefault();
        }
    },

    onKeyEnterForFreestyleSections: function(e, editor) {
        document.execCommand('insertHTML', false, '&NewLine;');

        var char = editor.caret.getPrecedingCharacter(editor.focusedSection());
        if(char !== '\n') {
            document.execCommand('insertHTML', false, '&NewLine;');
        }

        e.preventDefault();

        // We do not have to set the content of the editor because execcommand triggers
        // an input event which will handle the content change on the editor site.
    },

    onKeyBackspaceForBackspaceDeletableSections: function(e, editor) {
        var focusedSection = editor.focusedSection(),
            upperSection = focusedSection.previousSibling;

        if(!upperSection) { return true; }

        if(focusedSection.innerText.trim() === '') {
            editor.placeCaretIntoSection(upperSection);

            // trigger the removal of empty sections
            editor.replaceSectionWithHTML(focusedSection, focusedSection.outerHTML);
            e.preventDefault();
        }
    }
}


/***/ }),

/***/ "../structured-text-editor/src/section_types/table/table_section_type.js":
/*!*******************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/table/table_section_type.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js");
var utils = __webpack_require__(/*! ../../../lib/pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js");
var lastFocusedCell, focusedCell, onUnfocusTimeout;

var getSectionElement = function(existingSectionContent) {
    var tableElement = document.createElement('table');
    tableElement.id = uuid();
    tableElement.sectionType = module.exports;
    tableElement.setAttribute('display-heading', 'Yes');
    tableElement.setAttribute('display-caption', 'Yes');

    tableElement.onKeyUp = module.exports.onKeyUp;
    tableElement.onKeyDown = module.exports.onKeyDown;
    tableElement.onKeyTab = module.exports.onKeyTab;
    tableElement.onKeyCombination = module.exports.onKeyCombination;
    tableElement.onKeyBackspace = module.exports.onKeyBackspace;
    tableElement.onKeyEnter = module.exports.onKeyEnter;
    tableElement.onSelectionChange = module.exports.onSelectionChange;
    tableElement.onUnfocus = module.exports.onUnfocus;
    tableElement.onWindowResize = module.exports.onWindowResize;

    tableElement.innerHTML = '<tbody>' +
                             '  <tr><td></td><td></td></tr>' +
                             '  <tr><td></td><td></td></tr>' +
                             '  <tr><td></td><td></td></tr>' +
                             '</tbody>' +
                             '<caption>table title</caption>';

    return tableElement;
}

var getAddRowBelowButton = function(editor) {
    var btn = document.querySelector('#tableAddRowBelowBtn');

    if(btn) {
        return btn;
    }

    var btn = document.createElement('span');
    btn.id = 'tableAddRowBelowBtn';
    btn.innerHTML = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="12.67" height="19.69" viewBox="0 0 12.67 19.69"><defs><style>.cls-1,.cls-3{fill:none;}.cls-1{stroke:#231f20;}.cls-1,.cls-2,.cls-3{stroke-miterlimit:10;}.cls-2{fill:#98cf8d;}.cls-2,.cls-3{stroke:#297027;}</style></defs><polyline class="cls-1" points="5.98 1.26 5.98 7.07 5.98 12.72 5.98 18.42"/><path class="cls-1" d="M327.38,413.59" transform="translate(-326.88 -401.94)"/><rect class="cls-1" x="0.5" y="1.26" width="10.97" height="17.17"/><polyline class="cls-1" points="11.47 7.07 5.98 7.07 0.5 7.07"/><polyline class="cls-1" points="11.47 12.72 5.98 12.72 0.5 12.72"/><path class="cls-2" d="M339.05,402.44c0,2.07,0,4.13-.05,6.19h-6.13v-6.19Z" transform="translate(-326.88 -401.94)"/><path class="cls-2" d="M339,408.63c0,2.25,0,4.5-.06,6.75h-6.07v-6.75Z" transform="translate(-326.88 -401.94)"/><path class="cls-2" d="M338.94,415.38c0,1.92,0,3.83,0,5.75h-6v-5.75Z" transform="translate(-326.88 -401.94)"/><line class="cls-3" x1="5.99" y1="6.69" x2="5.98" y2="6.69"/><line class="cls-3" x1="5.99" y1="13.44" x2="5.98" y2="13.44"/></svg>';

    btn.onmousedown = function(e) {
        setTimeout(function() {
            module.exports.addRow(undefined, editor);
        }, 100);
    }

    return btn;
}

var getAddRowAboveButton = function(editor) {
    var btn = document.querySelector('#tableAddRowAboveBtn');

    if(btn) {
        return btn;
    }

    var btn = document.createElement('span');
    btn.id = 'tableAddRowAboveBtn';
    btn.innerHTML = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="12.37" height="19.69" viewBox="0 0 12.37 19.69"><defs><style>.cls-1,.cls-3{fill:none;}.cls-1{stroke:#231f20;}.cls-1,.cls-2,.cls-3{stroke-miterlimit:10;}.cls-2{fill:#98cf8d;}.cls-2,.cls-3{stroke:#297027;}</style></defs><path class="cls-1" d="M300.83,397.41" transform="translate(-299.93 -385.76)"/><rect class="cls-1" x="0.9" y="1.26" width="10.97" height="17.17"/><polyline class="cls-1" points="6.38 1.26 6.38 7.07 6.38 12.72 6.38 18.42"/><polyline class="cls-1" points="11.87 7.07 6.38 7.07 0.9 7.07"/><polyline class="cls-1" points="11.87 12.72 6.38 12.72 0.9 12.72"/><path class="cls-2" d="M306.61,386.26c0,2.06,0,4.13-.05,6.19h-6.13v-6.19Z" transform="translate(-299.93 -385.76)"/><path class="cls-2" d="M306.56,392.45q0,3.38-.05,6.75h-6.08v-6.75Z" transform="translate(-299.93 -385.76)"/><path class="cls-2" d="M306.51,399.2c0,1.92,0,3.83,0,5.75h-6V399.2Z" transform="translate(-299.93 -385.76)"/><line class="cls-3" x1="0.5" y1="6.69" x2="0.49" y2="6.69"/><line class="cls-3" x1="0.5" y1="13.44" x2="0.49" y2="13.44"/></svg>';

    btn.onmousedown = function(e) {
        setTimeout(function() {
            module.exports.addRow(undefined, editor, true);
        }, 100);
    }

    return btn;
}

var getDeleteRowButton = function(editor) {
    var btn = document.querySelector('#tableDeleteRowBtn');

    if(btn) {
        return btn;
    }

    var btn = document.createElement('span');
    btn.id = 'tableDeleteRowBtn';
    btn.innerHTML = '<svg data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="17.96" height="19.69" viewBox="0 0 17.96 19.69"><defs></defs><rect class="cls-1-red" x="0.5" y="1.36" width="16.96" height="16.96"/><path class="cls-1-red" d="M316.57,393" transform="translate(-295.66 -385.76)"/><polyline class="cls-1-red" points="0.5 7.27 5.99 7.27 11.91 7.27 17.47 7.27"/><polyline class="cls-1-red" points="0.5 12.62 5.99 12.62 11.91 12.62 17.47 12.62"/><polyline class="cls-1-red" points="5.99 1.36 5.99 7.27 5.99 12.62 5.99 18.32"/><polyline class="cls-1-red" points="11.91 1.36 11.91 7.27 11.91 12.62 11.91 18.32"/><path class="cls-2-red" d="M307.86,386.26c0,2.06,0,4.13-.05,6.19h-6.13v-6.19Z" transform="translate(-295.66 -385.76)"/><path class="cls-2-red" d="M307.81,392.45q0,3.38-.05,6.75h-6.08v-6.75Z" transform="translate(-295.66 -385.76)"/><path class="cls-2-red" d="M307.76,399.2c0,1.92,0,3.83-.05,5.75h-6V399.2Z" transform="translate(-295.66 -385.76)"/><line class="cls-2-red" x1="6.02" y1="6.69" x2="6.01" y2="6.69"/><line class="cls-2-red" x1="6.02" y1="13.44" x2="6.01" y2="13.44"/></svg>';

    btn.onmousedown = function(e) {
        setTimeout(function() {
            module.exports.deleteRow(undefined, editor);
        }, 100);
    }

    return btn;
}

var getAddColumnLeftButton = function(editor) {
    var btn = document.querySelector('#tableAddColumnLeftBtn');

    if(btn) {
        return btn;
    }

    var btn = document.createElement('span');
    btn.id = 'tableAddColumnLeftBtn';
    btn.innerHTML = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="12.37" height="19.69" viewBox="0 0 12.37 19.69"><defs><style>.cls-1,.cls-3{fill:none;}.cls-1{stroke:#231f20;}.cls-1,.cls-2,.cls-3{stroke-miterlimit:10;}.cls-2{fill:#98cf8d;}.cls-2,.cls-3{stroke:#297027;}</style></defs><path class="cls-1" d="M300.83,397.41" transform="translate(-299.93 -385.76)"/><rect class="cls-1" x="0.9" y="1.26" width="10.97" height="17.17"/><polyline class="cls-1" points="6.38 1.26 6.38 7.07 6.38 12.72 6.38 18.42"/><polyline class="cls-1" points="11.87 7.07 6.38 7.07 0.9 7.07"/><polyline class="cls-1" points="11.87 12.72 6.38 12.72 0.9 12.72"/><path class="cls-2" d="M306.61,386.26c0,2.06,0,4.13-.05,6.19h-6.13v-6.19Z" transform="translate(-299.93 -385.76)"/><path class="cls-2" d="M306.56,392.45q0,3.38-.05,6.75h-6.08v-6.75Z" transform="translate(-299.93 -385.76)"/><path class="cls-2" d="M306.51,399.2c0,1.92,0,3.83,0,5.75h-6V399.2Z" transform="translate(-299.93 -385.76)"/><line class="cls-3" x1="0.5" y1="6.69" x2="0.49" y2="6.69"/><line class="cls-3" x1="0.5" y1="13.44" x2="0.49" y2="13.44"/></svg>';

    btn.onmousedown = function(e) {
        setTimeout(function() {
            module.exports.addColumn(undefined, editor, true);
        }, 100);
    }

    return btn;
}

var getAddColumnRightButton = function(editor) {
    var btn = document.querySelector('#tableAddColumnRightBtn');

    if(btn) {
        return btn;
    }

    var btn = document.createElement('span');
    btn.id = 'tableAddColumnRightBtn';
    btn.innerHTML = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="12.67" height="19.69" viewBox="0 0 12.67 19.69"><defs><style>.cls-1,.cls-3{fill:none;}.cls-1{stroke:#231f20;}.cls-1,.cls-2,.cls-3{stroke-miterlimit:10;}.cls-2{fill:#98cf8d;}.cls-2,.cls-3{stroke:#297027;}</style></defs><polyline class="cls-1" points="5.98 1.26 5.98 7.07 5.98 12.72 5.98 18.42"/><path class="cls-1" d="M327.38,413.59" transform="translate(-326.88 -401.94)"/><rect class="cls-1" x="0.5" y="1.26" width="10.97" height="17.17"/><polyline class="cls-1" points="11.47 7.07 5.98 7.07 0.5 7.07"/><polyline class="cls-1" points="11.47 12.72 5.98 12.72 0.5 12.72"/><path class="cls-2" d="M339.05,402.44c0,2.07,0,4.13-.05,6.19h-6.13v-6.19Z" transform="translate(-326.88 -401.94)"/><path class="cls-2" d="M339,408.63c0,2.25,0,4.5-.06,6.75h-6.07v-6.75Z" transform="translate(-326.88 -401.94)"/><path class="cls-2" d="M338.94,415.38c0,1.92,0,3.83,0,5.75h-6v-5.75Z" transform="translate(-326.88 -401.94)"/><line class="cls-3" x1="5.99" y1="6.69" x2="5.98" y2="6.69"/><line class="cls-3" x1="5.99" y1="13.44" x2="5.98" y2="13.44"/></svg>';

    btn.onmousedown = function(e) {
        setTimeout(function() {
            module.exports.addColumn(undefined, editor);
        }, 100);
    }

    return btn;
}

var getDeleteColumnButton = function(editor) {
    var btn = document.querySelector('#tableDeleteColumnBtn');

    if(btn) {
        return btn;
    }

    var btn = document.createElement('span');
    btn.id = 'tableDeleteColumnBtn';
    btn.innerHTML = '<svg data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="17.96" height="19.69" viewBox="0 0 17.96 19.69"><defs></defs><rect class="cls-1-red" x="0.5" y="1.36" width="16.96" height="16.96"/><path class="cls-1-red" d="M316.57,393" transform="translate(-295.66 -385.76)"/><polyline class="cls-1-red" points="0.5 7.27 5.99 7.27 11.91 7.27 17.47 7.27"/><polyline class="cls-1-red" points="0.5 12.62 5.99 12.62 11.91 12.62 17.47 12.62"/><polyline class="cls-1-red" points="5.99 1.36 5.99 7.27 5.99 12.62 5.99 18.32"/><polyline class="cls-1-red" points="11.91 1.36 11.91 7.27 11.91 12.62 11.91 18.32"/><path class="cls-2-red" d="M307.86,386.26c0,2.06,0,4.13-.05,6.19h-6.13v-6.19Z" transform="translate(-295.66 -385.76)"/><path class="cls-2-red" d="M307.81,392.45q0,3.38-.05,6.75h-6.08v-6.75Z" transform="translate(-295.66 -385.76)"/><path class="cls-2-red" d="M307.76,399.2c0,1.92,0,3.83-.05,5.75h-6V399.2Z" transform="translate(-295.66 -385.76)"/><line class="cls-2-red" x1="6.02" y1="6.69" x2="6.01" y2="6.69"/><line class="cls-2-red" x1="6.02" y1="13.44" x2="6.01" y2="13.44"/></svg>';

    btn.onmousedown = function(e) {
        setTimeout(function() {
            module.exports.deleteColumn(undefined, editor);
        }, 100);
    }

    return btn;
}

var getHorizontalControlsBar = function(editor) {
    var bar = document.querySelector('#horizontalTableControlsBar');

    if(bar) {
        return bar;
    }

    bar = document.createElement('div');
    bar.id = 'horizontalTableControlsBar';
    bar.classList.add('tableControlsBar');

    var arrow = document.createElement('div');
    arrow.classList.add('arrow')

    bar.appendChild(getAddColumnLeftButton(editor));
    bar.appendChild(getDeleteColumnButton(editor));
    bar.appendChild(getAddColumnRightButton(editor));
    bar.appendChild(arrow);

    bar.onclick = function(e) {
        e.preventDefault();
        return false;
    }

    document.body.appendChild(bar);

    return bar;
}

var getVerticalControlsBar = function(editor) {
    var bar = document.querySelector('#verticalTableControlsBar');

    if(bar) {
        return bar;
    }

    bar = document.createElement('div');
    bar.id = 'verticalTableControlsBar';
    bar.classList.add('tableControlsBar')

    var arrow = document.createElement('div');
    arrow.classList.add('arrow')

    bar.appendChild(getAddRowAboveButton(editor));
    bar.appendChild(getDeleteRowButton(editor));
    bar.appendChild(getAddRowBelowButton(editor));
    bar.appendChild(arrow);

    bar.onclick = function(e) {
        e.preventDefault();
        return false;
    }

    document.body.appendChild(bar);

    return bar;
}

Object.assign(module.exports, {

    name: 'table',

    contentRules: {
        'table': {
            tagName: 'table',
            allowedAttributes: ['class', 'display-heading', 'display-caption', 'id'],
            allowedClassNames: ['focused'],
            allowedChildren: ['tbody', 'caption'],
            childrenCardinality: {'caption': {max: 1}},
            allowedToBeRoot: true,
            deleteIfEmpty: false,
            buildEmptyElement: getSectionElement,
            buildAttributes: [
                {name: 'id', build: function() {return uuid()}},
                {name: 'display-heading', build: function() {return 'Yes'}},
                {name: 'display-caption', build: function() {return 'Yes'}}
            ]
        },
        'caption': {
            tagName: 'caption',
            allowedChildren: ['#text', 'reference', 'inlineequation'],
            deleteIfEmpty: false,
            pruneSpaces: true,
        },
        'tbody': {
            tagName: 'tbody',
            allowedSuccessors: ['caption'],
            allowedChildren: ['tr'],
        },
        'tr': {
            tagName: 'tr',
            allowedChildren: ['td'],
        },
        'td': {
            tagName: 'td',
            allowedChildren: ['#text', 'b', 'i', 'u', 'link', 'footnote', 'reference', 'inlinecode', 'inlineequation'],
            doNotBreakOutRootElements: true,
            pruneSpaces: true
        }
    },

    getOptions: function(sectionElement) {
        return [
            {
              name: 'displayHeading',
              displayName: 'Display Head Row',
              allowedValues: ['Yes', 'No'],
              defaultValue: sectionElement.getAttribute('display-heading')
            },
            {
              name: 'displayCaption',
              displayName: 'Display Table Caption',
              allowedValues: ['Yes', 'No'],
              defaultValue: sectionElement.getAttribute('display-caption')
            }
        ]
    },

    onFocus: function(el, editor, args) {
        var td = el.querySelector('td'),
            isCaretInsideTable = (editor.sectionAtCaretPostion() === el && editor.caret.getContextElement(['td', 'caption'])),
            hasBeenFocusedAfterSectionTypeChange = args.action === 'changeFocusedSectionType';

        if(hasBeenFocusedAfterSectionTypeChange || !isCaretInsideTable) {
            td && editor.caret.positionIn(td);
        }
    },

    onOptionsChange: function(opt, editor) {
        var section = editor.focusedSection();
        if(opt.displayHeading === 'Yes' || opt.displayHeading === 'No') {
            section.setAttribute('display-heading', opt.displayHeading);
        }

        if(opt.displayCaption === 'Yes' || opt.displayCaption === 'No') {
            section.setAttribute('display-caption', opt.displayCaption);
        }
    },

    getVerticalNeighborField: function(td, lowerNeighbor) {
        if(!td) { return }

        var xIndex = Array.prototype.indexOf.call(td.parentElement.children, td),
            neighborRow = td.parentNode && td.parentNode[(lowerNeighbor ? 'nextSibling' : 'previousSibling')],
            colspan, tmpField;

        if(!neighborRow) { return }

        for(var i=0; i<=xIndex;) {
            colspan = parseInt(neighborRow.children[i].getAttribute('colspan')) || 1;
            tmpField = neighborRow.children[i];
            i += colspan;
        }

        return tmpField;
    },

    getNextField: function(td) {
        if(td.nextSibling) {
            return td.nextSibling;
        }

        if(td.parentElement &&
           td.parentElement.nextSibling &&
           td.parentElement.nextSibling.children &&
           td.parentElement.nextSibling.children[0] &&
           td.parentElement.nextSibling.children[0].tagName === 'TD') {
             return td.parentElement.nextSibling.children[0];
        }
    },

    getPreviousField: function(td) {
        if(td.previousSibling) {
            return td.previousSibling;
        }

        if(td.parentElement &&
           td.parentElement.previousSibling &&
           td.parentElement.previousSibling.children &&
           td.parentElement.previousSibling.children[td.parentElement.previousSibling.children.length-1] &&
           td.parentElement.previousSibling.children[td.parentElement.previousSibling.children.length-1].tagName === 'TD') {
             return td.parentElement.previousSibling.children[td.parentElement.previousSibling.children.length-1];
        }
    },

    onKeyUp: function(e, editor) {
        var targetField = module.exports.getVerticalNeighborField(editor.caret.getContextElement('td'));

        if(targetField) {
            editor.caret.positionIn(targetField);
        } else {
            editor.placeCaretIntoSection(editor.focusedSection().previousSibling);
        }

        e.preventDefault();
    },

    onKeyDown: function(e, editor) {
        var targetField = module.exports.getVerticalNeighborField(editor.caret.getContextElement('td'), true);

        if(targetField) {
            editor.caret.positionIn(targetField);
        } else {
            editor.placeCaretIntoSection(editor.focusedSection().nextSibling);
        }

        e.preventDefault();
    },

    onKeyTab: function(e, editor) {

        var getTargetField = e.shiftKey ? module.exports.getPreviousField: module.exports.getNextField,
            targetField = getTargetField(editor.caret.getContextElement('td'));

        if(targetField) {
            editor.caret.positionIn(targetField);
        }

        e.preventDefault();
    },

    onKeyEnter: function(e) {
        e.preventDefault();
    },

    onWindowResize: function(editor) {
        module.exports.onSelectionChange(editor, true);
    },

    onSelectionChange: function(editor, force) {
        var cell = editor.caret.getContextElement('td');

        if(!cell) {
            this.onUnfocus(editor);
            return;
        }

        var table = cell.parentElement.parentElement.parentElement;

        if(focusedCell !== cell || force) {
            window.clearTimeout(onUnfocusTimeout);
            var hbar = getHorizontalControlsBar(editor);
            var vbar = getVerticalControlsBar(editor);
            var tablePos = utils.getElementPosition(table);
            var cellPos = utils.getElementPosition(cell);

            hbar.style.opacity = 1;
            hbar.style.top = (tablePos.y - 32) + 'px';
            hbar.style.left = Math.floor(cellPos.x + ((cell.offsetWidth/2)-(hbar.offsetWidth/2))) + 'px';

            vbar.style.opacity = 1;
            vbar.style.top = Math.floor(cellPos.y + ((cell.offsetHeight/2)-(vbar.offsetHeight/2))) + 'px';
            vbar.style.left = (tablePos.x - 30) + 'px';
        }

        focusedCell = cell;
    },

    onUnfocus: function(editor) {
        var hbar = getHorizontalControlsBar(editor);
        var vbar = getVerticalControlsBar(editor);

        lastFocusedCell = focusedCell;
        focusedCell = null;

        hbar.style.opacity = 0;
        vbar.style.opacity = 0;

        onUnfocusTimeout = window.setTimeout(function() {
            hbar.style.top = -1000 + 'px';
            hbar.style.left = -1000 + 'px';

            vbar.style.top = -1000 + 'px';
            vbar.style.left = -1000 + 'px';
        }, 100);
    },

    onKeyCombination: function(e, editor) {
        if((e.metaKey || e.ctrlKey) && !e.shiftKey && e.key === 'r') {
            module.exports.addRow(editor.caret.getContextElement('td'), editor);
            e.preventDefault();
        } else if((e.metaKey || e.ctrlKey) && !e.shiftKey && e.key === 'e') {
            module.exports.addColumn(editor.caret.getContextElement('td'), editor);
            e.preventDefault();
        } else if((e.metaKey || e.ctrlKey) && e.shiftKey && (e.key === 'e' || e.key === 'E') ) {
            module.exports.deleteColumn(editor.caret.getContextElement('td'), editor);
            e.preventDefault();
        } else if((e.metaKey || e.ctrlKey) && e.shiftKey && (e.key === 'r' || e.key === 'R') ) {
            module.exports.deleteRow(editor.caret.getContextElement('td'), editor);
            e.preventDefault();
        }
    },

    addRow: function(contextElement, editor, insertBefore) {
        var sel;
        if(!contextElement && !editor) { return }

        contextElement = contextElement || lastFocusedCell || editor.caret.getContextElement('td');

        if(!contextElement) {
            sel = window.getSelection();
            if(sel.anchorNode === sel.focusNode &&
               sel.anchorNode.tagName &&
               sel.anchorNode.tagName.toLowerCase() === 'tbody') {
                contextElement = sel.anchorNode.children[sel.anchorOffset].children[0];
            }
        }

        var colcount = contextElement.parentNode.children.length,
            currentTr = contextElement.parentNode,
            tbody = currentTr.parentNode,
            table = editor.sectionByChildNode(tbody),
            newTr = document.createElement('tr');

        for(let i=0; i<colcount; i++) {
            newTr.appendChild(document.createElement('td'));
        }

        tbody.insertBefore(newTr, insertBefore ? currentTr : currentTr.nextSibling);
        editor.replaceSectionWithHTML(table, table.outerHTML);
    },

    addColumn: function(contextElement, editor, insertLeft) {
        var sel;
        if(!contextElement && !editor) { return }
        contextElement = contextElement || lastFocusedCell || editor.caret.getContextElement('td');

        if(!contextElement) {
            sel = window.getSelection();
            if(sel.anchorNode === sel.focusNode &&
               sel.anchorNode.tagName &&
               sel.anchorNode.tagName.toLowerCase() === 'tr') {
                contextElement = sel.anchorNode.children[sel.anchorOffset];
            }
        }

        var colIndex = Array.prototype.indexOf.call(contextElement.parentNode.children, contextElement),
            tableRows = contextElement.parentNode.parentNode.children,
            table = contextElement.parentNode.parentNode.parentNode;

        Array.prototype.forEach.call(tableRows, function(tr) {
            tr.insertBefore(document.createElement('td'), insertLeft ? tr.children[colIndex] : tr.children[colIndex].nextSibling)
        });

        editor.replaceSectionWithHTML(table, table.outerHTML);
    },

    deleteColumn: function(contextElement, editor) {
        var sel;

        if(!contextElement && !editor) { return }

        contextElement = contextElement || lastFocusedCell || editor.caret.getContextElement('td');

        if(!contextElement) {
            sel = window.getSelection();
            if(sel.anchorNode === sel.focusNode &&
               sel.anchorNode.tagName &&
               sel.anchorNode.tagName.toLowerCase() === 'tr') {
                contextElement = sel.anchorNode.children[sel.anchorOffset];
            }
        }

        var columns = contextElement.parentNode.children,
            colIndex = Array.prototype.indexOf.call(columns, contextElement),
            tableRows = contextElement.parentNode.parentNode.children,
            table = contextElement.parentNode.parentNode.parentNode;

        if(columns.length <= 1) {
            return;
        }

        Array.prototype.forEach.call(tableRows, function(tr) {
            tr.removeChild(tr.children[colIndex])
        });
        editor.replaceSectionWithHTML(table, table.outerHTML);
    },

    deleteRow: function(contextElement, editor) {
        var sel, table;

        if(!contextElement && !editor) { return }

        contextElement = contextElement || lastFocusedCell || editor.caret.getContextElement('td');
        contextElement = contextElement.parentElement;

        if(!contextElement) {
            sel = window.getSelection();
            if(sel.anchorNode === sel.focusNode &&
               sel.anchorNode.tagName &&
               sel.anchorNode.tagName.toLowerCase() === 'tbody') {
                contextElement = sel.anchorNode.children[sel.anchorOffset];
            }
        }

        table = contextElement.parentNode.parentNode;

        if(contextElement.parentNode.children.length <= 1) {
            return;
        }

        contextElement.remove();
        editor.replaceSectionWithHTML(table, table.outerHTML);
    },

    onKeyBackspace: function(e, editor) {
        var sel,
            table = editor.caret.getContextElement('table'),
            caption = editor.caret.getContextElement('caption', window.getSelection(), []),
            td = editor.caret.getContextElement('td', window.getSelection(), []),
            inCaption = !!caption,
            el = td || caption,
            tableId = table.id,
            tr, trIndex, tdIndex;

        if(!el) return;

        if(el.innerText && el.innerText.length === 1) {
            if(!inCaption) {
                tr = td.parentElement;
                tdIndex = tr.children.indexOf(td);
                trIndex = tr.parentElement.children.indexOf(tr);
            }

            document.execCommand('delete');

            table = document.getElementById(tableId);

            if(!inCaption) {
                el = table.querySelector('tbody').children[trIndex].children[tdIndex];
            } else {
                el = table.querySelector('caption')
            }

            editor.caret.positionIn(el);

            e.preventDefault();
        } else if(!el.innerText || el.innerText.length === 0 || editor.caret.isCollapsedAndPositionedAtTheBeginningOf(caption, false)) {
            e.preventDefault();
        }
    },

    getSectionElement: getSectionElement
})


/***/ }),

/***/ "../structured-text-editor/src/section_types/toc/toc_section_type.js":
/*!***************************************************************************!*\
  !*** ../structured-text-editor/src/section_types/toc/toc_section_type.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var buildToC = __webpack_require__(/*! ../../../lib/toc_builder/toc_builder */ "../structured-text-editor/lib/toc_builder/toc_builder.js"),
    bibSectionType = __webpack_require__(/*! ../bibliographie/bibliographie_section_type */ "../structured-text-editor/src/section_types/bibliographie/bibliographie_section_type.js"),
    uuid = __webpack_require__(/*! uuid/v1 */ "../structured-text-editor/node_modules/uuid/v1.js");

function getSectionElement() {
    var  el = document.createElement('nav'),
         heading = document.createElement('h2');

    heading.setAttribute('contenteditable', 'true');
    heading.classList.add('toc-heading');
    heading.classList.add('no-toc-listing');
    heading.innerHTML = 'Table of Contents';

    el.onKeyBackspace = module.exports.onKeyBackspace;
    el.sectionType = module.exports;
    el.classList.add('toc');
    el.appendChild(heading);

    return el;
}

module.exports = {

    name: 'toc',

    preferredCaretPositioning: 'end',

    contentRules: {
        'toc': {
            tagName: 'nav',
            className: 'toc',
            allowedAttributes: ['class', 'contenteditable'],
            allowedClassNames: ['focused', 'toc'],
            allowedChildren: ['toc-heading'],
            allowedToBeRoot: true,
            deleteIfEmpty: false,
            buildEmptyElement: getSectionElement
        },
        'toc-heading': {
            tagName: 'h2',
            className: 'toc-heading',
            allowedAttributes: ['id', 'class', 'contenteditable', 'unnumbered-heading'],
            allowedClassNames: ['toc-heading', 'no-toc-listing'],
            allowedChildren: ['#text'],
            pruneSpaces: true,
            buildAttributes: [
                {name: 'id', build: function() {return uuid()}},
                {name: 'unnumbered-heading', build: function() {return 'Yes'}}
            ]
        },
    },

    enrichments: [],

    getSectionElement: getSectionElement,

    onKeyBackspace: bibSectionType.onKeyBackspace,

    onFocus: function(el, editor, args) {
        var toCHeading = el.querySelector('h2'),
            isCaretInsideSection = (editor.sectionAtCaretPostion() === el && editor.caret.getContextElement('h2')),
            hasBeenFocusedAfterSectionTypeChange = args.action === 'changeFocusedSectionType';

        if(hasBeenFocusedAfterSectionTypeChange || !isCaretInsideSection) {
            toCHeading && editor.caret.positionIn(toCHeading);
        }
    },

    onEditorContentChanged: function(modificationLog) {
        if(!modificationLog.mightIncludeHeadingUpdates && !modificationLog.mightIncludeTableOfContentUpdates) {
            return;
        }

        var tocSections = document.querySelectorAll('nav.toc'),
            newContent, tmpEl, toc;

        if(tocSections.length === 0) { return; }

        toc = buildToC(document.querySelector('.structured-text-editor'), {withLinks: true, startNumberingAtLevel: 2});
        toc.querySelectorAll('ol, li').forEach(function(entry) { entry.classList.add('toc') });
        toc.classList.add('toc');

        if(toc.innerHTML === '') {
            newContent = '<span class="hint">Insert some headings into your document to see a table of contents here.</span>';
        } else {
            newContent = toc.outerHTML;
        }

        tocSections.forEach(function(tocSection) {
            tocSection.summarizedContentLength = undefined;
            tmpEl = tocSection.querySelector('.toc-content');

            if(!tmpEl) {
                tmpEl = document.createElement('span');
                tmpEl.classList.add('toc-content');
                tocSection.appendChild(tmpEl);
            }

            tmpEl.setAttribute('contenteditable', 'false');

            if(tmpEl.innerHTML !== newContent) {
                tmpEl.innerHTML = newContent;
            }
        });
    }
}


/***/ }),

/***/ "../structured-text-editor/src/text_enrichment_control.js":
/*!****************************************************************!*\
  !*** ../structured-text-editor/src/text_enrichment_control.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Caret = __webpack_require__(/*! ./caret */ "../structured-text-editor/src/caret.js"),
    HTMLRazor = __webpack_require__(/*! ../lib/html_razor/html_razor */ "../structured-text-editor/lib/html_razor/html_razor.js"),
    utils = __webpack_require__(/*! ../lib/pixelschubser/utils */ "../structured-text-editor/lib/pixelschubser/utils.js"),
    // katex = require('katex'), // make sure to load <script src="./katex.js" defer></script> in your html
    latexCheatsheet = __webpack_require__(/*! ../assets/latex_cheatsheet */ "../structured-text-editor/assets/latex_cheatsheet.js"),
    DeclarativForm = __webpack_require__(/*! ../lib/declarativ_forms/src/declarativ_form */ "../structured-text-editor/lib/declarativ_forms/src/declarativ_form.js"),
    { getReferenceSourcesFields, syncAllSources } = __webpack_require__(/*! ./references/reference_sources */ "../structured-text-editor/src/references/reference_sources/index.js")

function TextEnrichmentControl(editor) {
    var self = this;

    this.caret = new Caret(editor);
    this.editor = editor;
    this.visible = false;
    this.domElement = document.createElement('div');
    this.domElement.className += ' textEnrichmentControl';
    this.hide();

    document.body.appendChild(this.domElement);

    document.addEventListener ("keydown", function (e) {
        if(e.code === 'Escape') {
            self.editor.unfreezeSelection();
            self.hide(true);
        }

        return true;
    });

    this.enrichments = [
        {className: 'italic',     command: 'italic',        diplayName: '<i>I</i>', allowedContext: ['p', 'table', 'ol', 'ul'], notAllowedContext: ['caption', 'nav']},
        {className: 'bold',       command: 'bold',          diplayName: '<b>B</b>', allowedContext: ['p', 'table', 'ol', 'ul'], notAllowedContext: ['caption', 'nav']},
        {className: 'underline',  command: 'underline',     diplayName: '<u>U</u>', allowedContext: ['p', 'table', 'ol', 'ul'], notAllowedContext: ['caption', 'nav']},
        {
            className: 'code',
            diplayName: '<code class="code-text-enrichment-button"><i class="fas fa-code"></i></code>',
            allowedContext: ['p', 'table', 'ol', 'ul'],
            notAllowedContext: ['caption', 'nav'],
            action: function() {
                var sel = window.getSelection(),
                    range = sel.getRangeAt(0),
                    newElement = document.createElement('inlinecode'),
                    section = self.editor.focusedSection(),
                    contextEl = self.caret.getContextElement('inlinecode'),
                    allCodesInSection, content, textNodeLeft, textNodeRight;

                if(contextEl) {
                    content = range.extractContents();
                    sel = window.getSelection();
                    range = sel.getRangeAt(0);

                    textNodeLeft = sel.focusNode;
                    textNodeRight = textNodeLeft.splitText(sel.focusOffset);

                    newElement.appendChild(textNodeRight);
                    contextEl.parentNode.insertBefore(newElement, contextEl.nextSibling);
                    contextEl.parentNode.insertBefore(content, contextEl.nextSibling);
                } else {
                    newElement.appendChild(range.extractContents());
                    range.insertNode(newElement);

                    allCodesInSection = section.querySelectorAll('inlinecode');

                    for(let i=0; i<allCodesInSection.length; i++) {
                        let next = allCodesInSection[i].nextSibling;

                        if(next && next.tagName === 'INLINECODE') {
                            allCodesInSection[i].innerHTML += next.innerHTML;
                            next.remove();
                            allCodesInSection = section.querySelectorAll('inlinecode');
                            i=-1;
                        }

                        if(next && next.nodeType === Node.TEXT_NODE && next.textContent === '') {
                            next.remove();
                            allCodesInSection = section.querySelectorAll('inlinecode');
                            i=-1;
                        }
                    }
                }

                self.hide();
            }
        },
        {
            className: 'link',
            command: 'createLink',
            diplayName: '<i class="fas fa-link fa-xs"></i>',
            allowedContext: ['p', 'table', 'ol', 'ul'],
            notAllowedContext: ['a', 'caption', 'nav'],
            arguments: [{name: 'url', placeholder: 'http://...', displayName: 'URL', type: 'text'}]
        },
        {
            className: 'unlink',
            rangeRequire: false,
            diplayName: '<i class="fas fa-unlink fa-xs"></i>',
            allowedContext: 'a',
            notAllowedContext: ['nav'],
            action: function(contextElement) {
                var parent = contextElement.parentNode;
                while (contextElement.firstChild) parent.insertBefore(contextElement.firstChild, contextElement);
                parent.removeChild(contextElement);
                self.hide();
            }
        },
        {
            rangeRequire: false,
            className: 'visit-link',
            diplayName: '<i class="fas fa-external-link-alt fa-xs"></i>',
            allowedContext: 'a',
            notAllowedContext: ['nav'],
            action: function(contextElement) {
                if(navigator && navigator.userAgent && navigator.userAgent.match('MonsterWriter')) {
                    var prefix = ''
                    if(!contextElement.getAttribute('href').match(/^https?:\/\//i)) {
                        prefix = 'https://'
                    }
                    // require('electron').shell.openExternal(prefix + contextElement.getAttribute('href'))
                } else {
                    window.open(contextElement.getAttribute('href'))
                }
            }
        },
        {
            className: 'edit-footnote',
            rangeRequire: false,
            diplayName: '<i class="fas fa-edit fa-xs"></i>',
            allowedContext: '.footnote',
            notAllowedContext: ['caption'],
            arguments: [{
                name: 'note',
                placeholder: 'footnote',
                displayName: 'Footnote',
                largetext: true,
                defaultValue: function(contextElement) {
                    if(!(contextElement && contextElement.dataset && contextElement.dataset.note)) {
                        return '';
                    }

                    return utils.attributeSaveStringToString((new HTMLRazor).strip(contextElement.dataset.note));
                }
            }],
            action: function(contextElement, argValue) {
                if(!argValue.note) return;
                if(typeof argValue.note !== 'string') return;
                if(argValue.note.trim() === '') return;

                contextElement.setAttribute('data-note', utils.stringToAttributeSaveString(argValue.note));
            }
        },
        {
            className: 'footnote-content',
            rangeRequire: false,
            diplayName: function(contextElement) {
                return contextElement.innerText + ': ' + utils.attributeSaveStringToHTMLEncoded(contextElement.dataset.note);
            },
            allowedContext: '.footnote',
            action: function() {}
        },
        {
            rangeRequire: false,
            insertAction: true,
            className: 'footnote',
            diplayName: 'fn<sup>*</sup>',
            allowedContext: ['p', 'table', 'ol', 'ul'],
            notAllowedContext: ['caption', 'nav'],
            arguments: [{name: 'note', placeholder: 'footnote', displayName: 'Footnote', largetext: true}],
            action: function(contextElement, argValue) {
                if(!argValue.note) return;
                if(typeof argValue.note !== 'string') return;
                if(argValue.note.trim() === '') return;

                var node = document.createElement('span');

                node.classList.add('footnote');
                node.setAttribute('data-note', utils.stringToAttributeSaveString(argValue.note));
                node.setAttribute('contenteditable', false);
                self.caret.insertNode(node);
            }
        },
        {
            rangeRequire: false,
            insertAction: true,
            className: 'ref',
            diplayName: 'ref',
            allowedContext: ['p', 'table', 'ol', 'ul', 'citesrc', 'caption', 'figcaption'],
            notAllowedContext: ['a', 'blockquote', 'code'],
            notFocusFirstInput: true,
            arguments: [
                {
                    allowedValues: function() { return self.editor.reference.getValuesForCrossReferenceSelectBox() },
                    isActive: function() { return self.editor.reference.getValuesForCrossReferenceSelectBox().length },
                    name: 'cross-ref',
                    displayName: 'Reference a part of your document (figures, tables, ...):',
                    tab: 'Cross-Reference'
                },
                {
                    name: 'no-cross-ref-available-hint',
                    message: '<div class="no-data-hint"><div class="no-data-icon"></div><div class="no-data-message-heading">No Cross-References Available!</div><div class="no-data-message">Once you have inserted a heading, table, image, etc. into your document, you will be able to reference/select it here.</div></div>',
                    isActive: function() { return !self.editor.reference.getValuesForCrossReferenceSelectBox().length },
                    tab: 'Cross-Reference'
                },
                {
                    reloadOnChangeOf: ['fetch-ref-btn', 'manage-ref-btn'],
                    allowedValues: function() { return self.editor.reference.getValuesForExistingReferenceSelectBox() },
                    isActive: function() { return self.editor.reference.areExistingReferencesAvailable() },
                    name: 'existing-ref',
                    displayName: 'Reference work you\'ve referenced before:',
                    tab: 'Find Reference'
                },
                {
                    name: 'no-existing-reference-available-hint',
                    message: '<div class="no-data-hint"><div class="no-data-icon"></div><div class="no-data-message-heading">No References Available!</div><div class="no-data-message">Select the tab "Add Reference" to insert a new reference. The next time you want to reference the same work, it will show up here.</div></div>',
                    isActive: function() { return !self.editor.reference.areExistingReferencesAvailable() },
                    tab: 'Find Reference'
                },
                {
                    name: 'fetch-ref-btn',
                    isActive: function() { return self.editor.reference.areExistingReferencesAvailable() },
                    render: function(dom, formData, dlFrom) {
                        dom.innerHTML = ''
                        const addRefSrcBtn = document.createElement('div');
                        addRefSrcBtn.classList.add('fetch-external-ref-btn');
                        addRefSrcBtn.innerHTML = 'Fetch Newest Data From Reference Sources';

                        addRefSrcBtn.onclick = async function() {
                            if(addRefSrcBtn.classList.contains('fetch-external-ref-btn-loading')) {
                                return;
                            }

                            const extRefField = dlFrom.fields.find(field => field.name === 'existing-ref');
                            extRefField.domElement.setLoadingStatus();

                            addRefSrcBtn.classList.add('fetch-external-ref-btn-loading');
                            await syncAllSources(self.editor.reference.store);
                            await self.editor.reference.store.initCache();
                            await self.editor.reference.store.cleanupReferencesFromSources();
                            await new Promise(res => setTimeout(res, 1000));

                            extRefField.domElement.setLoadingStatus();
                            addRefSrcBtn.classList.remove('fetch-external-ref-btn-loading');

                            dom.onChange(true);
                        }

                        dom.appendChild(addRefSrcBtn);
                    },
                    tab: 'Find Reference',
                },
                {
                    name: 'manage-ref-btn',
                    render: function(dom) {
                        dom.innerHTML = ''
                        const addRefSrcBtn = document.createElement('div');
                        addRefSrcBtn.classList.add('add-external-ref-btn')
                        addRefSrcBtn.innerHTML = 'Manage Reference Sources (Zotero)'

                        addRefSrcBtn.onclick = async function() {
                            const referenceSourcesFields = await getReferenceSourcesFields(self.editor.reference.store)
                            const configForm = new DeclarativForm(
                                { fields: [...referenceSourcesFields] },
                                () => { dom.onChange(true) },
                                () => { dom.onChange(true) },
                                'Back to References')

                            configForm.openInModal()
                        }

                        dom.appendChild(addRefSrcBtn);
                    },
                    tab: 'Find Reference',
                },
                ...(!self.editor.reference ? [] : self.editor.reference.getExternalRefDialogAttributes().map(field => Object.assign(field, { tab: 'Add Reference' })))
            ],
            action: function(contextElement, formData) {
                var ref = formData && (formData['cross-ref'] || formData['existing-ref']);
                if(formData.activeTab === 'Add Reference') {
                    self.editor.reference.insertExternalReference(formData);
                } else if(ref) {
                    self.editor.reference.insertInternalReference({ref: ref});
                }
            }
        },
        {
            rangeRequire: false,
            className: 'edit-ref',
            diplayName: '<i class="fas fa-edit fa-xs"></i>',
            allowedContext: '.reference',
            shouldBeDisplayed: function(contextElement) {
                return contextElement.getAttribute('data-external') === 'true';
            },
            action: function(contextElement, formData) {
                self.editor.reference.showEditExternalRefDialog(contextElement);
            }
        },
        {
            className: 'reference-caption',
            rangeRequire: false,
            diplayName: function(contextElement) {
                var caption = self.editor.reference.getRefCaptionHTML(contextElement);
                caption = caption.replace(/\<b\>/g, '')
                                 .replace(/\<\/b\>/g, '')
                                 .replace(/\</g, '&lt;')
                                 .replace(/\>/g, '&gt;');
                return caption;
            },
            shouldBeDisplayed: function(contextElement) {
                var caption = self.editor.reference.getRefCaptionHTML(contextElement);
                return caption && caption.length !== 0
            },
            allowedContext: '.reference',
            action: function() {}
        },
        {
            rangeRequire: false,
            insertAction: true,
            className: 'inlineequation',
            diplayName: '&radic;',
            allowedContext: ['p', 'table', 'ol', 'ul', 'h1', 'h2', 'h3', 'h4', 'h5', 'caption', 'figcaption', 'citesrc'],
            notAllowedContext: ['nav', 'a', 'inlinecode', 'code'],
            arguments: [
                {name: 'latexequation', placeholder: 'LaTeX Equation', displayName: 'LaTeX Equation', tooltip: latexCheatsheet},
                {
                    displayName: 'Preview',
                    tooltip: 'It shows you how the LaTeX equation will be rendered',
                    render: function(element, formData) {
                        if(formData && formData.latexequation && formData.latexequation.trim() !== '') {
                            try {
                                katex.render(formData.latexequation, element, {
                                    throwOnError: true,
                                    displayMode: false
                                });
                            } catch (ex) {
                                element.innerHTML = '<span class="error">invalid LaTeX equation</span>';
                            }
                        } else {
                            element.innerHTML = 'Insert a LaTeX in the input field above to see the equation here.';
                        }
                    }
                }
            ],
            action: function(contextElement, argValue) {
                if(!argValue.latexequation) return;
                if(typeof argValue.latexequation !== 'string') return;
                if(argValue.latexequation.trim() === '') return;

                var eq = utils.stringToAttributeSaveString(argValue.latexequation)
                var node = document.createElement('inlineequation');

                node.setAttribute('data-latexequation', eq);
                node.setAttribute('contenteditable', false);

                self.caret.insertNode(node);
                self.caret.insertNode(document.createTextNode(' '));
            }
        },
        {
            className: 'edit-inlineequation',
            rangeRequire: false,
            diplayName: '<i class="fas fa-edit fa-xs"></i>',
            allowedContext: 'inlineequation',
            notAllowedContext: [],
            arguments: [{
                name: 'latexequation',
                placeholder: 'LaTeX Equation',
                tooltip: latexCheatsheet,
                displayName: 'LaTeX Equation',
                defaultValue: function(contextElement) {
                    if(!(contextElement && contextElement.dataset && contextElement.dataset.latexequation)) {
                        return '';
                    }

                    return utils.attributeSaveStringToString(contextElement.dataset.latexequation);
                },
            },
            {
                displayName: 'Preview:',
                tooltip: 'It shows you how the LaTeX equation will be rendered',
                render: function(element, formData) {
                    if(formData && formData.latexequation && formData.latexequation.trim() !== '') {
                        try {
                            katex.render(formData.latexequation, element, {
                                throwOnError: true,
                                displayMode: false
                            });
                        } catch (ex) {
                            element.innerHTML = '<span class="error">invalid LaTeX equation</span>';
                        }
                    }
                }
            }],
            action: function(contextElement, argValue) {
                if(!argValue.latexequation) return;
                if(typeof argValue.latexequation !== 'string') return;
                if(argValue.latexequation.trim() === '') return;

                var section = self.editor.focusedSection();
                contextElement.setAttribute('data-latexequation', utils.stringToAttributeSaveString(argValue.latexequation));
                self.editor.replaceSectionWithHTML(section, section.outerHTML);
            }
        },
        {
            className: 'inlineequation-content',
            rangeRequire: false,
            diplayName: function(contextElement) {
                return utils.attributeSaveStringToHTMLEncoded(contextElement.dataset.latexequation);
            },
            allowedContext: 'inlineequation',
            action: function() {}
        },
        {
            rangeRequire: true,
            insertAction: false,
            className: 'enrichment-info',
            allowedContext: '',
            diplayName: function(contextElement) {
                var text = window.getSelection().toString();
                var wordCount = text.split(/[\s\.:\?\!']/)
                    .filter(w => w.trim().length > 0)
                    .length;
                var charCount = text.length;

                return `${wordCount} / ${charCount}`;
            },
            action: function() {}
        },
    ];

    this.caret.subscribeSelectionChange(function(selection) {
        var enrichments = self.getMeaningfulEnrichments();

        enrichments.length !== 0 ?
            self.show(false, enrichments) :
            self.hide();
    })
}

TextEnrichmentControl.prototype = {

    isVisible: function() {
        return this.visible;
    },

    addEnrichments: function(enrichments) {
        Array.prototype.push.apply(this.enrichments, enrichments);
    },

    hide: function(force) {
        if(force || !this.preventEnrichmentControllToBeHidden) {
            this.domElement.style.display = 'none';
            this.domElement.innerHTML = '';
            this.visible = false;
        }
    },

    show: function(isInsertBtnPressed, enrichments) {
        var self = this,
            el = this.domElement,
            tmpBtn, section;

        enrichments = enrichments || this.getMeaningfulEnrichments(isInsertBtnPressed);

        if(enrichments.length === 0 && !isInsertBtnPressed) return;

        if(enrichments.length === 0) {
            enrichments.push({
                diplayName: 'Nothing to do here!',
                className: 'enrichment-info',
                allowedContext: '',
                action: function() {}
            },
            {
                diplayName: '<i class="fas fa-info fa-xs"></i>',
                className: 'enrichment-more-info-btn',
                allowedContext: 'body',
                arguments: [{
                    message: 'Some parts of the document (like headings) don\'t allow to insert footnotes or references as they might not make much sence there.<br/><br/>Please give us some <a href="mailto:info@monsterwriter.app?subject=Feedback">feedback</a> if you have an use case which requires this to be changed. <br/><br/>BTW. we would &#x1F496;to hear how you like MonsterWriter in general!'
                }],
                action: function() {}
            });
        }

        el.innerHTML = '<span class="textEnrichmentControlArrow"></span>';
        enrichments.forEach(function(enrichment) {

            tmpBtn = document.createElement('span');
            tmpBtn.className = enrichment.className;

            tmpBtn.innerHTML =  (typeof enrichment.diplayName === 'function') ?
                                    enrichment.diplayName(enrichment.contextElement) :
                                    enrichment.diplayName;

            tmpBtn.onmousedown = function (e) {

                if(!enrichment.arguments && enrichment.command) {
                    document.execCommand(enrichment.command);
                } else if(!enrichment.arguments && enrichment.action) {
                    enrichment.action(self.caret.getContextElement(enrichment.allowedContext), undefined, self);
                    section = self.editor.focusedSection();
                    self.editor.replaceSectionWithHTML(section, section.outerHTML);
                } else if(enrichment.arguments.length === 1 && enrichment.arguments[0].type === 'text') {
                    self.displaySingleArgumentTextInput(enrichment);
                } else {
                    self.displayArgumentInput(enrichment);
                }

                return false;
            }

            tmpBtn.onclick = tmpBtn.onmouseup = function () { return false }

            el.appendChild(tmpBtn);
        });

        this.visible = true;
        this.updatePosition();
        el.style.display = 'block';
    },

    updatePosition: function() {
        var caretPos = this.caret.getPosition(),
            el = this.domElement,
            xOffset = (caretPos.width > 11 ? 0 : -11),
            originalDisplay = el.style.display;

        el.style.display = 'none';
        el.style.left = (caretPos.x + xOffset) + 'px';
        el.style.top = (caretPos.y - 32) + 'px';
        el.style.display = originalDisplay;
    },

    updatePositionIfVisible: function() {
        if(this.visible) {
            this.updatePosition();
        }
    },

    displayArgumentInput: function(enrichment) {
        var self = this, section;

        var args = enrichment.arguments.map(function(arg) {
            if(typeof arg.defaultValue !== 'function') {
                return arg;
            }

            var newArg = {};
            Object.assign(newArg, arg);
            newArg.defaultValue = arg.defaultValue(enrichment.contextElement);
            return newArg;
        });

        self.editor.displayModal(args, function(formData) {
            self.editor.unfreezeSelection();
            self.hide();

            enrichment.action(self.caret.getContextElement(enrichment.allowedContext), formData, self);
            section = self.editor.focusedSection();
            self.editor.replaceSectionWithHTML(section, section.outerHTML);
        }, enrichment.notFocusFirstInput);
    },

    displaySingleArgumentTextInput: function(enrichment) {
        var self = this,
            argument = enrichment.arguments[0],
            el = this.domElement,
            attrInput = document.createElement('input'),
            okBtn = document.createElement('span'),
            cachedContextElement = enrichment.contextElement,
            section;

        attrInput.placeholder = argument.placeholder;
        okBtn.innerHTML = 'OK';
        okBtn.className = 'confirmLink';

        if(typeof argument.value === 'function') {
            attrInput.value = argument.value(cachedContextElement);
        } else {
            attrInput.value = argument.value || '';
        }

        attrInput.onmousedown = function() {
            //simulate the text focus, because it should still be visible what
            //text is slected even when the foucs changes to the input field
            self.editor.freezeSelection({
                'unfreezeOnClicksOutsiteOf': el,
                'unfreezeCallback': function() {
                    self.preventEnrichmentControllToBeHidden = false;
                    self.hide()
                },
            });
            self.preventEnrichmentControllToBeHidden = true;

            attrInput.focus();
        }

        okBtn.onmousedown = function() {
            self.editor.unfreezeSelection();
            if(enrichment.command) {
                if(!document.execCommand(enrichment.command, false, attrInput.value)) {
                    window.getSelection().getRangeAt(0).collapse();
                }
            } else if(enrichment.action) {
                var attrValue = {};
                attrValue[argument.name] = attrInput.value;
                enrichment.action(self.caret.getContextElement(enrichment.allowedContext), attrValue, self);
                section = self.editor.focusedSection();
                self.editor.replaceSectionWithHTML(section, section.outerHTML);
            }

            self.hide();
            return false;
        }

        attrInput.onkeydown = function(e) {
            if(e.keyCode === 13) { // Enter
                okBtn.onmousedown();
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }

        el.innerHTML = '<span class="textEnrichmentControlArrow"></span>';
        el.appendChild(attrInput);
        el.appendChild(okBtn);

        attrInput.onmousedown();
    },

    getMeaningfulEnrichments: function(isInsertBtnPressed, selection) {
        var self = this,
            tangentNodes = self.caret.getTangetNodes();

        selection = selection || window.getSelection();

        var collapsedMatch = function(e) {
            if(typeof e.rangeRequire === 'undefined') {
                e.rangeRequire = true;
            }

            return !e.rangeRequire || !selection.isCollapsed === e.rangeRequire;
        }

        var contextMatch = function(e) {
            if(!e.allowedContext) return true;

            if(e.notAllowedContext) {
                if(self.caret.getContextElement(e.notAllowedContext, selection, tangentNodes)) {
                    return false;
                }
            }

            e.contextElement = self.caret.getContextElement(e.allowedContext, selection, tangentNodes);
            return !!e.contextElement;
        }

        var insertActionMatch = function(e) {
            if(isInsertBtnPressed) {
                return selection.isCollapsed && e.insertAction === true;
            } else {
                return e.insertAction !== true;
            }
        }

        var enrichmentMatch = function(e) {
            if(!e.shouldBeDisplayed) { return true }

            return e.shouldBeDisplayed(self.caret.getContextElement(e.allowedContext, selection, tangentNodes));
        }

        return this.enrichments.filter(function(e) {
            return collapsedMatch(e) &&
                   contextMatch(e) &&
                   insertActionMatch(e) &&
                   enrichmentMatch(e);
        });
    }
}

module.exports = TextEnrichmentControl;


/***/ }),

/***/ "./node_modules/changesets/lib/Builder.js":
/*!************************************************!*\
  !*** ./node_modules/changesets/lib/Builder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Changeset = __webpack_require__(/*! ./Changeset */ "./node_modules/changesets/lib/Changeset.js")
  , Retain = __webpack_require__(/*! ./operations/Retain */ "./node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "./node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "./node_modules/changesets/lib/operations/Insert.js")

function Builder() {
  this.ops = []
  this.addendum = ''
  this.removendum = ''
}

module.exports = Builder

Builder.prototype.keep =
Builder.prototype.retain = function(len) {
  this.ops.push(new Retain(len))
  return this
}

Builder.prototype.delete =
Builder.prototype.skip = function(str) {
  this.removendum += str
  this.ops.push(new Skip(str.length))
  return this
}

Builder.prototype.add =
Builder.prototype.insert = function(str) {
  this.addendum += str
  this.ops.push(new Insert(str.length))
  return this
}

Builder.prototype.end = function() {
  var cs = new Changeset(this.ops)
  cs.addendum = this.addendum
  cs.removendum = this.removendum
  return cs
}


/***/ }),

/***/ "./node_modules/changesets/lib/Changeset.js":
/*!**************************************************!*\
  !*** ./node_modules/changesets/lib/Changeset.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * A sequence of consecutive operations
 *
 * @param ops.. <Operation> all passed operations will be added to the changeset
 */
function Changeset(ops/*or ops..*/) {
  this.addendum = ""
  this.removendum = ""
  this.inputLength = 0
  this.outputLength = 0

  if(!Array.isArray(ops)) ops = arguments
  for(var i=0; i<ops.length; i++) {
    this.push(ops[i])
    this.inputLength += ops[i].input
    this.outputLength += ops[i].output
  }
}

// True inheritance
Changeset.prototype = Object.create(Array.prototype, {
  constructor: {
    value: Changeset,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
module.exports = Changeset

var TextTransform = __webpack_require__(/*! ./TextTransform */ "./node_modules/changesets/lib/TextTransform.js")
  , ChangesetTransform = __webpack_require__(/*! ./ChangesetTransform */ "./node_modules/changesets/lib/ChangesetTransform.js")

var Retain = __webpack_require__(/*! ./operations/Retain */ "./node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "./node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "./node_modules/changesets/lib/operations/Insert.js")

var Builder = __webpack_require__(/*! ./Builder */ "./node_modules/changesets/lib/Builder.js")

/**
 * Returns an array containing the ops that are within the passed range
 * (only op.input is counted; thus not counting inserts to the range length, yet they are part of the range)
 */
Changeset.prototype.subrange = function(start, len) {
  var range = []
    , op, oplen
    , l=0
  for(var i=0, pos=0; i<this.length && l < len; i++) {
    op = this[i]
    if(op.input+pos >= start) {
      if(op.input) {
        if(op.length != Infinity) oplen = op.length -Math.max(0, start-pos) -Math.max(0, (op.length+pos)-(start+len))
        else oplen = len
        if (oplen !== 0) range.push( op.derive(oplen) ) // (Don't copy over more than len param allows)
      }
      else {
        range.push( op.derive(op.length) )
        oplen = 0
      }
      l += oplen
    }
    pos += op.input
  }
  return range
}

/**
 * Merge two changesets (that are based on the same state!) so that the resulting changseset
 * has the same effect as both orignal ones applied one after the other
 *
 * @param otherCs <Changeset>
 * @param left <boolean> Which op to choose if there's an insert tie (If you use this function in a distributed, synchronous environment, be sure to invert this param on the other site, otherwise it can be omitted safely))
 * @returns <Changeset>
 */
Changeset.prototype.merge = function(otherCs, left) {
  if(!(otherCs instanceof Changeset)) {
    throw new Error('Argument must be a #<Changeset>, but received '+otherCs.__proto__.constructor.name)
  }

  if(otherCs.inputLength !== this.outputLength) {
    throw new Error("Changeset lengths for merging don't match! Input length of younger cs: "+otherCs.inputLength+', output length of older cs:'+this.outputLength)
  }

  var newops = []
    , addPtr1 = 0
    , remPtr1 = 0
    , addPtr2 = 0
    , remPtr2 = 0
    , newaddendum = ''
    , newremovendum = ''

  zip(this, otherCs, function(op1, op2) {
    // console.log(newops)
    // console.log(op1, op2)

    // I'm deleting something -- the other cs can't know that, so just overtake my op
    if(op1 && !op1.output) {
      newops.push(op1.merge().clone())
      newremovendum += this.removendum.substr(remPtr1, op1.length) // overtake added chars
      remPtr1 += op1.length
      op1.length = 0 // don't gimme that one again.
      return
    }

    // op2 is an insert
    if(op2 && !op2.input) {
      newops.push(op2.merge().clone())
      newaddendum += otherCs.addendum.substr(addPtr2, op2.length) // overtake added chars
      addPtr2 += op2.length
      op2.length = 0 // don't gimme that one again.
      return
    }

    // op2 is either a retain or a skip
    if(op2 && op2.input && op1) {
      // op2 retains whatever we do here (retain or insert), so just clone my op
      if(op2.output) {
        newops.push(op1.merge(op2).clone())
        if(!op1.input) { // overtake addendum
          newaddendum += this.addendum.substr(addPtr1, op1.length)
          addPtr1 += op1.length
        }
        op1.length = 0 // don't gimme these again
        op2.length = 0
      }else

      // op2 deletes my retain here, so just clone the delete
      // (op1 can only be a retain and no skip here, cause we've handled skips above already)
      if(!op2.output && op1.input) {
        newops.push(op2.merge(op1).clone())
        newremovendum += otherCs.removendum.substr(remPtr2, op2.length) // overtake added chars
        remPtr2 += op2.length
        op1.length = 0 // don't gimme these again
        op2.length = 0
      }else

      //otherCs deletes something I added (-1) +1 = 0
      {
        addPtr1 += op1.length
        op1.length = 0 // don't gimme these again
        op2.length = 0
      }
      return
    }

    console.log('oops', arguments)
    throw new Error('oops. This case hasn\'t been considered by the developer (error code: PBCAC)')
  }.bind(this))

  var newCs = new Changeset(newops)
  newCs.addendum = newaddendum
  newCs.removendum = newremovendum

  return newCs
}

/**
 * A private and quite handy function that slices ops into equally long pieces and applies them on a mapping function
 * that can determine the iteration steps by setting op.length to 0 on an op (equals using .next() in a usual iterator)
 */
function zip(cs1, cs2, func) {
  var opstack1 = cs1.map(function(op) {return op.clone()}) // copy ops
    , opstack2 = cs2.map(function(op) {return op.clone()})

  var op2, op1
  while(opstack1.length || opstack2.length) {// iterate through all outstanding ops of this cs
    op1 = opstack1[0]? opstack1[0].clone() : null
    op2 = opstack2[0]? opstack2[0].clone() : null

    if(op1) {
      if(op2) op1 = op1.derive(Math.min(op1.length, op2.length)) // slice 'em into equally long pieces
      if(opstack1[0].length > op1.length) opstack1[0] = opstack1[0].derive(opstack1[0].length-op1.length)
      else opstack1.shift()
    }

    if(op2) {
      if(op1) op2 = op2.derive(Math.min(op1.length, op2.length)) // slice 'em into equally long pieces
      if(opstack2[0].length > op2.length) opstack2[0] = opstack2[0].derive(opstack2[0].length-op2.length)
      else opstack2.shift()
    }

    func(op1, op2)

    if(op1 && op1.length) opstack1.unshift(op1)
    if(op2 && op2.length) opstack2.unshift(op2)
  }
}

/**
 * Inclusion Transformation (IT) or Forward Transformation
 *
 * transforms the operations of the current changeset against the
 * all operations in another changeset in such a way that the
 * effects of the latter are effectively included.
 * This is basically like a applying the other cs on this one.
 *
 * @param otherCs <Changeset>
 * @param left <boolean> Which op to choose if there's an insert tie (If you use this function in a distributed, synchronous environment, be sure to invert this param on the other site, otherwise it can be omitted safely)
 *
 * @returns <Changeset>
 */
Changeset.prototype.transformAgainst = function(otherCs, left) {
  if(!(otherCs instanceof Changeset)) {
    throw new Error('Argument to Changeset#transformAgainst must be a #<Changeset>, but received '+otherCs.__proto__.constructor.name)
  }

  if(this.inputLength != otherCs.inputLength) {
    throw new Error('Can\'t transform changesets with differing inputLength: '+this.inputLength+' and '+otherCs.inputLength)
  }

  var transformation = new ChangesetTransform(this, [new Retain(Infinity)])
  otherCs.forEach(function(op) {
    var nextOp = this.subrange(transformation.pos, Infinity)[0] // next op of this cs
    if(nextOp && !nextOp.input && !op.input) { // two inserts tied; left breaks it
      if (left) transformation.writeOutput(transformation.readInput(nextOp.length))
    }
    op.apply(transformation)
  }.bind(this))

  return transformation.result()
}

/**
 * Exclusion Transformation (ET) or Backwards Transformation
 *
 * transforms all operations in the current changeset against the operations
 * in another changeset in such a way that the impact of the latter are effectively excluded
 *
 * @param changeset <Changeset> the changeset to substract from this one
 * @param left <boolean> Which op to choose if there's an insert tie (If you use this function in a distributed, synchronous environment, be sure to invert this param on the other site, otherwise it can be omitted safely)
 * @returns <Changeset>
 */
Changeset.prototype.substract = function(changeset, left) {
  // The current operations assume that the changes in
  // `changeset` happened before, so for each of those ops
  // we create an operation that undoes its effect and
  // transform all our operations on top of the inverse changes
  return this.transformAgainst(changeset.invert(), left)
}

/**
 * Returns the inverse Changeset of the current one
 *
 * Changeset.invert().apply(Changeset.apply(document)) == document
 */
Changeset.prototype.invert = function() {
  // invert all ops
  var newCs = new Changeset(this.map(function(op) {
    return op.invert()
  }))

  // removendum becomes addendum and vice versa
  newCs.addendum = this.removendum
  newCs.removendum = this.addendum

  return newCs
}

/**
 * Applies this changeset on a text
 */
Changeset.prototype.apply = function(input) {
  // pre-requisites
  if(input.length != this.inputLength) throw new Error('Input length doesn\'t match expected length. expected: '+this.inputLength+'; actual: '+input.length)

  var operation = new TextTransform(input, this.addendum, this.removendum)

  this.forEach(function(op) {
    // each Operation has access to all pointers as well as the input, addendum and removendum (the latter are immutable)
    op.apply(operation)
  }.bind(this))

  return operation.result()
}

/**
 * Returns an array of strings describing this changeset's operations
 */
Changeset.prototype.inspect = function() {
  var j = 0
  return this.map(function(op) {
    var string = ''

    if(!op.input) { // if Insert
      string = this.addendum.substr(j,op.length)
      j += op.length
      return string
    }

    for(var i=0; i<op.length; i++) string += op.symbol
    return string
  }.bind(this)).join('')
}

/**
 * Serializes the given changeset in order to return a (hopefully) more compact representation
 * than json that can be sent through a network or stored in a database
 *
 * Numbers are converted to the base 36, unsafe chars in the text are urlencoded
 *
 * @param cs <Changeset> The changeset to be serialized
 * @returns <String> The serialized changeset
 */
Changeset.prototype.pack = function() {
  var packed = this.map(function(op) {
    return op.pack()
  }).join('')

  var addendum = this.addendum.replace(/%/g, '%25').replace(/\|/g, '%7C')
    , removendum = this.removendum.replace(/%/g, '%25').replace(/\|/g, '%7C')
  return packed+'|'+addendum+'|'+removendum
}
Changeset.prototype.toString = function() {
  return this.pack()
}

/**
 * Unserializes the output of cs.text.Changeset#toString()
 *
 * @param packed <String> The serialized changeset
 * @param <cs.Changeset>
 */
Changeset.unpack = function(packed) {
  if(packed == '') throw new Error('Cannot unpack from empty string')
  var components = packed.split('|')
    , opstring = components[0]
    , addendum = components[1].replace(/%7c/gi, '|').replace(/%25/g, '%')
    , removendum = components[2].replace(/%7c/gi, '|').replace(/%25/g, '%')

  var matches = opstring.match(/[=+-]([^=+-])+/g)
  if(!matches) throw new Error('Cannot unpack invalidly serialized op string')

  var ops = []
  matches.forEach(function(s) {
    var symbol = s.substr(0,1)
      , data = s.substr(1)
    if(Skip.prototype.symbol == symbol) return ops.push(Skip.unpack(data))
    if(Insert.prototype.symbol == symbol) return ops.push(Insert.unpack(data))
    if(Retain.prototype.symbol == symbol) return ops.push(Retain.unpack(data))
    throw new Error('Invalid changeset representation passed to Changeset.unpack')
  })

  var cs = new Changeset(ops)
  cs.addendum = addendum
  cs.removendum = removendum

  return cs
}

Changeset.create = function() {
  return new Builder
}

/**
 * Returns a Changeset containing the operations needed to transform text1 into text2
 *
 * @param text1 <String>
 * @param text2 <String>
 */
Changeset.fromDiff = function(diff) {
  /**
   * The data structure representing a diff is an array of tuples:
   * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
   */
  var DIFF_DELETE = -1;
  var DIFF_INSERT = 1;
  var DIFF_EQUAL = 0;

  var ops = []
    , removendum = ''
    , addendum = ''

  diff.forEach(function(d) {
    if (DIFF_DELETE == d[0]) {
      ops.push(new Skip(d[1].length))
      removendum += d[1]
    }

    if (DIFF_INSERT == d[0]) {
      ops.push(new Insert(d[1].length))
      addendum += d[1]
    }

    if(DIFF_EQUAL == d[0]) {
      ops.push(new Retain(d[1].length))
    }
  })

  var cs = new Changeset(ops)
  cs.addendum = addendum
  cs.removendum = removendum
  return cs
}


/***/ }),

/***/ "./node_modules/changesets/lib/ChangesetTransform.js":
/*!***********************************************************!*\
  !*** ./node_modules/changesets/lib/ChangesetTransform.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational ChangesetTransform (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Retain = __webpack_require__(/*! ./operations/Retain */ "./node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "./node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "./node_modules/changesets/lib/operations/Insert.js")
  , Changeset = __webpack_require__(/*! ./Changeset */ "./node_modules/changesets/lib/Changeset.js")


function ChangesetTransform(inputCs, addendum) {
  this.output = []
  this.addendum = addendum
  this.newRemovendum = ''
  this.newAddendum = ''

  this.cs = inputCs
  this.pos = 0
  this.addendumPointer = 0
  this.removendumPointer = 0
}
module.exports = ChangesetTransform

ChangesetTransform.prototype.readInput = function (len) {
  var ret = this.cs.subrange(this.pos, len)
  this.pos += len
  return ret
}

ChangesetTransform.prototype.readAddendum = function (len) {
  //return [new Retain(len)]
  var ret = this.subrange(this.addendum, this.addendumPointer, len)
  this.addendumPointer += len
  return ret
}

ChangesetTransform.prototype.writeRemovendum = function (range) {
  range
    .filter(function(op) {return !op.output})
    .forEach(function(op) {
      this.removendumPointer += op.length
    }.bind(this))
}

ChangesetTransform.prototype.writeOutput = function (range) {
  this.output = this.output.concat(range)
  range
    .filter(function(op) {return !op.output})
    .forEach(function(op) {
      this.newRemovendum += this.cs.removendum.substr(this.removendumPointer, op.length)
      this.removendumPointer += op.length
    }.bind(this))
}

ChangesetTransform.prototype.subrange = function (range, start, len) {
  if(len) return this.cs.subrange.call(range, start, len)
  else return range.filter(function(op){ return !op.input})
}

ChangesetTransform.prototype.result = function() {
  this.writeOutput(this.readInput(Infinity))
  var newCs = new Changeset(this.output)
  newCs.addendum = this.cs.addendum
  newCs.removendum = this.newRemovendum
  return newCs
}


/***/ }),

/***/ "./node_modules/changesets/lib/Operator.js":
/*!*************************************************!*\
  !*** ./node_modules/changesets/lib/Operator.js ***!
  \*************************************************/
/***/ ((module) => {

function Operator() {
}

module.exports = Operator

Operator.prototype.clone = function() {
  return this.derive(this.length)
}

Operator.prototype.derive = function(len) {
  return new (this.constructor)(len)
}

Operator.prototype.pack = function() {
  return this.symbol + (this.length).toString(36)
}


/***/ }),

/***/ "./node_modules/changesets/lib/TextTransform.js":
/*!******************************************************!*\
  !*** ./node_modules/changesets/lib/TextTransform.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational Apply (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Retain = __webpack_require__(/*! ./operations/Retain */ "./node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "./node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "./node_modules/changesets/lib/operations/Insert.js")
  , Insert = __webpack_require__(/*! ./Changeset */ "./node_modules/changesets/lib/Changeset.js")


function TextTransform(input, addendum, removendum) {
  this.output = ''

  this.input = input
  this.addendum = addendum
  this.removendum = removendum
  this.pos = 0
  this.addPos = 0
  this.remPos = 0
}
module.exports = TextTransform

TextTransform.prototype.readInput = function (len) {
  var ret = this.input.substr(this.pos, len)
  this.pos += len
  return ret
}

TextTransform.prototype.readAddendum = function (len) {
  var ret = this.addendum.substr(this.addPos, len)
  this.addPos += len
  return ret
}

TextTransform.prototype.writeRemovendum = function (range) {
  //var expected = this.removendum.substr(this.remPos, range.length)
  //if(range != expected) throw new Error('Removed chars don\'t match removendum. expected: '+expected+'; actual: '+range)
  this.remPos += range.length
}

TextTransform.prototype.writeOutput = function (range) {
  this.output += range
}

TextTransform.prototype.subrange = function (range, start, len) {
  return range.substr(start, len)
}

TextTransform.prototype.result = function() {
  this.writeOutput(this.readInput(Infinity))
  return this.output
}


/***/ }),

/***/ "./node_modules/changesets/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/changesets/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Changeset = __webpack_require__(/*! ./Changeset */ "./node_modules/changesets/lib/Changeset.js")
  , Retain = __webpack_require__(/*! ./operations/Retain */ "./node_modules/changesets/lib/operations/Retain.js")
  , Skip = __webpack_require__(/*! ./operations/Skip */ "./node_modules/changesets/lib/operations/Skip.js")
  , Insert = __webpack_require__(/*! ./operations/Insert */ "./node_modules/changesets/lib/operations/Insert.js")

exports.Operator = __webpack_require__(/*! ./Operator */ "./node_modules/changesets/lib/Operator.js")
exports.Changeset = Changeset
exports.Insert = Insert
exports.Retain = Retain
exports.Skip = Skip

if('undefined' != typeof window) window.changesets = exports

/**
 * Serializes the given changeset in order to return a (hopefully) more compact representation
 * that can be sent through a network or stored in a database
 * @alias cs.text.Changeset#pack
 */
exports.pack = function(cs) {
  return cs.pack()
}

/**
 * Unserializes the output of cs.text.pack
 * @alias cs.text.Changeset.unpack
 */
exports.unpack = function(packed) {
  return Changeset.unpack(packed)
}




/**
 * shareJS ot type API sepc support
 */

exports.name = 'changesets'
exports.url = 'https://github.com/marcelklehr/changesets'

/**
 * create([initialText])
 *
 * creates a snapshot (optionally with supplied intial text)
 */
exports.create = function(initText) {
  return initText || ''
}

/**
 * Apply a changeset on a snapshot creating a new one
 *
 * The old snapshot object mustn't be used after calling apply on it
 * returns the resulting
 */
exports.apply = function(snapshot, op) {
  op = exports.unpack(op)
  return op.apply(snapshot)
}

/**
 * Transform changeset1 against changeset2
 */
exports.transform = function (op1, op2, side) {
  op1 = exports.unpack(op1)
  op2 = exports.unpack(op2)
  return exports.pack(op1.transformAgainst(op2, ('left'==side)))
}

/**
 * Merge two changesets into one
 */
exports.compose = function (op1, op2) {
  op1 = exports.unpack(op1)
  op2 = exports.unpack(op2)
  return exports.pack(op1.merge(op2))
}

/**
 * Invert a changeset
 */
exports.invert = function(op) {
  return exports.pack(exports.unpack(op).invert())
}


/***/ }),

/***/ "./node_modules/changesets/lib/operations/Insert.js":
/*!**********************************************************!*\
  !*** ./node_modules/changesets/lib/operations/Insert.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Operator = __webpack_require__(/*! ../Operator */ "./node_modules/changesets/lib/Operator.js")

/**
 * Insert Operator
 * Defined by:
 * - length
 * - input=0
 * - output=length
 *
 * @param length <Number> How many chars to be inserted
 */
function Insert(length) {
  this.length = length
  this.input = 0
  this.output = length
}

// True inheritance
Insert.prototype = Object.create(Operator.prototype, {
  constructor: {
    value: Insert,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
module.exports = Insert
Insert.prototype.symbol = '+'

var Skip = __webpack_require__(/*! ./Skip */ "./node_modules/changesets/lib/operations/Skip.js")
  , Retain = __webpack_require__(/*! ./Retain */ "./node_modules/changesets/lib/operations/Retain.js")

Insert.prototype.apply = function(t) {
  t.writeOutput(t.readAddendum(this.output))
}

Insert.prototype.merge = function() {
  return this
}

Insert.prototype.invert = function() {
  return new Skip(this.length)
}

Insert.unpack = function(data) {
  return new Insert(parseInt(data, 36))
}


/***/ }),

/***/ "./node_modules/changesets/lib/operations/Retain.js":
/*!**********************************************************!*\
  !*** ./node_modules/changesets/lib/operations/Retain.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Operator = __webpack_require__(/*! ../Operator */ "./node_modules/changesets/lib/Operator.js")

/**
 * Retain Operator
 * Defined by:
 * - length
 * - input=output=length
 *
 * @param length <Number> How many chars to retain
 */
function Retain(length) {
  this.length = length
  this.input = length
  this.output = length
}

// True inheritance
Retain.prototype = Object.create(Operator.prototype, {
  constructor: {
    value: Retain,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
module.exports = Retain
Retain.prototype.symbol = '='

Retain.prototype.apply = function(t) {
  t.writeOutput(t.readInput(this.input))
}

Retain.prototype.invert = function() {
  return this
}

Retain.prototype.merge = function(op2) {
  return this
}

Retain.unpack = function(data) {
  return new Retain(parseInt(data, 36))
}


/***/ }),

/***/ "./node_modules/changesets/lib/operations/Skip.js":
/*!********************************************************!*\
  !*** ./node_modules/changesets/lib/operations/Skip.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * changesets
 * A Changeset library incorporating operational transformation (OT)
 * Copyright 2012 by Marcel Klehr <mklehr@gmx.net>
 *
 * (MIT LICENSE)
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Operator = __webpack_require__(/*! ../Operator */ "./node_modules/changesets/lib/Operator.js")

/**
 * Skip Operator
 * Defined by:
 * - length
 * - input=length
 * - output=0
 *
 * @param length <Number> How many chars to be Skip
 */
function Skip(length) {
  this.length = length
  this.input = length
  this.output = 0
}

// True inheritance
Skip.prototype = Object.create(Operator.prototype, {
  constructor: {
    value: Skip,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
module.exports = Skip
Skip.prototype.symbol = '-'

var Insert = __webpack_require__(/*! ./Insert */ "./node_modules/changesets/lib/operations/Insert.js")
  , Retain = __webpack_require__(/*! ./Retain */ "./node_modules/changesets/lib/operations/Retain.js")
  , Changeset = __webpack_require__(/*! ../Changeset */ "./node_modules/changesets/lib/Changeset.js")

Skip.prototype.apply = function(t) {
  var input = t.readInput(this.input)
  t.writeRemovendum(input)
  t.writeOutput(t.subrange(input, 0, this.output)) // retain Inserts in my range
}

Skip.prototype.merge = function(op2) {
  return this
}

Skip.prototype.invert = function() {
  return new Insert(this.length)
}

Skip.unpack = function(data) {
  return new Skip(parseInt(data, 36))
}


/***/ }),

/***/ "./node_modules/diff_match_patch/lib/diff_match_patch.js":
/*!***************************************************************!*\
  !*** ./node_modules/diff_match_patch/lib/diff_match_patch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/**
 * Diff Match and Patch
 *
 * Copyright 2006 Google Inc.
 * http://code.google.com/p/google-diff-match-patch/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 * @author fraser@google.com (Neil Fraser)
 */

/**
 * Class containing the diff, match and patch methods.
 * @constructor
 */
function diff_match_patch() {

  // Defaults.
  // Redefine these in your program to override the defaults.

  // Number of seconds to map a diff before giving up (0 for infinity).
  this.Diff_Timeout = 1.0;
  // Cost of an empty edit operation in terms of edit characters.
  this.Diff_EditCost = 4;
  // The size beyond which the double-ended diff activates.
  // Double-ending is twice as fast, but less accurate.
  this.Diff_DualThreshold = 32;
  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
  this.Match_Threshold = 0.5;
  // How far to search for a match (0 = exact location, 1000+ = broad match).
  // A match this many characters away from the expected location will add
  // 1.0 to the score (0.0 is a perfect match).
  this.Match_Distance = 1000;
  // When deleting a large block of text (over ~64 characters), how close does
  // the contents have to match the expected contents. (0.0 = perfection,
  // 1.0 = very loose).  Note that Match_Threshold controls how closely the
  // end points of a delete need to match.
  this.Patch_DeleteThreshold = 0.5;
  // Chunk size for context length.
  this.Patch_Margin = 4;

  /**
   * Compute the number of bits in an int.
   * The normal answer for JavaScript is 32.
   * @return {number} Max bits
   */
  function getMaxBits() {
    var maxbits = 0;
    var oldi = 1;
    var newi = 2;
    while (oldi != newi) {
      maxbits++;
      oldi = newi;
      newi = newi << 1;
    }
    return maxbits;
  }
  // How many bits in a number?
  this.Match_MaxBits = getMaxBits();
}


//  DIFF FUNCTIONS


/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */
var DIFF_DELETE = -1;
var DIFF_INSERT = 1;
var DIFF_EQUAL = 0;


/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} opt_checklines Optional speedup flag.  If present and false,
 *     then don't run a line-level diff first to identify the changed areas.
 *     Defaults to true, which does a faster, slightly less optimal diff
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 */
diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines) {
  // Check for null inputs.
  if (text1 == null || text2 == null) {
    throw new Error('Null input. (diff_main)');
  }

  // Check for equality (speedup).
  if (text1 == text2) {
    return [[DIFF_EQUAL, text1]];
  }

  if (typeof opt_checklines == 'undefined') {
    opt_checklines = true;
  }
  var checklines = opt_checklines;

  // Trim off common prefix (speedup).
  var commonlength = this.diff_commonPrefix(text1, text2);
  var commonprefix = text1.substring(0, commonlength);
  text1 = text1.substring(commonlength);
  text2 = text2.substring(commonlength);

  // Trim off common suffix (speedup).
  commonlength = this.diff_commonSuffix(text1, text2);
  var commonsuffix = text1.substring(text1.length - commonlength);
  text1 = text1.substring(0, text1.length - commonlength);
  text2 = text2.substring(0, text2.length - commonlength);

  // Compute the diff on the middle block.
  var diffs = this.diff_compute(text1, text2, checklines);

  // Restore the prefix and suffix.
  if (commonprefix) {
    diffs.unshift([DIFF_EQUAL, commonprefix]);
  }
  if (commonsuffix) {
    diffs.push([DIFF_EQUAL, commonsuffix]);
  }
  this.diff_cleanupMerge(diffs);
  return diffs;
};


/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} checklines Speedup flag.  If false, then don't run a
 *     line-level diff first to identify the changed areas.
 *     If true, then run a faster, slightly less optimal diff
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_compute = function(text1, text2, checklines) {
  var diffs;

  if (!text1) {
    // Just add some text (speedup).
    return [[DIFF_INSERT, text2]];
  }

  if (!text2) {
    // Just delete some text (speedup).
    return [[DIFF_DELETE, text1]];
  }

  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  var i = longtext.indexOf(shorttext);
  if (i != -1) {
    // Shorter text is inside the longer text (speedup).
    diffs = [[DIFF_INSERT, longtext.substring(0, i)],
             [DIFF_EQUAL, shorttext],
             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
    // Swap insertions for deletions if diff is reversed.
    if (text1.length > text2.length) {
      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    }
    return diffs;
  }
  longtext = shorttext = null;  // Garbage collect.

  // Check to see if the problem can be split in two.
  var hm = this.diff_halfMatch(text1, text2);
  if (hm) {
    // A half-match was found, sort out the return data.
    var text1_a = hm[0];
    var text1_b = hm[1];
    var text2_a = hm[2];
    var text2_b = hm[3];
    var mid_common = hm[4];
    // Send both pairs off for separate processing.
    var diffs_a = this.diff_main(text1_a, text2_a, checklines);
    var diffs_b = this.diff_main(text1_b, text2_b, checklines);
    // Merge the results.
    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
  }

  // Perform a real diff.
  if (checklines && (text1.length < 100 || text2.length < 100)) {
    // Too trivial for the overhead.
    checklines = false;
  }
  var linearray;
  if (checklines) {
    // Scan the text on a line-by-line basis first.
    var a = this.diff_linesToChars(text1, text2);
    text1 = a[0];
    text2 = a[1];
    linearray = a[2];
  }
  diffs = this.diff_map(text1, text2);
  if (!diffs) {
    // No acceptable result.
    diffs = [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  }
  if (checklines) {
    // Convert the diff back to original text.
    this.diff_charsToLines(diffs, linearray);
    // Eliminate freak matches (e.g. blank lines)
    this.diff_cleanupSemantic(diffs);

    // Rediff any replacement blocks, this time character-by-character.
    // Add a dummy entry at the end.
    diffs.push([DIFF_EQUAL, '']);
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = '';
    var text_insert = '';
    while (pointer < diffs.length) {
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          break;
        case DIFF_EQUAL:
          // Upon reaching an equality, check for prior redundancies.
          if (count_delete >= 1 && count_insert >= 1) {
            // Delete the offending records and add the merged ones.
            var a = this.diff_main(text_delete, text_insert, false);
            diffs.splice(pointer - count_delete - count_insert,
                         count_delete + count_insert);
            pointer = pointer - count_delete - count_insert;
            for (var j = a.length - 1; j >= 0; j--) {
              diffs.splice(pointer, 0, a[j]);
            }
            pointer = pointer + a.length;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = '';
          text_insert = '';
          break;
      }
     pointer++;
    }
    diffs.pop();  // Remove the dummy entry at the end.
  }
  return diffs;
};


/**
 * Split two texts into an array of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string|Array.<string>>} Three element Array, containing the
 *     encoded text1, the encoded text2 and the array of unique strings.  The
 *     zeroth element of the array of unique strings is intentionally blank.
 * @private
 */
diff_match_patch.prototype.diff_linesToChars = function(text1, text2) {
  var lineArray = [];  // e.g. lineArray[4] == 'Hello\n'
  var lineHash = {};   // e.g. lineHash['Hello\n'] == 4

  // '\x00' is a valid character, but various debuggers don't like it.
  // So we'll insert a junk entry to avoid generating a null character.
  lineArray[0] = '';

  /**
   * Split a text into an array of strings.  Reduce the texts to a string of
   * hashes where each Unicode character represents one line.
   * Modifies linearray and linehash through being a closure.
   * @param {string} text String to encode.
   * @return {string} Encoded string.
   * @private
   */
  function diff_linesToCharsMunge(text) {
    var chars = '';
    // Walk the text, pulling out a substring for each line.
    // text.split('\n') would would temporarily double our memory footprint.
    // Modifying text would create many large strings to garbage collect.
    var lineStart = 0;
    var lineEnd = -1;
    // Keeping our own length variable is faster than looking it up.
    var lineArrayLength = lineArray.length;
    while (lineEnd < text.length - 1) {
      lineEnd = text.indexOf('\n', lineStart);
      if (lineEnd == -1) {
        lineEnd = text.length - 1;
      }
      var line = text.substring(lineStart, lineEnd + 1);
      lineStart = lineEnd + 1;

      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :
          (lineHash[line] !== undefined)) {
        chars += String.fromCharCode(lineHash[line]);
      } else {
        chars += String.fromCharCode(lineArrayLength);
        lineHash[line] = lineArrayLength;
        lineArray[lineArrayLength++] = line;
      }
    }
    return chars;
  }

  var chars1 = diff_linesToCharsMunge(text1);
  var chars2 = diff_linesToCharsMunge(text2);
  return [chars1, chars2, lineArray];
};


/**
 * Rehydrate the text in a diff from a string of line hashes to real lines of
 * text.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @param {Array.<string>} lineArray Array of unique strings.
 * @private
 */
diff_match_patch.prototype.diff_charsToLines = function(diffs, lineArray) {
  for (var x = 0; x < diffs.length; x++) {
    var chars = diffs[x][1];
    var text = [];
    for (var y = 0; y < chars.length; y++) {
      text[y] = lineArray[chars.charCodeAt(y)];
    }
    diffs[x][1] = text.join('');
  }
};


/**
 * Explore the intersection points between the two texts.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @return {?Array.<Array.<number|string>>} Array of diff tuples or null if no
 *     diff available.
 * @private
 */
diff_match_patch.prototype.diff_map = function(text1, text2) {
  // Don't run for too long.
  var ms_end = (new Date()).getTime() + this.Diff_Timeout * 1000;
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  var max_d = text1_length + text2_length - 1;
  var doubleEnd = this.Diff_DualThreshold * 2 < max_d;
  // JavaScript efficiency note: (x << 32) + y doesn't work since numbers are
  // only 32 bit.  Use x + ',' + y to create a hash instead.
  var v_map1 = [];
  var v_map2 = [];
  var v1 = {};
  var v2 = {};
  v1[1] = 0;
  v2[1] = 0;
  var x, y;
  var footstep;  // Used to track overlapping paths.
  var footsteps = {};
  var done = false;
  // If the total number of characters is odd, then the front path will collide
  // with the reverse path.
  var front = (text1_length + text2_length) % 2;
  for (var d = 0; d < max_d; d++) {
    // Bail out if timeout reached.
    if (this.Diff_Timeout > 0 && (new Date()).getTime() > ms_end) {
      return null;
    }

    // Walk the front path one step.
    v_map1[d] = {};
    for (var k = -d; k <= d; k += 2) {
      if (k == -d || k != d && v1[k - 1] < v1[k + 1]) {
        x = v1[k + 1];
      } else {
        x = v1[k - 1] + 1;
      }
      y = x - k;
      if (doubleEnd) {
        footstep = x + ',' + y;
        if (front && footsteps[footstep] !== undefined) {
          done = true;
        }
        if (!front) {
          footsteps[footstep] = d;
        }
      }
      while (!done && x < text1_length && y < text2_length &&
             text1.charAt(x) == text2.charAt(y)) {
        x++;
        y++;
        if (doubleEnd) {
          footstep = x + ',' + y;
          if (front && footsteps[footstep] !== undefined) {
            done = true;
          }
          if (!front) {
            footsteps[footstep] = d;
          }
        }
      }
      v1[k] = x;
      v_map1[d][x + ',' + y] = true;
      if (x == text1_length && y == text2_length) {
        // Reached the end in single-path mode.
        return this.diff_path1(v_map1, text1, text2);
      } else if (done) {
        // Front path ran over reverse path.
        v_map2 = v_map2.slice(0, footsteps[footstep] + 1);
        var a = this.diff_path1(v_map1, text1.substring(0, x),
                                text2.substring(0, y));
        return a.concat(this.diff_path2(v_map2, text1.substring(x),
                                        text2.substring(y)));
      }
    }

    if (doubleEnd) {
      // Walk the reverse path one step.
      v_map2[d] = {};
      for (var k = -d; k <= d; k += 2) {
        if (k == -d || k != d && v2[k - 1] < v2[k + 1]) {
          x = v2[k + 1];
        } else {
          x = v2[k - 1] + 1;
        }
        y = x - k;
        footstep = (text1_length - x) + ',' + (text2_length - y);
        if (!front && footsteps[footstep] !== undefined) {
          done = true;
        }
        if (front) {
          footsteps[footstep] = d;
        }
        while (!done && x < text1_length && y < text2_length &&
               text1.charAt(text1_length - x - 1) ==
               text2.charAt(text2_length - y - 1)) {
          x++;
          y++;
          footstep = (text1_length - x) + ',' + (text2_length - y);
          if (!front && footsteps[footstep] !== undefined) {
            done = true;
          }
          if (front) {
            footsteps[footstep] = d;
          }
        }
        v2[k] = x;
        v_map2[d][x + ',' + y] = true;
        if (done) {
          // Reverse path ran over front path.
          v_map1 = v_map1.slice(0, footsteps[footstep] + 1);
          var a = this.diff_path1(v_map1, text1.substring(0, text1_length - x),
                                  text2.substring(0, text2_length - y));
          return a.concat(this.diff_path2(v_map2,
                          text1.substring(text1_length - x),
                          text2.substring(text2_length - y)));
        }
      }
    }
  }
  // Number of diffs equals number of characters, no commonality at all.
  return null;
};


/**
 * Work from the middle back to the start to determine the path.
 * @param {Array.<Object>} v_map Array of paths.
 * @param {string} text1 Old string fragment to be diffed.
 * @param {string} text2 New string fragment to be diffed.
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_path1 = function(v_map, text1, text2) {
  var path = [];
  var x = text1.length;
  var y = text2.length;
  /** @type {?number} */
  var last_op = null;
  for (var d = v_map.length - 2; d >= 0; d--) {
    while (1) {
      if (v_map[d][(x - 1) + ',' + y] !== undefined) {
        x--;
        if (last_op === DIFF_DELETE) {
          path[0][1] = text1.charAt(x) + path[0][1];
        } else {
          path.unshift([DIFF_DELETE, text1.charAt(x)]);
        }
        last_op = DIFF_DELETE;
        break;
      } else if (v_map[d][x + ',' + (y - 1)] !== undefined) {
        y--;
        if (last_op === DIFF_INSERT) {
          path[0][1] = text2.charAt(y) + path[0][1];
        } else {
          path.unshift([DIFF_INSERT, text2.charAt(y)]);
        }
        last_op = DIFF_INSERT;
        break;
      } else {
        x--;
        y--;
        if (text1.charAt(x) != text2.charAt(y)) {
          throw new Error('No diagonal.  Can\'t happen. (diff_path1)');
        }
        if (last_op === DIFF_EQUAL) {
          path[0][1] = text1.charAt(x) + path[0][1];
        } else {
          path.unshift([DIFF_EQUAL, text1.charAt(x)]);
        }
        last_op = DIFF_EQUAL;
      }
    }
  }
  return path;
};


/**
 * Work from the middle back to the end to determine the path.
 * @param {Array.<Object>} v_map Array of paths.
 * @param {string} text1 Old string fragment to be diffed.
 * @param {string} text2 New string fragment to be diffed.
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_path2 = function(v_map, text1, text2) {
  var path = [];
  var pathLength = 0;
  var x = text1.length;
  var y = text2.length;
  /** @type {?number} */
  var last_op = null;
  for (var d = v_map.length - 2; d >= 0; d--) {
    while (1) {
      if (v_map[d][(x - 1) + ',' + y] !== undefined) {
        x--;
        if (last_op === DIFF_DELETE) {
          path[pathLength - 1][1] += text1.charAt(text1.length - x - 1);
        } else {
          path[pathLength++] =
              [DIFF_DELETE, text1.charAt(text1.length - x - 1)];
        }
        last_op = DIFF_DELETE;
        break;
      } else if (v_map[d][x + ',' + (y - 1)] !== undefined) {
        y--;
        if (last_op === DIFF_INSERT) {
          path[pathLength - 1][1] += text2.charAt(text2.length - y - 1);
        } else {
          path[pathLength++] =
              [DIFF_INSERT, text2.charAt(text2.length - y - 1)];
        }
        last_op = DIFF_INSERT;
        break;
      } else {
        x--;
        y--;
        if (text1.charAt(text1.length - x - 1) !=
            text2.charAt(text2.length - y - 1)) {
          throw new Error('No diagonal.  Can\'t happen. (diff_path2)');
        }
        if (last_op === DIFF_EQUAL) {
          path[pathLength - 1][1] += text1.charAt(text1.length - x - 1);
        } else {
          path[pathLength++] =
              [DIFF_EQUAL, text1.charAt(text1.length - x - 1)];
        }
        last_op = DIFF_EQUAL;
      }
    }
  }
  return path;
};


/**
 * Determine the common prefix of two strings
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */
diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerstart = 0;
  while (pointermin < pointermid) {
    if (text1.substring(pointerstart, pointermid) ==
        text2.substring(pointerstart, pointermid)) {
      pointermin = pointermid;
      pointerstart = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Determine the common suffix of two strings
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */
diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.charAt(text1.length - 1) !=
                          text2.charAt(text2.length - 1)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerend = 0;
  while (pointermin < pointermid) {
    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
      pointermin = pointermid;
      pointerend = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {?Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 */
diff_match_patch.prototype.diff_halfMatch = function(text1, text2) {
  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  if (longtext.length < 10 || shorttext.length < 1) {
    return null;  // Pointless.
  }
  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Does a substring of shorttext exist within longtext such that the substring
   * is at least half the length of longtext?
   * Closure, but does not reference any external variables.
   * @param {string} longtext Longer string.
   * @param {string} shorttext Shorter string.
   * @param {number} i Start index of quarter length substring within longtext
   * @return {?Array.<string>} Five element Array, containing the prefix of
   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
   *     of shorttext and the common middle.  Or null if there was no match.
   * @private
   */
  function diff_halfMatchI(longtext, shorttext, i) {
    // Start with a 1/4 length substring at position i as a seed.
    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    var j = -1;
    var best_common = '';
    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),
                                               shorttext.substring(j));
      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),
                                               shorttext.substring(0, j));
      if (best_common.length < suffixLength + prefixLength) {
        best_common = shorttext.substring(j - suffixLength, j) +
            shorttext.substring(j, j + prefixLength);
        best_longtext_a = longtext.substring(0, i - suffixLength);
        best_longtext_b = longtext.substring(i + prefixLength);
        best_shorttext_a = shorttext.substring(0, j - suffixLength);
        best_shorttext_b = shorttext.substring(j + prefixLength);
      }
    }
    if (best_common.length >= longtext.length / 2) {
      return [best_longtext_a, best_longtext_b,
              best_shorttext_a, best_shorttext_b, best_common];
    } else {
      return null;
    }
  }

  // First check if the second quarter is the seed for a half-match.
  var hm1 = diff_halfMatchI(longtext, shorttext,
                            Math.ceil(longtext.length / 4));
  // Check again based on the third quarter.
  var hm2 = diff_halfMatchI(longtext, shorttext,
                            Math.ceil(longtext.length / 2));
  var hm;
  if (!hm1 && !hm2) {
    return null;
  } else if (!hm2) {
    hm = hm1;
  } else if (!hm1) {
    hm = hm2;
  } else {
    // Both matched.  Select the longest.
    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
  }

  // A half-match was found, sort out the return data.
  var text1_a, text1_b, text2_a, text2_b;
  if (text1.length > text2.length) {
    text1_a = hm[0];
    text1_b = hm[1];
    text2_a = hm[2];
    text2_b = hm[3];
  } else {
    text2_a = hm[0];
    text2_b = hm[1];
    text1_a = hm[2];
    text1_b = hm[3];
  }
  var mid_common = hm[4];
  return [text1_a, text1_b, text2_a, text2_b, mid_common];
};


/**
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  var lastequality = null;  // Always equal to equalities[equalitiesLength-1][1]
  var pointer = 0;  // Index of current position.
  // Number of characters that changed prior to the equality.
  var length_changes1 = 0;
  // Number of characters that changed after the equality.
  var length_changes2 = 0;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // equality found
      equalities[equalitiesLength++] = pointer;
      length_changes1 = length_changes2;
      length_changes2 = 0;
      lastequality = diffs[pointer][1];
    } else {  // an insertion or deletion
      length_changes2 += diffs[pointer][1].length;
      if (lastequality !== null && (lastequality.length <= length_changes1) &&
          (lastequality.length <= length_changes2)) {
        // Duplicate record
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     [DIFF_DELETE, lastequality]);
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        // Throw away the equality we just deleted.
        equalitiesLength--;
        // Throw away the previous equality (it needs to be reevaluated).
        equalitiesLength--;
        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
        length_changes1 = 0;  // Reset the counters.
        length_changes2 = 0;
        lastequality = null;
        changes = true;
      }
    }
    pointer++;
  }
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
  this.diff_cleanupSemanticLossless(diffs);
};


/**
 * Look for single edits surrounded on both sides by equalities
 * which can be shifted sideways to align the edit to a word boundary.
 * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {
  // Define some regex patterns for matching boundaries.
  var punctuation = /[^a-zA-Z0-9]/;
  var whitespace = /\s/;
  var linebreak = /[\r\n]/;
  var blanklineEnd = /\n\r?\n$/;
  var blanklineStart = /^\r?\n\r?\n/;

  /**
   * Given two strings, compute a score representing whether the internal
   * boundary falls on logical boundaries.
   * Scores range from 5 (best) to 0 (worst).
   * Closure, makes reference to regex patterns defined above.
   * @param {string} one First string.
   * @param {string} two Second string.
   * @return {number} The score.
   */
  function diff_cleanupSemanticScore(one, two) {
    if (!one || !two) {
      // Edges are the best.
      return 5;
    }

    // Each port of this function behaves slightly differently due to
    // subtle differences in each language's definition of things like
    // 'whitespace'.  Since this function's purpose is largely cosmetic,
    // the choice has been made to use each language's native features
    // rather than force total conformity.
    var score = 0;
    // One point for non-alphanumeric.
    if (one.charAt(one.length - 1).match(punctuation) ||
        two.charAt(0).match(punctuation)) {
      score++;
      // Two points for whitespace.
      if (one.charAt(one.length - 1).match(whitespace) ||
          two.charAt(0).match(whitespace)) {
        score++;
        // Three points for line breaks.
        if (one.charAt(one.length - 1).match(linebreak) ||
            two.charAt(0).match(linebreak)) {
          score++;
          // Four points for blank lines.
          if (one.match(blanklineEnd) || two.match(blanklineStart)) {
            score++;
          }
        }
      }
    }
    return score;
  }

  var pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      var equality1 = diffs[pointer - 1][1];
      var edit = diffs[pointer][1];
      var equality2 = diffs[pointer + 1][1];

      // First, shift the edit as far left as possible.
      var commonOffset = this.diff_commonSuffix(equality1, edit);
      if (commonOffset) {
        var commonString = edit.substring(edit.length - commonOffset);
        equality1 = equality1.substring(0, equality1.length - commonOffset);
        edit = commonString + edit.substring(0, edit.length - commonOffset);
        equality2 = commonString + equality2;
      }

      // Second, step character by character right, looking for the best fit.
      var bestEquality1 = equality1;
      var bestEdit = edit;
      var bestEquality2 = equality2;
      var bestScore = diff_cleanupSemanticScore(equality1, edit) +
          diff_cleanupSemanticScore(edit, equality2);
      while (edit.charAt(0) === equality2.charAt(0)) {
        equality1 += edit.charAt(0);
        edit = edit.substring(1) + equality2.charAt(0);
        equality2 = equality2.substring(1);
        var score = diff_cleanupSemanticScore(equality1, edit) +
            diff_cleanupSemanticScore(edit, equality2);
        // The >= encourages trailing rather than leading whitespace on edits.
        if (score >= bestScore) {
          bestScore = score;
          bestEquality1 = equality1;
          bestEdit = edit;
          bestEquality2 = equality2;
        }
      }

      if (diffs[pointer - 1][1] != bestEquality1) {
        // We have an improvement, save it back to the diff.
        if (bestEquality1) {
          diffs[pointer - 1][1] = bestEquality1;
        } else {
          diffs.splice(pointer - 1, 1);
          pointer--;
        }
        diffs[pointer][1] = bestEdit;
        if (bestEquality2) {
          diffs[pointer + 1][1] = bestEquality2;
        } else {
          diffs.splice(pointer + 1, 1);
          pointer--;
        }
      }
    }
    pointer++;
  }
};


/**
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  var lastequality = '';  // Always equal to equalities[equalitiesLength-1][1]
  var pointer = 0;  // Index of current position.
  // Is there an insertion operation before the last equality.
  var pre_ins = false;
  // Is there a deletion operation before the last equality.
  var pre_del = false;
  // Is there an insertion operation after the last equality.
  var post_ins = false;
  // Is there a deletion operation after the last equality.
  var post_del = false;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // equality found
      if (diffs[pointer][1].length < this.Diff_EditCost &&
          (post_ins || post_del)) {
        // Candidate found.
        equalities[equalitiesLength++] = pointer;
        pre_ins = post_ins;
        pre_del = post_del;
        lastequality = diffs[pointer][1];
      } else {
        // Not a candidate, and can never become one.
        equalitiesLength = 0;
        lastequality = '';
      }
      post_ins = post_del = false;
    } else {  // an insertion or deletion
      if (diffs[pointer][0] == DIFF_DELETE) {
        post_del = true;
      } else {
        post_ins = true;
      }
      /*
       * Five types to be split:
       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
       * <ins>A</ins>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<ins>C</ins>
       * <ins>A</del>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<del>C</del>
       */
      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||
                           ((lastequality.length < this.Diff_EditCost / 2) &&
                            (pre_ins + pre_del + post_ins + post_del) == 3))) {
        // Duplicate record
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     [DIFF_DELETE, lastequality]);
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        equalitiesLength--;  // Throw away the equality we just deleted;
        lastequality = '';
        if (pre_ins && pre_del) {
          // No changes made which could affect previous entry, keep going.
          post_ins = post_del = true;
          equalitiesLength = 0;
        } else {
          equalitiesLength--;  // Throw away the previous equality;
          pointer = equalitiesLength > 0 ?
              equalities[equalitiesLength - 1] : -1;
          post_ins = post_del = false;
        }
        changes = true;
      }
    }
    pointer++;
  }

  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {
  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  var commonlength;
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete !== 0 || count_insert !== 0) {
          if (count_delete !== 0 && count_insert !== 0) {
            // Factor out any common prefixies.
            commonlength = this.diff_commonPrefix(text_insert, text_delete);
            if (commonlength !== 0) {
              if ((pointer - count_delete - count_insert) > 0 &&
                  diffs[pointer - count_delete - count_insert - 1][0] ==
                  DIFF_EQUAL) {
                diffs[pointer - count_delete - count_insert - 1][1] +=
                    text_insert.substring(0, commonlength);
              } else {
                diffs.splice(0, 0, [DIFF_EQUAL,
                    text_insert.substring(0, commonlength)]);
                pointer++;
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            // Factor out any common suffixies.
            commonlength = this.diff_commonSuffix(text_insert, text_delete);
            if (commonlength !== 0) {
              diffs[pointer][1] = text_insert.substring(text_insert.length -
                  commonlength) + diffs[pointer][1];
              text_insert = text_insert.substring(0, text_insert.length -
                  commonlength);
              text_delete = text_delete.substring(0, text_delete.length -
                  commonlength);
            }
          }
          // Delete the offending records and add the merged ones.
          if (count_delete === 0) {
            diffs.splice(pointer - count_delete - count_insert,
                count_delete + count_insert, [DIFF_INSERT, text_insert]);
          } else if (count_insert === 0) {
            diffs.splice(pointer - count_delete - count_insert,
                count_delete + count_insert, [DIFF_DELETE, text_delete]);
          } else {
            diffs.splice(pointer - count_delete - count_insert,
                count_delete + count_insert, [DIFF_DELETE, text_delete],
                [DIFF_INSERT, text_insert]);
          }
          pointer = pointer - count_delete - count_insert +
                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
          // Merge this equality with the previous one.
          diffs[pointer - 1][1] += diffs[pointer][1];
          diffs.splice(pointer, 1);
        } else {
          pointer++;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
  }
  if (diffs[diffs.length - 1][1] === '') {
    diffs.pop();  // Remove the dummy entry at the end.
  }

  // Second pass: look for single edits surrounded on both sides by equalities
  // which can be shifted sideways to eliminate an equality.
  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
  var changes = false;
  pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      if (diffs[pointer][1].substring(diffs[pointer][1].length -
          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
        // Shift the edit over the previous equality.
        diffs[pointer][1] = diffs[pointer - 1][1] +
            diffs[pointer][1].substring(0, diffs[pointer][1].length -
                                        diffs[pointer - 1][1].length);
        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
        diffs.splice(pointer - 1, 1);
        changes = true;
      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
          diffs[pointer + 1][1]) {
        // Shift the edit over the next equality.
        diffs[pointer - 1][1] += diffs[pointer + 1][1];
        diffs[pointer][1] =
            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
            diffs[pointer + 1][1];
        diffs.splice(pointer + 1, 1);
        changes = true;
      }
    }
    pointer++;
  }
  // If shifts were made, the diff needs reordering and another shift sweep.
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * loc is a location in text1, compute and return the equivalent location in
 * text2.
 * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @param {number} loc Location within text1.
 * @return {number} Location within text2.
 */
diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {
  var chars1 = 0;
  var chars2 = 0;
  var last_chars1 = 0;
  var last_chars2 = 0;
  var x;
  for (x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.
      chars1 += diffs[x][1].length;
    }
    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.
      chars2 += diffs[x][1].length;
    }
    if (chars1 > loc) {  // Overshot the location.
      break;
    }
    last_chars1 = chars1;
    last_chars2 = chars2;
  }
  // Was the location was deleted?
  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
    return last_chars2;
  }
  // Add the remaining character length.
  return last_chars2 + (loc - last_chars1);
};


/**
 * Convert a diff array into a pretty HTML report.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {string} HTML representation.
 */
diff_match_patch.prototype.diff_prettyHtml = function(diffs) {
  var html = [];
  var i = 0;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];    // Operation (insert, delete, equal)
    var data = diffs[x][1];  // Text of change.
    var text = data.replace(/&/g, '&amp;').replace(/</g, '&lt;')
        .replace(/>/g, '&gt;').replace(/\n/g, '&para;<BR>');
    switch (op) {
      case DIFF_INSERT:
        html[x] = '<INS STYLE="background:#E6FFE6;" TITLE="i=' + i + '">' +
                text + '</INS>';
        break;
      case DIFF_DELETE:
        html[x] = '<DEL STYLE="background:#FFE6E6;" TITLE="i=' + i + '">' +
                text + '</DEL>';
        break;
      case DIFF_EQUAL:
        html[x] = '<SPAN TITLE="i=' + i + '">' + text + '</SPAN>';
        break;
    }
    if (op !== DIFF_DELETE) {
      i += data.length;
    }
  }
  return html.join('');
};


/**
 * Compute and return the source text (all equalities and deletions).
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {string} Source text.
 */
diff_match_patch.prototype.diff_text1 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute and return the destination text (all equalities and insertions).
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {string} Destination text.
 */
diff_match_patch.prototype.diff_text2 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_DELETE) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute the Levenshtein distance; the number of inserted, deleted or
 * substituted characters.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {number} Number of changes.
 */
diff_match_patch.prototype.diff_levenshtein = function(diffs) {
  var levenshtein = 0;
  var insertions = 0;
  var deletions = 0;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];
    var data = diffs[x][1];
    switch (op) {
      case DIFF_INSERT:
        insertions += data.length;
        break;
      case DIFF_DELETE:
        deletions += data.length;
        break;
      case DIFF_EQUAL:
        // A deletion and an insertion is one substitution.
        levenshtein += Math.max(insertions, deletions);
        insertions = 0;
        deletions = 0;
        break;
    }
  }
  levenshtein += Math.max(insertions, deletions);
  return levenshtein;
};


/**
 * Crush the diff into an encoded string which describes the operations
 * required to transform text1 into text2.
 * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
 * Operations are tab-separated.  Inserted text is escaped using %xx notation.
 * @param {Array.<Array.<number|string>>} diffs Array of diff tuples.
 * @return {string} Delta text.
 */
diff_match_patch.prototype.diff_toDelta = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    switch (diffs[x][0]) {
      case DIFF_INSERT:
        text[x] = '+' + encodeURI(diffs[x][1]);
        break;
      case DIFF_DELETE:
        text[x] = '-' + diffs[x][1].length;
        break;
      case DIFF_EQUAL:
        text[x] = '=' + diffs[x][1].length;
        break;
    }
  }
  // Opera doesn't know how to encode char 0.
  return text.join('\t').replace(/\x00/g, '%00').replace(/%20/g, ' ');
};


/**
 * Given the original text1, and an encoded string which describes the
 * operations required to transform text1 into text2, compute the full diff.
 * @param {string} text1 Source string for the diff.
 * @param {string} delta Delta text.
 * @return {Array.<Array.<number|string>>} Array of diff tuples.
 * @throws {Error} If invalid input.
 */
diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {
  var diffs = [];
  var diffsLength = 0;  // Keeping our own length var is faster in JS.
  var pointer = 0;  // Cursor in text1
  // Opera doesn't know how to decode char 0.
  delta = delta.replace(/%00/g, '\0');
  var tokens = delta.split(/\t/g);
  for (var x = 0; x < tokens.length; x++) {
    // Each token begins with a one character parameter which specifies the
    // operation of this token (delete, insert, equality).
    var param = tokens[x].substring(1);
    switch (tokens[x].charAt(0)) {
      case '+':
        try {
          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];
        } catch (ex) {
          // Malformed URI sequence.
          throw new Error('Illegal escape in diff_fromDelta: ' + param);
        }
        break;
      case '-':
        // Fall through.
      case '=':
        var n = parseInt(param, 10);
        if (isNaN(n) || n < 0) {
          throw new Error('Invalid number in diff_fromDelta: ' + param);
        }
        var text = text1.substring(pointer, pointer += n);
        if (tokens[x].charAt(0) == '=') {
          diffs[diffsLength++] = [DIFF_EQUAL, text];
        } else {
          diffs[diffsLength++] = [DIFF_DELETE, text];
        }
        break;
      default:
        // Blank tokens are ok (from a trailing \t).
        // Anything else is an error.
        if (tokens[x]) {
          throw new Error('Invalid diff operation in diff_fromDelta: ' +
                          tokens[x]);
        }
    }
  }
  if (pointer != text1.length) {
    throw new Error('Delta length (' + pointer +
        ') does not equal source text length (' + text1.length + ').');
  }
  return diffs;
};


//  MATCH FUNCTIONS


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 */
diff_match_patch.prototype.match_main = function(text, pattern, loc) {
  // Check for null inputs.
  if (text == null || pattern == null || loc == null) {
    throw new Error('Null input. (match_main)');
  }

  loc = Math.max(0, Math.min(loc, text.length));
  if (text == pattern) {
    // Shortcut (potentially not guaranteed by the algorithm)
    return 0;
  } else if (!text.length) {
    // Nothing to match.
    return -1;
  } else if (text.substring(loc, loc + pattern.length) == pattern) {
    // Perfect match at the perfect spot!  (Includes case of null pattern)
    return loc;
  } else {
    // Do a fuzzy compare.
    return this.match_bitap(text, pattern, loc);
  }
};


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc' using the
 * Bitap algorithm.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 * @private
 */
diff_match_patch.prototype.match_bitap = function(text, pattern, loc) {
  if (pattern.length > this.Match_MaxBits) {
    throw new Error('Pattern too long for this browser.');
  }

  // Initialise the alphabet.
  var s = this.match_alphabet(pattern);

  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Compute and return the score for a match with e errors and x location.
   * Accesses loc and pattern through being a closure.
   * @param {number} e Number of errors in match.
   * @param {number} x Location of match.
   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).
   * @private
   */
  function match_bitapScore(e, x) {
    var accuracy = e / pattern.length;
    var proximity = Math.abs(loc - x);
    if (!dmp.Match_Distance) {
      // Dodge divide by zero error.
      return proximity ? 1.0 : accuracy;
    }
    return accuracy + (proximity / dmp.Match_Distance);
  }

  // Highest score beyond which we give up.
  var score_threshold = this.Match_Threshold;
  // Is there a nearby exact match? (speedup)
  var best_loc = text.indexOf(pattern, loc);
  if (best_loc != -1) {
    score_threshold = Math.min(match_bitapScore(0, best_loc), score_threshold);
    // What about in the other direction? (speedup)
    best_loc = text.lastIndexOf(pattern, loc + pattern.length);
    if (best_loc != -1) {
      score_threshold =
          Math.min(match_bitapScore(0, best_loc), score_threshold);
    }
  }

  // Initialise the bit arrays.
  var matchmask = 1 << (pattern.length - 1);
  best_loc = -1;

  var bin_min, bin_mid;
  var bin_max = pattern.length + text.length;
  var last_rd;
  for (var d = 0; d < pattern.length; d++) {
    // Scan for the best match; each iteration allows for one more error.
    // Run a binary search to determine how far from 'loc' we can stray at this
    // error level.
    bin_min = 0;
    bin_mid = bin_max;
    while (bin_min < bin_mid) {
      if (match_bitapScore(d, loc + bin_mid) <= score_threshold) {
        bin_min = bin_mid;
      } else {
        bin_max = bin_mid;
      }
      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
    }
    // Use the result from this iteration as the maximum for the next.
    bin_max = bin_mid;
    var start = Math.max(1, loc - bin_mid + 1);
    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;

    var rd = Array(finish + 2);
    rd[finish + 1] = (1 << d) - 1;
    for (var j = finish; j >= start; j--) {
      // The alphabet (s) is a sparse hash, so the following line generates
      // warnings.
      var charMatch = s[text.charAt(j - 1)];
      if (d === 0) {  // First pass: exact match.
        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
      } else {  // Subsequent passes: fuzzy match.
        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch |
                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |
                last_rd[j + 1];
      }
      if (rd[j] & matchmask) {
        var score = match_bitapScore(d, j - 1);
        // This match will almost certainly be better than any existing match.
        // But check anyway.
        if (score <= score_threshold) {
          // Told you so.
          score_threshold = score;
          best_loc = j - 1;
          if (best_loc > loc) {
            // When passing loc, don't exceed our current distance from loc.
            start = Math.max(1, 2 * loc - best_loc);
          } else {
            // Already passed loc, downhill from here on in.
            break;
          }
        }
      }
    }
    // No hope for a (better) match at greater error levels.
    if (match_bitapScore(d + 1, loc) > score_threshold) {
      break;
    }
    last_rd = rd;
  }
  return best_loc;
};


/**
 * Initialise the alphabet for the Bitap algorithm.
 * @param {string} pattern The text to encode.
 * @return {Object} Hash of character locations.
 * @private
 */
diff_match_patch.prototype.match_alphabet = function(pattern) {
  var s = {};
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] = 0;
  }
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);
  }
  return s;
};


//  PATCH FUNCTIONS


/**
 * Increase the context until it is unique,
 * but don't let the pattern expand beyond Match_MaxBits.
 * @param {patch_obj} patch The patch to grow.
 * @param {string} text Source text.
 * @private
 */
diff_match_patch.prototype.patch_addContext = function(patch, text) {
  if (text.length == 0) {
    return;
  }
  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
  var padding = 0;

  // Look for the first and last matches of pattern in text.  If two different
  // matches are found, increase the pattern length.
  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&
         pattern.length < this.Match_MaxBits - this.Patch_Margin -
         this.Patch_Margin) {
    padding += this.Patch_Margin;
    pattern = text.substring(patch.start2 - padding,
                             patch.start2 + patch.length1 + padding);
  }
  // Add one chunk for good luck.
  padding += this.Patch_Margin;

  // Add the prefix.
  var prefix = text.substring(patch.start2 - padding, patch.start2);
  if (prefix) {
    patch.diffs.unshift([DIFF_EQUAL, prefix]);
  }
  // Add the suffix.
  var suffix = text.substring(patch.start2 + patch.length1,
                              patch.start2 + patch.length1 + padding);
  if (suffix) {
    patch.diffs.push([DIFF_EQUAL, suffix]);
  }

  // Roll back the start points.
  patch.start1 -= prefix.length;
  patch.start2 -= prefix.length;
  // Extend the lengths.
  patch.length1 += prefix.length + suffix.length;
  patch.length2 += prefix.length + suffix.length;
};


/**
 * Compute a list of patches to turn text1 into text2.
 * Use diffs if provided, otherwise compute it ourselves.
 * There are four ways to call this function, depending on what data is
 * available to the caller:
 * Method 1:
 * a = text1, b = text2
 * Method 2:
 * a = diffs
 * Method 3 (optimal):
 * a = text1, b = diffs
 * Method 4 (deprecated, use method 3):
 * a = text1, b = text2, c = diffs
 *
 * @param {string|Array.<Array.<number|string>>} a text1 (methods 1,3,4) or
 * Array of diff tuples for text1 to text2 (method 2).
 * @param {string|Array.<Array.<number|string>>} opt_b text2 (methods 1,4) or
 * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
 * @param {string|Array.<Array.<number|string>>} opt_c Array of diff tuples for
 * text1 to text2 (method 4) or undefined (methods 1,2,3).
 * @return {Array.<patch_obj>} Array of patch objects.
 */
diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {
  var text1, diffs;
  if (typeof a == 'string' && typeof opt_b == 'string' &&
      typeof opt_c == 'undefined') {
    // Method 1: text1, text2
    // Compute diffs from text1 and text2.
    text1 = a;
    diffs = this.diff_main(text1, opt_b, true);
    if (diffs.length > 2) {
      this.diff_cleanupSemantic(diffs);
      this.diff_cleanupEfficiency(diffs);
    }
  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&
      typeof opt_c == 'undefined') {
    // Method 2: diffs
    // Compute text1 from diffs.
    diffs = a;
    text1 = this.diff_text1(diffs);
  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&
      typeof opt_c == 'undefined') {
    // Method 3: text1, diffs
    text1 = a;
    diffs = opt_b;
  } else if (typeof a == 'string' && typeof opt_b == 'string' &&
      opt_c && typeof opt_c == 'object') {
    // Method 4: text1, text2, diffs
    // text2 is not used.
    text1 = a;
    diffs = opt_c;
  } else {
    throw new Error('Unknown call format to patch_make.');
  }

  if (diffs.length === 0) {
    return [];  // Get rid of the null case.
  }
  var patches = [];
  var patch = new patch_obj();
  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.
  var char_count1 = 0;  // Number of characters into the text1 string.
  var char_count2 = 0;  // Number of characters into the text2 string.
  // Start with text1 (prepatch_text) and apply the diffs until we arrive at
  // text2 (postpatch_text).  We recreate the patches one by one to determine
  // context info.
  var prepatch_text = text1;
  var postpatch_text = text1;
  for (var x = 0; x < diffs.length; x++) {
    var diff_type = diffs[x][0];
    var diff_text = diffs[x][1];

    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
      // A new patch starts here.
      patch.start1 = char_count1;
      patch.start2 = char_count2;
    }

    switch (diff_type) {
      case DIFF_INSERT:
        patch.diffs[patchDiffLength++] = diffs[x];
        patch.length2 += diff_text.length;
        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +
                         postpatch_text.substring(char_count2);
        break;
      case DIFF_DELETE:
        patch.length1 += diff_text.length;
        patch.diffs[patchDiffLength++] = diffs[x];
        postpatch_text = postpatch_text.substring(0, char_count2) +
                         postpatch_text.substring(char_count2 +
                             diff_text.length);
        break;
      case DIFF_EQUAL:
        if (diff_text.length <= 2 * this.Patch_Margin &&
            patchDiffLength && diffs.length != x + 1) {
          // Small equality inside a patch.
          patch.diffs[patchDiffLength++] = diffs[x];
          patch.length1 += diff_text.length;
          patch.length2 += diff_text.length;
        } else if (diff_text.length >= 2 * this.Patch_Margin) {
          // Time for a new patch.
          if (patchDiffLength) {
            this.patch_addContext(patch, prepatch_text);
            patches.push(patch);
            patch = new patch_obj();
            patchDiffLength = 0;
            // Unlike Unidiff, our patch lists have a rolling context.
            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff
            // Update prepatch text & pos to reflect the application of the
            // just completed patch.
            prepatch_text = postpatch_text;
            char_count1 = char_count2;
          }
        }
        break;
    }

    // Update the current character count.
    if (diff_type !== DIFF_INSERT) {
      char_count1 += diff_text.length;
    }
    if (diff_type !== DIFF_DELETE) {
      char_count2 += diff_text.length;
    }
  }
  // Pick up the leftover patch if not empty.
  if (patchDiffLength) {
    this.patch_addContext(patch, prepatch_text);
    patches.push(patch);
  }

  return patches;
};


/**
 * Given an array of patches, return another array that is identical.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 * @return {Array.<patch_obj>} Array of patch objects.
 */
diff_match_patch.prototype.patch_deepCopy = function(patches) {
  // Making deep copies is hard in JavaScript.
  var patchesCopy = [];
  for (var x = 0; x < patches.length; x++) {
    var patch = patches[x];
    var patchCopy = new patch_obj();
    patchCopy.diffs = [];
    for (var y = 0; y < patch.diffs.length; y++) {
      patchCopy.diffs[y] = patch.diffs[y].slice();
    }
    patchCopy.start1 = patch.start1;
    patchCopy.start2 = patch.start2;
    patchCopy.length1 = patch.length1;
    patchCopy.length2 = patch.length2;
    patchesCopy[x] = patchCopy;
  }
  return patchesCopy;
};


/**
 * Merge a set of patches onto the text.  Return a patched text, as well
 * as a list of true/false values indicating which patches were applied.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 * @param {string} text Old text.
 * @return {Array.<string|Array.<boolean>>} Two element Array, containing the
 *      new text and an array of boolean values.
 */
diff_match_patch.prototype.patch_apply = function(patches, text) {
  if (patches.length == 0) {
    return [text, []];
  }

  // Deep copy the patches so that no changes are made to originals.
  patches = this.patch_deepCopy(patches);

  var nullPadding = this.patch_addPadding(patches);
  text = nullPadding + text + nullPadding;

  this.patch_splitMax(patches);
  // delta keeps track of the offset between the expected and actual location
  // of the previous patch.  If there are patches expected at positions 10 and
  // 20, but the first patch was found at 12, delta is 2 and the second patch
  // has an effective expected position of 22.
  var delta = 0;
  var results = [];
  for (var x = 0; x < patches.length; x++) {
    var expected_loc = patches[x].start2 + delta;
    var text1 = this.diff_text1(patches[x].diffs);
    var start_loc;
    var end_loc = -1;
    if (text1.length > this.Match_MaxBits) {
      // patch_splitMax will only provide an oversized pattern in the case of
      // a monster delete.
      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),
                                  expected_loc);
      if (start_loc != -1) {
        end_loc = this.match_main(text,
            text1.substring(text1.length - this.Match_MaxBits),
            expected_loc + text1.length - this.Match_MaxBits);
        if (end_loc == -1 || start_loc >= end_loc) {
          // Can't find valid trailing context.  Drop this patch.
          start_loc = -1;
        }
      }
    } else {
      start_loc = this.match_main(text, text1, expected_loc);
    }
    if (start_loc == -1) {
      // No match found.  :(
      results[x] = false;
      // Subtract the delta for this failed patch from subsequent patches.
      delta -= patches[x].length2 - patches[x].length1;
    } else {
      // Found a match.  :)
      results[x] = true;
      delta = start_loc - expected_loc;
      var text2;
      if (end_loc == -1) {
        text2 = text.substring(start_loc, start_loc + text1.length);
      } else {
        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
      }
      if (text1 == text2) {
        // Perfect match, just shove the replacement text in.
        text = text.substring(0, start_loc) +
               this.diff_text2(patches[x].diffs) +
               text.substring(start_loc + text1.length);
      } else {
        // Imperfect match.  Run a diff to get a framework of equivalent
        // indices.
        var diffs = this.diff_main(text1, text2, false);
        if (text1.length > this.Match_MaxBits &&
            this.diff_levenshtein(diffs) / text1.length >
            this.Patch_DeleteThreshold) {
          // The end points match, but the content is unacceptably bad.
          results[x] = false;
        } else {
          this.diff_cleanupSemanticLossless(diffs);
          var index1 = 0;
          var index2;
          for (var y = 0; y < patches[x].diffs.length; y++) {
            var mod = patches[x].diffs[y];
            if (mod[0] !== DIFF_EQUAL) {
              index2 = this.diff_xIndex(diffs, index1);
            }
            if (mod[0] === DIFF_INSERT) {  // Insertion
              text = text.substring(0, start_loc + index2) + mod[1] +
                     text.substring(start_loc + index2);
            } else if (mod[0] === DIFF_DELETE) {  // Deletion
              text = text.substring(0, start_loc + index2) +
                     text.substring(start_loc + this.diff_xIndex(diffs,
                         index1 + mod[1].length));
            }
            if (mod[0] !== DIFF_DELETE) {
              index1 += mod[1].length;
            }
          }
        }
      }
    }
  }
  // Strip the padding off.
  text = text.substring(nullPadding.length, text.length - nullPadding.length);
  return [text, results];
};


/**
 * Add some padding on text start and end so that edges can match something.
 * Intended to be called only from within patch_apply.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 * @return {string} The padding string added to each side.
 */
diff_match_patch.prototype.patch_addPadding = function(patches) {
  var paddingLength = this.Patch_Margin;
  var nullPadding = '';
  for (var x = 1; x <= paddingLength; x++) {
    nullPadding += String.fromCharCode(x);
  }

  // Bump all the patches forward.
  for (var x = 0; x < patches.length; x++) {
    patches[x].start1 += paddingLength;
    patches[x].start2 += paddingLength;
  }

  // Add some padding on start of first diff.
  var patch = patches[0];
  var diffs = patch.diffs;
  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
    // Add nullPadding equality.
    diffs.unshift([DIFF_EQUAL, nullPadding]);
    patch.start1 -= paddingLength;  // Should be 0.
    patch.start2 -= paddingLength;  // Should be 0.
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[0][1].length) {
    // Grow first equality.
    var extraLength = paddingLength - diffs[0][1].length;
    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
    patch.start1 -= extraLength;
    patch.start2 -= extraLength;
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }

  // Add some padding on end of last diff.
  patch = patches[patches.length - 1];
  diffs = patch.diffs;
  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
    // Add nullPadding equality.
    diffs.push([DIFF_EQUAL, nullPadding]);
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[diffs.length - 1][1].length) {
    // Grow last equality.
    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }

  return nullPadding;
};


/**
 * Look through the patches and break up any which are longer than the maximum
 * limit of the match algorithm.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 */
diff_match_patch.prototype.patch_splitMax = function(patches) {
  for (var x = 0; x < patches.length; x++) {
    if (patches[x].length1 > this.Match_MaxBits) {
      var bigpatch = patches[x];
      // Remove the big old patch.
      patches.splice(x--, 1);
      var patch_size = this.Match_MaxBits;
      var start1 = bigpatch.start1;
      var start2 = bigpatch.start2;
      var precontext = '';
      while (bigpatch.diffs.length !== 0) {
        // Create one of several smaller patches.
        var patch = new patch_obj();
        var empty = true;
        patch.start1 = start1 - precontext.length;
        patch.start2 = start2 - precontext.length;
        if (precontext !== '') {
          patch.length1 = patch.length2 = precontext.length;
          patch.diffs.push([DIFF_EQUAL, precontext]);
        }
        while (bigpatch.diffs.length !== 0 &&
               patch.length1 < patch_size - this.Patch_Margin) {
          var diff_type = bigpatch.diffs[0][0];
          var diff_text = bigpatch.diffs[0][1];
          if (diff_type === DIFF_INSERT) {
            // Insertions are harmless.
            patch.length2 += diff_text.length;
            start2 += diff_text.length;
            patch.diffs.push(bigpatch.diffs.shift());
            empty = false;
          } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&
                     patch.diffs[0][0] == DIFF_EQUAL &&
                     diff_text.length > 2 * patch_size) {
            // This is a large deletion.  Let it pass in one chunk.
            patch.length1 += diff_text.length;
            start1 += diff_text.length;
            empty = false;
            patch.diffs.push([diff_type, diff_text]);
            bigpatch.diffs.shift();
          } else {
            // Deletion or equality.  Only take as much as we can stomach.
            diff_text = diff_text.substring(0, patch_size - patch.length1 -
                                               this.Patch_Margin);
            patch.length1 += diff_text.length;
            start1 += diff_text.length;
            if (diff_type === DIFF_EQUAL) {
              patch.length2 += diff_text.length;
              start2 += diff_text.length;
            } else {
              empty = false;
            }
            patch.diffs.push([diff_type, diff_text]);
            if (diff_text == bigpatch.diffs[0][1]) {
              bigpatch.diffs.shift();
            } else {
              bigpatch.diffs[0][1] =
                  bigpatch.diffs[0][1].substring(diff_text.length);
            }
          }
        }
        // Compute the head context for the next patch.
        precontext = this.diff_text2(patch.diffs);
        precontext =
            precontext.substring(precontext.length - this.Patch_Margin);
        // Append the end context for this patch.
        var postcontext = this.diff_text1(bigpatch.diffs)
                              .substring(0, this.Patch_Margin);
        if (postcontext !== '') {
          patch.length1 += postcontext.length;
          patch.length2 += postcontext.length;
          if (patch.diffs.length !== 0 &&
              patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {
            patch.diffs[patch.diffs.length - 1][1] += postcontext;
          } else {
            patch.diffs.push([DIFF_EQUAL, postcontext]);
          }
        }
        if (!empty) {
          patches.splice(++x, 0, patch);
        }
      }
    }
  }
};


/**
 * Take a list of patches and return a textual representation.
 * @param {Array.<patch_obj>} patches Array of patch objects.
 * @return {string} Text representation of patches.
 */
diff_match_patch.prototype.patch_toText = function(patches) {
  var text = [];
  for (var x = 0; x < patches.length; x++) {
    text[x] = patches[x];
  }
  return text.join('');
};


/**
 * Parse a textual representation of patches and return a list of patch objects.
 * @param {string} textline Text representation of patches.
 * @return {Array.<patch_obj>} Array of patch objects.
 * @throws {Error} If invalid input.
 */
diff_match_patch.prototype.patch_fromText = function(textline) {
  var patches = [];
  if (!textline) {
    return patches;
  }
  // Opera doesn't know how to decode char 0.
  textline = textline.replace(/%00/g, '\0');
  var text = textline.split('\n');
  var textPointer = 0;
  while (textPointer < text.length) {
    var m = text[textPointer].match(/^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/);
    if (!m) {
      throw new Error('Invalid patch string: ' + text[textPointer]);
    }
    var patch = new patch_obj();
    patches.push(patch);
    patch.start1 = parseInt(m[1], 10);
    if (m[2] === '') {
      patch.start1--;
      patch.length1 = 1;
    } else if (m[2] == '0') {
      patch.length1 = 0;
    } else {
      patch.start1--;
      patch.length1 = parseInt(m[2], 10);
    }

    patch.start2 = parseInt(m[3], 10);
    if (m[4] === '') {
      patch.start2--;
      patch.length2 = 1;
    } else if (m[4] == '0') {
      patch.length2 = 0;
    } else {
      patch.start2--;
      patch.length2 = parseInt(m[4], 10);
    }
    textPointer++;

    while (textPointer < text.length) {
      var sign = text[textPointer].charAt(0);
      try {
        var line = decodeURI(text[textPointer].substring(1));
      } catch (ex) {
        // Malformed URI sequence.
        throw new Error('Illegal escape in patch_fromText: ' + line);
      }
      if (sign == '-') {
        // Deletion.
        patch.diffs.push([DIFF_DELETE, line]);
      } else if (sign == '+') {
        // Insertion.
        patch.diffs.push([DIFF_INSERT, line]);
      } else if (sign == ' ') {
        // Minor equality.
        patch.diffs.push([DIFF_EQUAL, line]);
      } else if (sign == '@') {
        // Start of next patch.
        break;
      } else if (sign === '') {
        // Blank line?  Whatever.
      } else {
        // WTF?
        throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
      }
      textPointer++;
    }
  }
  return patches;
};


/**
 * Class representing one patch operation.
 * @constructor
 */
function patch_obj() {
  /** @type {Array.<Array.<number|string>>} */
  this.diffs = [];
  /** @type {?number} */
  this.start1 = null;
  /** @type {?number} */
  this.start2 = null;
  /** @type {number} */
  this.length1 = 0;
  /** @type {number} */
  this.length2 = 0;
}


/**
 * Emmulate GNU diff's format.
 * Header: @@ -382,8 +481,9 @@
 * Indicies are printed as 1-based, not 0-based.
 * @return {string} The GNU diff string.
 */
patch_obj.prototype.toString = function() {
  var coords1, coords2;
  if (this.length1 === 0) {
    coords1 = this.start1 + ',0';
  } else if (this.length1 == 1) {
    coords1 = this.start1 + 1;
  } else {
    coords1 = (this.start1 + 1) + ',' + this.length1;
  }
  if (this.length2 === 0) {
    coords2 = this.start2 + ',0';
  } else if (this.length2 == 1) {
    coords2 = this.start2 + 1;
  } else {
    coords2 = (this.start2 + 1) + ',' + this.length2;
  }
  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\n'];
  var op;
  // Escape the body of the patch with %xx notation.
  for (var x = 0; x < this.diffs.length; x++) {
    switch (this.diffs[x][0]) {
      case DIFF_INSERT:
        op = '+';
        break;
      case DIFF_DELETE:
        op = '-';
        break;
      case DIFF_EQUAL:
        op = ' ';
        break;
    }
    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\n';
  }
  // Opera doesn't know how to encode char 0.
  return text.join('').replace(/\x00/g, '%00').replace(/%20/g, ' ');
};


// Export these global variables so that they survive Google's JS compiler.
/*changed by lfborjas: changed `window` for `exports` to make it suitable for the node.js module conventions*/
exports.diff_match_patch = diff_match_patch;
exports.patch_obj = patch_obj;
exports.DIFF_DELETE = DIFF_DELETE;
exports.DIFF_INSERT = DIFF_INSERT;
exports.DIFF_EQUAL = DIFF_EQUAL;


/***/ }),

/***/ "./example/client/index.ts":
/*!*********************************!*\
  !*** ./example/client/index.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const index_1 = __importDefault(__webpack_require__(/*! ../../src/browser_sdk/index */ "./src/browser_sdk/index.ts"));
const lrEditor_1 = __importDefault(__webpack_require__(/*! ./lrEditor */ "./example/client/lrEditor.ts"));
document.addEventListener('DOMContentLoaded', (event) => __awaiter(void 0, void 0, void 0, function* () {
    const linkedRecords = new index_1.default(new URL('http://10.60.3.218:3000'));
    // const content = await linkedRecords.Attribute.create('longText', 'inital');
    // console.log('New ContentId', content.id);
    // const contentId = content.id;
    const contentId = 'l-39d5ab07-b571-4d3b-abf0-2a5974fe41df';
    let { content: contentAttribute, refernces: [referencesAttribute] } = yield linkedRecords.Attribute.findAll({
        content: contentId,
        refernces: [
            ['isA', 'referenceStore'],
            ['belongsTo', contentId],
        ],
        referenceSources: [
            ['isA', 'referenceSourceStore'],
            ['belongsTo', contentId],
            ['belongsTo', 'usr-xx'],
        ]
    });
    if (!referencesAttribute) {
        referencesAttribute = (yield linkedRecords.Attribute.create('keyValue', {}));
        yield linkedRecords.Fact.createAll([
            [referencesAttribute.id, 'isA', 'referenceStore'],
            [referencesAttribute.id, 'belongsTo', contentId]
        ]);
    }
    (0, lrEditor_1.default)('value', contentAttribute, referencesAttribute);
}));


/***/ }),

/***/ "./example/client/lrEditor.ts":
/*!************************************!*\
  !*** ./example/client/lrEditor.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const editor_1 = __importDefault(__webpack_require__(/*! structured-text-editor/src/editor */ "../structured-text-editor/src/editor.js"));
const changesets_1 = __webpack_require__(/*! changesets */ "./node_modules/changesets/lib/index.js");
const key_value_change_1 = __importDefault(__webpack_require__(/*! ../../src/attributes/key_value/key_value_change */ "./src/attributes/key_value/key_value_change.ts"));
const long_text_change_1 = __importDefault(__webpack_require__(/*! ../../src/attributes/long_text/long_text_change */ "./src/attributes/long_text/long_text_change.ts"));
function default_1(domId, contentAttribute, referencesAttribute) {
    return __awaiter(this, void 0, void 0, function* () {
        const editor = new editor_1.default(domId);
        editor.setContent(yield contentAttribute.getValue());
        editor.addReferenceData(yield referencesAttribute.getValue());
        referencesAttribute.subscribe((changeset) => __awaiter(this, void 0, void 0, function* () {
            const newData = {};
            changeset.change.forEach(({ key, value }) => {
                newData[key] = value;
            });
            editor.addReferenceData(newData);
        }));
        editor.subscribeReferenceInsertion((key, value) => __awaiter(this, void 0, void 0, function* () {
            referencesAttribute.change(new key_value_change_1.default([{ key, value }]));
        }));
        contentAttribute.subscribe((changeset, changeInfo) => __awaiter(this, void 0, void 0, function* () {
            const attr = { actor: { id: changeInfo.actorId } };
            try {
                editor.applyChangeset(changeset.changeset, attr);
            }
            catch (ex) {
                console.log('failed to apply changeset to EDITOR content. Falling back to replace the whole editors content', ex);
                editor.setContent(yield contentAttribute.getValue(), attr);
            }
        }));
        editor.subscribe((modificationLog) => __awaiter(this, void 0, void 0, function* () {
            if (!modificationLog.actor) {
                try {
                    yield contentAttribute.change(new long_text_change_1.default(modificationLog.toChangeset(changesets_1.Changeset)));
                }
                catch (ex) {
                    console.log('failed to apply changeset to ATTRIBUTE. Falling back to replace whole attribute content', ex);
                    yield contentAttribute.set(editor.getOriginalContent());
                }
            }
        }));
    });
}
exports["default"] = default_1;


/***/ }),

/***/ "./lib/server-side-events/client/index.ts":
/*!************************************************!*\
  !*** ./lib/server-side-events/client/index.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
class ServerSideEvents {
    constructor() {
        this.subscriptions = {};
        this.connetions = {};
        this.isPaused = false;
        this.messagesWhilePaused = [];
        this.tabId = (Math.random() + 1).toString(36).substring(7);
    }
    getEventSourceAsync(url) {
        if (!url.searchParams.has('tabId')) {
            url.searchParams.append('tabId', this.tabId);
        }
        return new Promise((resolve, reject) => {
            const source = new EventSource(url.toString());
            source.onerror = reject;
            source.onopen = () => resolve(source);
        });
    }
    subscribe(url, channel, handler) {
        return __awaiter(this, void 0, void 0, function* () {
            const parsedUrl = new URL(url);
            const subId = `${parsedUrl.origin}-${channel}`;
            if (!parsedUrl.searchParams.has('tabId')) {
                parsedUrl.searchParams.append('tabId', this.tabId);
            }
            yield this.ensureConnection(parsedUrl.origin);
            yield fetch(parsedUrl.toString());
            this.subscriptions[subId] = this.subscriptions[subId] || [];
            this.subscriptions[subId].push(handler);
        });
    }
    unsubscribeAll() {
        Object.values(this.connetions).forEach((connection) => {
            connection.close();
        });
        this.connetions = {};
    }
    pauseNotification() {
        this.isPaused = true;
    }
    unpauseNotification() {
        this.messagesWhilePaused.forEach(({ cb, data }) => {
            cb(data);
        });
        this.messagesWhilePaused = [];
    }
    ensureConnection(origin) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = new URL(origin);
            url.pathname = '/server-sent-events';
            if (!this.connetions[url.origin]) {
                try {
                    this.connetions[url.origin] = yield this.getEventSourceAsync(url);
                }
                catch (ex) {
                    this.connetions[url.origin] = yield this.getEventSourceAsync(url);
                }
                this.connetions[url.origin].onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    const { sseChannel } = data;
                    if (!sseChannel) {
                        return;
                    }
                    delete data.sseChannel;
                    const subscriptions = this.subscriptions[`${url.origin}-${sseChannel}`];
                    if (subscriptions) {
                        subscriptions.forEach((cb) => {
                            if (this.isPaused) {
                                this.messagesWhilePaused.push({ cb, data });
                            }
                            else {
                                cb(data);
                            }
                        });
                    }
                };
            }
            return this.connetions[origin];
        });
    }
}
exports["default"] = ServerSideEvents;


/***/ }),

/***/ "./src/attributes/abstract/abstract_attribute_client.ts":
/*!**************************************************************!*\
  !*** ./src/attributes/abstract/abstract_attribute_client.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* eslint-disable import/no-cycle */
/* eslint-disable class-methods-use-this */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
class AbstractAttributeClient {
    constructor(linkedRecords, serverSideEvents, id) {
        this.id = id;
        this.linkedRecords = linkedRecords;
        this.serverSideEvents = serverSideEvents;
        this.serverURL = linkedRecords.serverURL;
        this.observers = [];
        // because the same user can be logged on two browsers/laptops, we need
        // a clientId and an actorId
        this.clientId = linkedRecords.clientId;
        this.actorId = linkedRecords.actorId;
        this.version = '0';
        this.value = this.getDefaultValue();
        this.isInitialized = false;
    }
    static getDataTypeName() {
        throw new Error('getDataTypeName needs to be implemented in child class');
    }
    static isAttributeId(id) {
        return id.split('-')[0] === this.prototype.getDataTypePrefix();
    }
    create(value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.id) {
                throw new Error(`Cannot create attribute because it has an id assigned (${this.id})`);
            }
            this.id = `${this.getDataTypePrefix()}-${(0, uuid_1.v4)()}`;
            const response = yield this.withConnectionLostHandler(() => fetch(`${this.linkedRecords.serverURL}attributes/${this.id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    clientId: this.clientId,
                    actorId: this.actorId,
                    value,
                }),
            }));
            if (!response) {
                throw new Error('Error communicating with the server when creating attribute.');
            }
            if (response.status === 401) {
                this.handleExpiredLoginSession();
                return;
            }
            if (response.status !== 200) {
                throw new Error(`Error creating attribute: ${yield response.text()}`);
            }
            const responseBody = yield response.json();
            yield this.load(responseBody);
        });
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.load();
            return {
                value: this.value,
                changeId: this.version,
                actorId: this.actorId,
            };
        });
    }
    getValue() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.load();
            return this.value;
        });
    }
    set(newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.load();
            if (newValue === this.value) {
                return;
            }
            yield this.rawSet(newValue);
        });
    }
    change(change) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.load();
            yield this.rawChange(change);
        });
    }
    subscribe(observer) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.load();
            this.observers.push(observer);
        });
    }
    handleExpiredLoginSession() {
        const win = window;
        win.location = '/login';
    }
    handleConnectionError(error) {
        console.log('Connection Lost', error);
    }
    withConnectionLostHandler(fn) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield fn();
            }
            catch (ex) {
                if (ex.message === 'Failed to fetch') {
                    this.handleConnectionError(ex);
                }
                return false;
            }
        });
    }
    load(serverState) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = serverState;
            if (this.isInitialized) {
                return;
            }
            if (!this.id) {
                throw new Error('cannot load an attribute without id');
            }
            this.isInitialized = true;
            if (!result) {
                const url = `${this.serverURL}attributes/${this.id}?clientId=${this.clientId}&actorId=${this.actorId}`;
                const response = yield this.withConnectionLostHandler(() => fetch(url));
                if (response.status === 401) {
                    this.handleExpiredLoginSession();
                    return;
                }
                const jsonBody = yield response.json();
                result = {
                    changeId: jsonBody.changeId,
                    value: jsonBody.value,
                };
            }
            this.version = result.changeId;
            this.value = this.deserializeValue(typeof result.value === 'string' ? result.value : JSON.stringify(result.value));
            this.onLoad();
            this.notifySubscribers(undefined, undefined);
            const url = `${this.serverURL}attributes/${this.id}/changes?clientId=${this.clientId}&actorId=${this.actorId}`;
            yield this.serverSideEvents.subscribe(url, this.id, (parsedData) => {
                if (parsedData.attributeId !== this.id) {
                    return;
                }
                this.onServerMessage(parsedData);
            });
        });
    }
    sendToServer(change) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.serverURL}attributes/${this.id}?clientId=${this.clientId}&actorId=${this.actorId}`;
            const response = yield this.withConnectionLostHandler(() => fetch(url, {
                method: 'PATCH',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(change.toJSON()),
            }));
            if (response.status === 401) {
                this.handleExpiredLoginSession();
            }
        });
    }
    notifySubscribers(change, fullChangeInfo) {
        this.observers.forEach((callback) => {
            callback(change, fullChangeInfo);
        });
    }
}
exports["default"] = AbstractAttributeClient;


/***/ }),

/***/ "./src/attributes/abstract/serialized_change_with_metadata.ts":
/*!********************************************************************!*\
  !*** ./src/attributes/abstract/serialized_change_with_metadata.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class SerializedChangeWithMetadata {
    constructor(attributeId, actorId, clientId, change) {
        this.attributeId = attributeId;
        this.actorId = actorId;
        this.clientId = clientId;
        this.change = change;
    }
    toJSON() {
        return {
            attributeId: this.attributeId,
            change: this.change.toJSON(),
            actorId: this.actorId,
            clientId: this.clientId,
        };
    }
}
exports["default"] = SerializedChangeWithMetadata;


/***/ }),

/***/ "./src/attributes/key_value/client/index.ts":
/*!**************************************************!*\
  !*** ./src/attributes/key_value/client/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable import/no-cycle */
/* eslint-disable class-methods-use-this */
const abstract_attribute_client_1 = __importDefault(__webpack_require__(/*! ../../abstract/abstract_attribute_client */ "./src/attributes/abstract/abstract_attribute_client.ts"));
const serialized_change_with_metadata_1 = __importDefault(__webpack_require__(/*! ../../abstract/serialized_change_with_metadata */ "./src/attributes/abstract/serialized_change_with_metadata.ts"));
const key_value_change_1 = __importDefault(__webpack_require__(/*! ../key_value_change */ "./src/attributes/key_value/key_value_change.ts"));
class KeyValueAttribute extends abstract_attribute_client_1.default {
    static getDataTypePrefix() {
        return 'kv';
    }
    static getDataTypeName() {
        return 'keyValue';
    }
    getDataTypePrefix() {
        return KeyValueAttribute.getDataTypePrefix();
    }
    getDataTypeName() {
        return KeyValueAttribute.getDataTypeName();
    }
    getDefaultValue() {
        return {};
    }
    deserializeValue(serializedValue) {
        return JSON.parse(serializedValue);
    }
    rawSet(newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            let changes = [];
            Object.entries(this.value).forEach(([key]) => {
                changes.push({ key, value: null });
            });
            Object.entries(newValue).forEach(([key, value]) => {
                changes = changes.filter((ch) => ch.key !== key);
                changes.push({ key, value });
            });
            this.change(new key_value_change_1.default(changes));
        });
    }
    rawChange(change) {
        return __awaiter(this, void 0, void 0, function* () {
            this.transmitChange(new key_value_change_1.default(change.change, this.version));
            this.value = change.apply(this.value);
        });
    }
    onLoad() {
    }
    onServerMessage(changeWithMetadata) {
        const change = new key_value_change_1.default(changeWithMetadata.change, changeWithMetadata.change.changeId);
        if (changeWithMetadata.clientId === this.clientId) {
            return;
        }
        this.value = change.apply(this.value);
        this.version = change.changeId;
        this.notifySubscribers(change, changeWithMetadata);
    }
    transmitChange(changeset) {
        if (!this.id) {
            throw new Error('change can not be transmitted because attribute does not has an id');
        }
        this.sendToServer(new serialized_change_with_metadata_1.default(this.id, this.actorId, this.clientId, changeset));
    }
}
exports["default"] = KeyValueAttribute;


/***/ }),

/***/ "./src/attributes/key_value/key_value_change.ts":
/*!******************************************************!*\
  !*** ./src/attributes/key_value/key_value_change.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class KeyValueChange {
    constructor(changeset, changeId) {
        this.changeId = changeId !== null && changeId !== void 0 ? changeId : 'uncommited';
        this.change = changeset;
    }
    static fromJSON(input, changeId) {
        return new KeyValueChange(input, changeId);
    }
    static fromString(input) {
        return new KeyValueChange(JSON.parse(input));
    }
    toString() {
        return JSON.stringify(this.change);
    }
    toJSON() {
        return this.change;
    }
    apply(input) {
        const result = JSON.parse(JSON.stringify(input));
        this.change.forEach((aChange) => {
            if (aChange.value === null) {
                delete result[aChange.key];
            }
            else {
                result[aChange.key] = aChange.value;
            }
        });
        return result;
    }
    merge(other) {
        let mergedChanges = [];
        this.change.forEach((ch) => {
            mergedChanges = mergedChanges.filter((x) => x.key !== ch.key);
            mergedChanges.push(ch);
        });
        other.change.forEach((ch) => {
            mergedChanges = mergedChanges.filter((x) => x.key !== ch.key);
            mergedChanges.push(ch);
        });
        return new KeyValueChange(mergedChanges);
    }
}
exports["default"] = KeyValueChange;


/***/ }),

/***/ "./src/attributes/long_text/client/buffer.ts":
/*!***************************************************!*\
  !*** ./src/attributes/long_text/client/buffer.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class ChangeBuffer {
    add(changeset) {
        this.value = this.value ? this.value.merge(changeset) : changeset;
    }
    // this function returns a transformed version of the foreignChange which
    // fits into the current client state. This is required because the client
    // could have some changes which has not been send to the server yet. So, the
    // server don't know about these changes and the changes comming from the server
    // would not fit into the client state.
    transformAgainst(foreignChange, changeInTransmission) {
        var _a, _b;
        if (!changeInTransmission) {
            return foreignChange;
        }
        this.inFlightOp = this.inFlightOp || changeInTransmission;
        const c2 = foreignChange.transformAgainst(this.inFlightOp, true);
        this.inFlightOp = (_a = this.inFlightOp) === null || _a === void 0 ? void 0 : _a.transformAgainst(foreignChange, false);
        if (!this.value)
            return c2;
        // instead of using a bridge we use c2 to transform the
        // foreignChange (change from server) into the client state.
        const c1 = c2.transformAgainst(this.value, true);
        // "Once we have this inferred operation, c2, we can use it
        // to transform the buffer (b) "down" one step"
        this.value = (_b = this.value) === null || _b === void 0 ? void 0 : _b.transformAgainst(c2, false);
        return c1;
    }
    clear() {
        this.value = undefined;
        this.inFlightOp = undefined;
    }
    getValue() {
        return this.value;
    }
}
exports["default"] = ChangeBuffer;


/***/ }),

/***/ "./src/attributes/long_text/client/index.ts":
/*!**************************************************!*\
  !*** ./src/attributes/long_text/client/index.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* eslint-disable import/no-cycle */
/* eslint-disable class-methods-use-this */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const abstract_attribute_client_1 = __importDefault(__webpack_require__(/*! ../../abstract/abstract_attribute_client */ "./src/attributes/abstract/abstract_attribute_client.ts"));
const serialized_change_with_metadata_1 = __importDefault(__webpack_require__(/*! ../../abstract/serialized_change_with_metadata */ "./src/attributes/abstract/serialized_change_with_metadata.ts"));
const long_text_change_1 = __importDefault(__webpack_require__(/*! ../long_text_change */ "./src/attributes/long_text/long_text_change.ts"));
const buffer_1 = __importDefault(__webpack_require__(/*! ./buffer */ "./src/attributes/long_text/client/buffer.ts"));
class LongTextAttribute extends abstract_attribute_client_1.default {
    constructor() {
        super(...arguments);
        this.buffer = new buffer_1.default();
        this.changeInTransmission = undefined;
    }
    static getDataTypePrefix() {
        return 'l';
    }
    static getDataTypeName() {
        return 'longText';
    }
    getDataTypePrefix() {
        return 'l';
    }
    getDataTypeName() {
        return LongTextAttribute.getDataTypeName();
    }
    getDefaultValue() {
        return '';
    }
    deserializeValue(serializedValue) {
        return serializedValue;
    }
    rawSet(newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeset = long_text_change_1.default.fromDiff(this.value, newValue);
            yield this.change(changeset);
        });
    }
    rawChange(changeset) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Check for version is valid
            // if (this.version === '0') {
            //   throw Error('Cannot change attribute as attributed state is not loaded from server!');
            // }
            this.value = changeset.apply(this.value);
            if (this.changeInTransmission) {
                this.buffer.add(changeset);
            }
            else {
                this.transmitChange(new long_text_change_1.default(changeset.changeset, this.version));
            }
        });
    }
    onLoad() {
        this.buffer.clear();
    }
    onServerMessage(changeWithMetadata) {
        if (changeWithMetadata.clientId === this.clientId) {
            this.processApproval(changeWithMetadata);
        }
        else {
            this.processForeignChange(changeWithMetadata);
        }
    }
    processForeignChange(foreignChangeWithMetadata) {
        var _a;
        try {
            const foreignChangeset = long_text_change_1.default.fromString(foreignChangeWithMetadata.change.changeset);
            const transformedForeignChange = this.buffer.transformAgainst(foreignChangeset, (_a = this.changeInTransmission) === null || _a === void 0 ? void 0 : _a.change);
            this.value = transformedForeignChange.apply(this.value);
            this.version = foreignChangeWithMetadata.change.changeId;
            this.notifySubscribers(transformedForeignChange, foreignChangeWithMetadata);
        }
        catch (ex) {
            console.log('ERROR: processing foreign change failed (probably because of a previous message loss). Reload server state to recover.', ex);
            this.load();
        }
    }
    processApproval(approval) {
        const bufferedChanges = this.buffer.getValue();
        this.changeInTransmission = undefined;
        this.version = approval.change.changeId;
        this.buffer.clear();
        if (bufferedChanges) {
            this.transmitChange(new long_text_change_1.default(bufferedChanges.changeset, approval.change.changeId));
        }
    }
    transmitChange(changeset) {
        if (!this.id) {
            throw new Error('change can not be transmitted because attribute does not has an id');
        }
        this.changeInTransmission = new serialized_change_with_metadata_1.default(this.id, this.actorId, this.clientId, changeset);
        this.sendToServer(this.changeInTransmission);
    }
}
exports["default"] = LongTextAttribute;


/***/ }),

/***/ "./src/attributes/long_text/long_text_change.ts":
/*!******************************************************!*\
  !*** ./src/attributes/long_text/long_text_change.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const changesets_1 = __webpack_require__(/*! changesets */ "./node_modules/changesets/lib/index.js");
const diff_match_patch_1 = __webpack_require__(/*! diff_match_patch */ "./node_modules/diff_match_patch/lib/diff_match_patch.js");
const diffEngine = new diff_match_patch_1.diff_match_patch();
class LongTextChange {
    constructor(changeset, changeId) {
        this.changeset = changeset;
        this.changeId = changeId !== null && changeId !== void 0 ? changeId : 'uncommited';
    }
    static fromString(change) {
        return new LongTextChange(changesets_1.Changeset.unpack(change));
    }
    static fromDiff(a, b) {
        return new LongTextChange(changesets_1.Changeset.fromDiff(diffEngine.diff_main(a, b)));
    }
    apply(value) {
        return this.changeset.apply(value);
    }
    toString() {
        return typeof this.changeset === 'string'
            ? this.changeset
            : this.changeset.pack();
    }
    transformAgainst(change, side) {
        if (!change) {
            return this;
        }
        return new LongTextChange(this.changeset.transformAgainst(change.changeset, side));
    }
    merge(otherChange) {
        return new LongTextChange(this.changeset.merge(otherChange.changeset));
    }
    toJSON() {
        return {
            changeset: this.toString(),
            changeId: this.changeId,
        };
    }
}
exports["default"] = LongTextChange;


/***/ }),

/***/ "./src/browser_sdk/index.ts":
/*!**********************************!*\
  !*** ./src/browser_sdk/index.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* eslint-disable max-classes-per-file */
/* eslint-disable import/no-cycle */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
const client_1 = __importDefault(__webpack_require__(/*! ../attributes/long_text/client */ "./src/attributes/long_text/client/index.ts"));
const client_2 = __importDefault(__webpack_require__(/*! ../attributes/key_value/client */ "./src/attributes/key_value/client/index.ts"));
const client_3 = __importDefault(__webpack_require__(/*! ../../lib/server-side-events/client */ "./lib/server-side-events/client/index.ts"));
const client_4 = __importDefault(__webpack_require__(/*! ../facts/client */ "./src/facts/client/index.ts"));
class AttributesRepository {
    constructor(linkedRecords, serverSideEvents) {
        this.linkedRecords = linkedRecords;
        this.serverSideEvents = serverSideEvents;
    }
    create(attributeType, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const AttributeClass = AttributesRepository
                .attributeTypes
                .find((c) => c.getDataTypeName() === attributeType);
            if (!AttributeClass) {
                throw new Error(`Attribute Type ${attributeType} is unknown`);
            }
            const attribute = new AttributeClass(this.linkedRecords, this.serverSideEvents);
            yield attribute.create(value);
            return attribute;
        });
    }
    find(attributeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const [attributeTypePrefix] = attributeId.split('-');
            const AttributeClass = AttributesRepository
                .attributeTypes
                .find((c) => c.getDataTypePrefix() === attributeTypePrefix);
            if (!AttributeClass) {
                throw new Error(`Attribute ID ${attributeId} is unknown`);
            }
            const attribute = new AttributeClass(this.linkedRecords, this.serverSideEvents, attributeId);
            yield attribute.get();
            return attribute;
        });
    }
    findAll(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = {};
            const qEntries = Object.entries(query);
            const promises = [];
            for (let j = 0; j < qEntries.length; j += 1) {
                const qEntry = qEntries[j];
                if (qEntry) {
                    const n = qEntry[0];
                    const q = qEntry[1];
                    if (typeof q === 'string') {
                        promises.push(this.find(q).then((attribute) => {
                            result[n] = attribute;
                        }).catch(() => {
                            result[n] = null;
                        }));
                    }
                    else {
                        result[n] = [];
                        promises.push(this.linkedRecords.Fact.findAll({ subject: q }).then((facts) => {
                            var _a;
                            for (let i = 0; i < facts.length; i += 1) {
                                const subjectId = (_a = facts[i]) === null || _a === void 0 ? void 0 : _a.subject;
                                if (subjectId && !result[n].find((attr) => attr.id === subjectId)) {
                                    const AttributeClass = AttributesRepository.attributeTypes
                                        .find((at) => at.isAttributeId(subjectId));
                                    if (AttributeClass) {
                                        const attribute = new AttributeClass(this.linkedRecords, this.serverSideEvents, subjectId);
                                        result[n].push(attribute);
                                    }
                                }
                            }
                        }));
                    }
                }
            }
            yield Promise.all(promises);
            return result;
        });
    }
}
AttributesRepository.attributeTypes = [
    client_1.default,
    client_2.default,
];
class FactsRepository {
    constructor(linkedRecords) {
        this.linkedRecords = linkedRecords;
    }
    createAll(facts) {
        return __awaiter(this, void 0, void 0, function* () {
            const createdFacts = yield Promise.all(facts.map((attr) => this.create(attr[0], attr[1], attr[2])));
            return createdFacts;
        });
    }
    create(subjectId, predicateId, objectId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!subjectId) {
                throw Error('subjectId can not be null');
            }
            if (!objectId) {
                throw Error('objectId can not be null');
            }
            if (!predicateId) {
                throw Error('predicateId can not be null');
            }
            const fact = new client_4.default(this.linkedRecords, subjectId, predicateId, objectId);
            yield fact.save();
            return fact;
        });
    }
    deleteAll() {
        return __awaiter(this, void 0, void 0, function* () {
            yield fetch(`${this.linkedRecords.serverURL}facts`, {
                method: 'DELETE',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
            });
        });
    }
    findAll({ subject, predicate, object }) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryURL = new URL(`${this.linkedRecords.serverURL}facts`);
            if (subject) {
                queryURL.searchParams.append('subject', JSON.stringify(subject));
            }
            if (predicate) {
                queryURL.searchParams.append('predicate', JSON.stringify(predicate));
            }
            if (object) {
                queryURL.searchParams.append('object', JSON.stringify(object));
            }
            const response = yield fetch(queryURL, {
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
            });
            const responseJson = yield response.json();
            return responseJson.map((record) => new client_4.default(this.linkedRecords, record.subject, record.predicate, record.object));
        });
    }
}
class LinkedRecords {
    constructor(serverURL, serverSideEvents) {
        this.serverURL = serverURL;
        this.actorId = (0, uuid_1.v4)();
        this.clientId = (0, uuid_1.v4)();
        this.serverSideEvents = serverSideEvents || new client_3.default();
        this.Attribute = new AttributesRepository(this, this.serverSideEvents);
        this.Fact = new FactsRepository(this);
    }
}
exports["default"] = LinkedRecords;


/***/ }),

/***/ "./src/facts/client/index.ts":
/*!***********************************!*\
  !*** ./src/facts/client/index.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
class Fact {
    constructor(linkedRecords, subject, predicate, object) {
        this.serverURL = linkedRecords.serverURL;
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            yield fetch(`${this.serverURL}facts`, {
                method: 'POST',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    subject: this.subject,
                    predicate: this.predicate,
                    object: this.object,
                }),
            });
        });
    }
}
exports["default"] = Fact;


/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NIL": () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "parse": () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   "stringify": () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "v1": () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "v3": () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "v4": () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "v5": () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "validate": () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "version": () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/esm-browser/v1.js");
/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/esm-browser/v3.js");
/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/esm-browser/v5.js");
/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/esm-browser/nil.js");
/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/esm-browser/version.js");
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");










/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/md5.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/md5.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/nil.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/nil.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/parse.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function parse(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/sha1.js":
/*!****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/sha1.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v1.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v1.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v3.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v3.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/esm-browser/md5.js");


var v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v35.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v35.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DNS": () => (/* binding */ DNS),
/* harmony export */   "URL": () => (/* binding */ URL),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__["default"])(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v5.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v5.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/version.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./example/client/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,